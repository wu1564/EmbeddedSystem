<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [new\new.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image new\new.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Mon Nov 30 17:23:19 2020
<BR><P>
<H3>Maximum Stack Usage =        440 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
_cbDialog &rArr; calculate_result &rArr; adjust &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[91]">BUTTON_Callback</a>
 <LI><a href="#[d2]">BUTTON_CreateIndirect</a>
 <LI><a href="#[f]">BUTTON_DrawSkinFlex</a>
 <LI><a href="#[195]">BUTTON_SetText</a>
 <LI><a href="#[92]">EDIT_Callback</a>
 <LI><a href="#[d3]">EDIT_CreateIndirect</a>
 <LI><a href="#[1a7]">EDIT_SetFont</a>
 <LI><a href="#[3fe]">EDIT_SetText</a>
 <LI><a href="#[1a9]">EDIT_SetTextAlign</a>
 <LI><a href="#[1aa]">EDIT_SetTextColor</a>
 <LI><a href="#[93]">FRAMEWIN_Callback</a>
 <LI><a href="#[d1]">FRAMEWIN_CreateIndirect</a>
 <LI><a href="#[11]">FRAMEWIN_DrawSkinFlex</a>
 <LI><a href="#[1b6]">FRAMEWIN_GetActive</a>
 <LI><a href="#[1b0]">FRAMEWIN__CalcPositions</a>
 <LI><a href="#[1bf]">FRAMEWIN__CalcTitleHeight</a>
 <LI><a href="#[10]">FRAMEWIN__GetBorderSize</a>
 <LI><a href="#[1bd]">FRAMEWIN__GetTitleLimits</a>
 <LI><a href="#[1c6]">GL_SetDefault</a>
 <LI><a href="#[3a6]">GUICC_M1555I_SetCustColorConv</a>
 <LI><a href="#[3a8]">GUICC_M4444I_SetCustColorConv</a>
 <LI><a href="#[3a7]">GUICC_M565_SetCustColorConv</a>
 <LI><a href="#[3aa]">GUICC_M8888I_SetCustColorConv</a>
 <LI><a href="#[3a9]">GUICC_M888_SetCustColorConv</a>
 <LI><a href="#[127]">GUIMONO_DispChar</a>
 <LI><a href="#[128]">GUIMONO_GetCharDistX</a>
 <LI><a href="#[129]">GUIMONO_GetFontInfo</a>
 <LI><a href="#[12a]">GUIMONO_IsInFont</a>
 <LI><a href="#[132]">GUIPROP_DispChar</a>
 <LI><a href="#[133]">GUIPROP_GetCharDistX</a>
 <LI><a href="#[134]">GUIPROP_GetFontInfo</a>
 <LI><a href="#[135]">GUIPROP_IsInFont</a>
 <LI><a href="#[1cd]">GUI_ALLOC_AllocNoInit</a>
 <LI><a href="#[1cf]">GUI_ALLOC_AllocZero</a>
 <LI><a href="#[2f4]">GUI_ALLOC_AssignMemory</a>
 <LI><a href="#[1d0]">GUI_ALLOC_Free</a>
 <LI><a href="#[1ea]">GUI_ALLOC_FreeFixedBlock</a>
 <LI><a href="#[17e]">GUI_ALLOC_FreePtr</a>
 <LI><a href="#[17f]">GUI_ALLOC_FreePtrArray</a>
 <LI><a href="#[1d2]">GUI_ALLOC_GetFixedBlock</a>
 <LI><a href="#[1d5]">GUI_ALLOC_GetMaxSize</a>
 <LI><a href="#[267]">GUI_ALLOC_GetSize</a>
 <LI><a href="#[17b]">GUI_ALLOC_LockH</a>
 <LI><a href="#[1a2]">GUI_ALLOC_Realloc</a>
 <LI><a href="#[1d6]">GUI_ALLOC_RequestSize</a>
 <LI><a href="#[17c]">GUI_ALLOC_UnlockH</a>
 <LI><a href="#[1e6]">GUI_ALLOC_h2p</a>
 <LI><a href="#[1d7]">GUI_CURSOR_SetPositionEx</a>
 <LI><a href="#[2c2]">GUI_CalcColorDist</a>
 <LI><a href="#[1c4]">GUI_Clear</a>
 <LI><a href="#[1de]">GUI_ClearRect</a>
 <LI><a href="#[1df]">GUI_ClearRectEx</a>
 <LI><a href="#[1e0]">GUI_CreateDialogBox</a>
 <LI><a href="#[1e7]">GUI_DEVICE_Create</a>
 <LI><a href="#[1e8]">GUI_DEVICE_CreateAndLink</a>
 <LI><a href="#[1e9]">GUI_DEVICE_Delete</a>
 <LI><a href="#[217]">GUI_DEVICE_Link</a>
 <LI><a href="#[274]">GUI_DEVICE_Unlink</a>
 <LI><a href="#[21d]">GUI_DEVICE__GetpDriver</a>
 <LI><a href="#[18f]">GUI_DRAW__Draw</a>
 <LI><a href="#[1f1]">GUI_DispStringAt</a>
 <LI><a href="#[18d]">GUI_DispStringInRect</a>
 <LI><a href="#[1f5]">GUI_DispStringInRectWrap</a>
 <LI><a href="#[188]">GUI_DrawGradientV</a>
 <LI><a href="#[192]">GUI_DrawHLine</a>
 <LI><a href="#[1b9]">GUI_DrawPixel</a>
 <LI><a href="#[187]">GUI_DrawRect</a>
 <LI><a href="#[193]">GUI_DrawVLine</a>
 <LI><a href="#[1fa]">GUI_Exec</a>
 <LI><a href="#[194]">GUI_FillRect</a>
 <LI><a href="#[1b8]">GUI_FillRectEx</a>
 <LI><a href="#[245]">GUI_GetBitmapPixelIndex</a>
 <LI><a href="#[237]">GUI_GetBitsPerPixelEx</a>
 <LI><a href="#[1cc]">GUI_GetBkColor</a>
 <LI><a href="#[260]">GUI_GetCharDistX</a>
 <LI><a href="#[261]">GUI_GetCharDistXEx</a>
 <LI><a href="#[18a]">GUI_GetClientRect</a>
 <LI><a href="#[1cb]">GUI_GetColor</a>
 <LI><a href="#[1d8]">GUI_GetCursorLayer</a>
 <LI><a href="#[3a5]">GUI_GetDrawMode</a>
 <LI><a href="#[1ec]">GUI_GetFontDistY</a>
 <LI><a href="#[200]">GUI_GetLayerPosEx</a>
 <LI><a href="#[223]">GUI_GetOrg</a>
 <LI><a href="#[19a]">GUI_GetStringDistX</a>
 <LI><a href="#[202]">GUI_GetTime</a>
 <LI><a href="#[257]">GUI_GetVersionString</a>
 <LI><a href="#[1ed]">GUI_GetYAdjust</a>
 <LI><a href="#[1be]">GUI_GetYSizeOfFont</a>
 <LI><a href="#[239]">GUI_GetpfColor2IndexEx</a>
 <LI><a href="#[238]">GUI_GetpfIndex2ColorEx</a>
 <LI><a href="#[1db]">GUI_GotoXY</a>
 <LI><a href="#[204]">GUI_Init</a>
 <LI><a href="#[210]">GUI_MEMDEV_Clear</a>
 <LI><a href="#[211]">GUI_MEMDEV_CopyToLCD</a>
 <LI><a href="#[21b]">GUI_MEMDEV_CreateEx</a>
 <LI><a href="#[21e]">GUI_MEMDEV_Delete</a>
 <LI><a href="#[220]">GUI_MEMDEV_Draw</a>
 <LI><a href="#[22b]">GUI_MEMDEV_GetBitsPerPixel</a>
 <LI><a href="#[22d]">GUI_MEMDEV_GetDataPtr</a>
 <LI><a href="#[224]">GUI_MEMDEV_GetYSize</a>
 <LI><a href="#[a1]">GUI_MEMDEV_Paint1Static</a>
 <LI><a href="#[226]">GUI_MEMDEV_ReduceYSize</a>
 <LI><a href="#[225]">GUI_MEMDEV_Select</a>
 <LI><a href="#[227]">GUI_MEMDEV_SetOrg</a>
 <LI><a href="#[230]">GUI_MEMDEV_Write</a>
 <LI><a href="#[21c]">GUI_MEMDEV__CreateFixed</a>
 <LI><a href="#[b6]">GUI_MEMDEV__WriteToActiveAlpha</a>
 <LI><a href="#[234]">GUI_MEMDEV__WriteToActiveAt</a>
 <LI><a href="#[b5]">GUI_MEMDEV__WriteToActiveOpaque</a>
 <LI><a href="#[33c]">GUI_MULTIBUF_ConfirmEx</a>
 <LI><a href="#[2b2]">GUI_MergeRect</a>
 <LI><a href="#[18b]">GUI_MoveRect</a>
 <LI><a href="#[29f]">GUI_PID_GetState</a>
 <LI><a href="#[29e]">GUI_PID_IsEmpty</a>
 <LI><a href="#[23c]">GUI_PID_StoreState</a>
 <LI><a href="#[23f]">GUI_PollKeyMsg</a>
 <LI><a href="#[241]">GUI_ReadRectEx</a>
 <LI><a href="#[286]">GUI_RectsIntersect</a>
 <LI><a href="#[243]">GUI_RestoreContext</a>
 <LI><a href="#[1da]">GUI_SPRITE_SetPosition</a>
 <LI><a href="#[248]">GUI_SaveContext_W</a>
 <LI><a href="#[21a]">GUI_SelectLCD</a>
 <LI><a href="#[214]">GUI_SelectLayer</a>
 <LI><a href="#[24a]">GUI_SetBkColor</a>
 <LI><a href="#[186]">GUI_SetColor</a>
 <LI><a href="#[213]">GUI_SetDrawMode</a>
 <LI><a href="#[189]">GUI_SetFont</a>
 <LI><a href="#[3ab]">GUI_SetFuncDrawAlpha</a>
 <LI><a href="#[1d9]">GUI_SetLayerPosEx</a>
 <LI><a href="#[20e]">GUI_SetOrg</a>
 <LI><a href="#[18c]">GUI_SetTextMode</a>
 <LI><a href="#[23d]">GUI_SignalEvent</a>
 <LI><a href="#[181]">GUI_StoreKey</a>
 <LI><a href="#[24c]">GUI_TIMER_Delete</a>
 <LI><a href="#[24d]">GUI_TIMER_GetFlag</a>
 <LI><a href="#[24e]">GUI_TIMER_Restart</a>
 <LI><a href="#[250]">GUI_TIMER_SetPeriod</a>
 <LI><a href="#[251]">GUI_TIMER__GetFirstTimer</a>
 <LI><a href="#[252]">GUI_TIMER__GetNextTimerLin</a>
 <LI><a href="#[1a1]">GUI_UC_Encode</a>
 <LI><a href="#[19f]">GUI_UC_GetCharCode</a>
 <LI><a href="#[1a4]">GUI_UC_GetCharSize</a>
 <LI><a href="#[1a0]">GUI_UC__CalcSizeOfChar</a>
 <LI><a href="#[25f]">GUI_UC__GetCharCodeInc</a>
 <LI><a href="#[2c7]">GUI_UC__NumBytes2NumChars</a>
 <LI><a href="#[19d]">GUI_UC__NumChars2NumBytes</a>
 <LI><a href="#[2c3]">GUI_USAGE_AddRect</a>
 <LI><a href="#[235]">GUI_USAGE_BM_Create</a>
 <LI><a href="#[21f]">GUI_USAGE_DecUseCnt</a>
 <LI><a href="#[253]">GUI__AllocAlphaBuffer</a>
 <LI><a href="#[22e]">GUI__AlphaPreserveTrans</a>
 <LI><a href="#[256]">GUI__CalcTextRect</a>
 <LI><a href="#[23a]">GUI__CompactPixelIndices</a>
 <LI><a href="#[2cd]">GUI__CompactPixelIndicesEx</a>
 <LI><a href="#[205]">GUI__Config</a>
 <LI><a href="#[1f0]">GUI__DispLine</a>
 <LI><a href="#[1f4]">GUI__DispStringInRect</a>
 <LI><a href="#[25c]">GUI__DoAlphaBlending</a>
 <LI><a href="#[1b7]">GUI__DrawTwinArc2</a>
 <LI><a href="#[191]">GUI__DrawTwinArc4</a>
 <LI><a href="#[25d]">GUI__ExpandPixelIndicesEx</a>
 <LI><a href="#[2cc]">GUI__GetCursorCharacter</a>
 <LI><a href="#[19c]">GUI__GetCursorPosChar</a>
 <LI><a href="#[2cb]">GUI__GetCursorPosX</a>
 <LI><a href="#[1ef]">GUI__GetLineDistX</a>
 <LI><a href="#[1ee]">GUI__GetLineNumChars</a>
 <LI><a href="#[19b]">GUI__GetNumChars</a>
 <LI><a href="#[25b]">GUI__HandleEOLine</a>
 <LI><a href="#[295]">GUI__IntersectRect</a>
 <LI><a href="#[1f3]">GUI__IntersectRects</a>
 <LI><a href="#[262]">GUI__InvertRectColors</a>
 <LI><a href="#[266]">GUI__ManageCache</a>
 <LI><a href="#[c]">GUI__MixColors</a>
 <LI><a href="#[d]">GUI__MixColorsBulk</a>
 <LI><a href="#[282]">GUI__ReduceRect</a>
 <LI><a href="#[23e]">GUI__RegisterExit</a>
 <LI><a href="#[184]">GUI__SetText</a>
 <LI><a href="#[1f7]">GUI__WrapGetNumBytesToNextLine</a>
 <LI><a href="#[1f8]">GUI__WrapGetNumCharsDisp</a>
 <LI><a href="#[268]">GUI__memset</a>
 <LI><a href="#[2c4]">GUI__memset16</a>
 <LI><a href="#[25e]">GUI__sqrt32</a>
 <LI><a href="#[1f]">LCD_AA_MixColors16</a>
 <LI><a href="#[255]">LCD_AA_SetOrMask</a>
 <LI><a href="#[264]">LCD_Color2Index</a>
 <LI><a href="#[e0]">LCD_Color2Index_8666</a>
 <LI><a href="#[1c9]">LCD_DrawBitmap</a>
 <LI><a href="#[116]">LCD_DrawHLine</a>
 <LI><a href="#[117]">LCD_DrawPixel</a>
 <LI><a href="#[1f9]">LCD_DrawVLine</a>
 <LI><a href="#[1ca]">LCD_FillRect</a>
 <LI><a href="#[269]">LCD_GetBitsPerPixelEx</a>
 <LI><a href="#[1fc]">LCD_GetBkColorIndex</a>
 <LI><a href="#[1ff]">LCD_GetColorIndex</a>
 <LI><a href="#[26a]">LCD_GetMirrorXEx</a>
 <LI><a href="#[26b]">LCD_GetMirrorYEx</a>
 <LI><a href="#[26c]">LCD_GetNumColors</a>
 <LI><a href="#[26d]">LCD_GetNumColorsEx</a>
 <LI><a href="#[26e]">LCD_GetNumLayers</a>
 <LI><a href="#[26f]">LCD_GetPalette</a>
 <LI><a href="#[263]">LCD_GetPixelIndex</a>
 <LI><a href="#[201]">LCD_GetPosEx</a>
 <LI><a href="#[270]">LCD_GetSwapXYEx</a>
 <LI><a href="#[229]">LCD_GetVXSizeEx</a>
 <LI><a href="#[254]">LCD_GetVXSizeMax</a>
 <LI><a href="#[22a]">LCD_GetVYSizeEx</a>
 <LI><a href="#[231]">LCD_GetXSize</a>
 <LI><a href="#[209]">LCD_GetXSizeDisplay</a>
 <LI><a href="#[221]">LCD_GetXSizeEx</a>
 <LI><a href="#[20b]">LCD_GetXSizeMax</a>
 <LI><a href="#[232]">LCD_GetYSize</a>
 <LI><a href="#[20a]">LCD_GetYSizeDisplay</a>
 <LI><a href="#[222]">LCD_GetYSizeEx</a>
 <LI><a href="#[20c]">LCD_GetYSizeMax</a>
 <LI><a href="#[b]">LCD_GetpPalConvTableBM</a>
 <LI><a href="#[1fd]">LCD_Index2Color</a>
 <LI><a href="#[fa]">LCD_Index2Color_565</a>
 <LI><a href="#[e1]">LCD_Index2Color_8666</a>
 <LI><a href="#[ff]">LCD_Index2Color_888</a>
 <LI><a href="#[104]">LCD_Index2Color_8888</a>
 <LI><a href="#[109]">LCD_Index2Color_M565</a>
 <LI><a href="#[99]">LCD_Index2Color_M888</a>
 <LI><a href="#[9a]">LCD_Index2Color_M8888I</a>
 <LI><a href="#[271]">LCD_InitColors</a>
 <LI><a href="#[272]">LCD_InitLUT</a>
 <LI><a href="#[249]">LCD_SelectLCD</a>
 <LI><a href="#[1c3]">LCD_SetBkColor</a>
 <LI><a href="#[27b]">LCD_SetBkColorIndex</a>
 <LI><a href="#[275]">LCD_SetClipRectEx</a>
 <LI><a href="#[219]">LCD_SetClipRectMax</a>
 <LI><a href="#[1c7]">LCD_SetColor</a>
 <LI><a href="#[27a]">LCD_SetColorIndex</a>
 <LI><a href="#[276]">LCD_SetDevFunc</a>
 <LI><a href="#[20d]">LCD_SetDisplaySize</a>
 <LI><a href="#[1c8]">LCD_SetDrawMode</a>
 <LI><a href="#[273]">LCD_SetLUTEntryEx</a>
 <LI><a href="#[265]">LCD_SetPixelIndex</a>
 <LI><a href="#[24b]">LCD_SetPosEx</a>
 <LI><a href="#[277]">LCD_SetSizeEx</a>
 <LI><a href="#[278]">LCD_SetVRAMAddrEx</a>
 <LI><a href="#[279]">LCD_SetVSizeEx</a>
 <LI><a href="#[218]">LCD_UpdateColorIndices</a>
 <LI><a href="#[23b]">LCD__DrawBitmap_1bpp</a>
 <LI><a href="#[22c]">LCD__GetBPPDevice</a>
 <LI><a href="#[9c]">TEXT_Callback</a>
 <LI><a href="#[d4]">TEXT_CreateIndirect</a>
 <LI><a href="#[27d]">TEXT_SetFont</a>
 <LI><a href="#[27e]">TEXT_SetText</a>
 <LI><a href="#[27f]">TEXT_SetTextColor</a>
 <LI><a href="#[180]">WIDGET_AndState</a>
 <LI><a href="#[178]">WIDGET_HandleActive</a>
 <LI><a href="#[17a]">WIDGET_OrState</a>
 <LI><a href="#[283]">WIDGET__EFFECT_DrawDown</a>
 <LI><a href="#[285]">WIDGET__FillStringInRect</a>
 <LI><a href="#[287]">WIDGET__GetInsideRect</a>
 <LI><a href="#[183]">WIDGET__Init</a>
 <LI><a href="#[215]">WM_Activate</a>
 <LI><a href="#[288]">WM_BringToBottom</a>
 <LI><a href="#[1ae]">WM_BringToTop</a>
 <LI><a href="#[182]">WM_CreateWindowAsChild</a>
 <LI><a href="#[216]">WM_Deactivate</a>
 <LI><a href="#[179]">WM_DefaultProc</a>
 <LI><a href="#[1a6]">WM_DeleteWindow</a>
 <LI><a href="#[1b5]">WM_DisableMemdev</a>
 <LI><a href="#[1fb]">WM_Exec</a>
 <LI><a href="#[28d]">WM_ForEachDesc</a>
 <LI><a href="#[29d]">WM_GetActiveWindow</a>
 <LI><a href="#[1fe]">WM_GetClientRect</a>
 <LI><a href="#[1e1]">WM_GetClientWindow</a>
 <LI><a href="#[1e3]">WM_GetDesktopWindow</a>
 <LI><a href="#[2b4]">WM_GetDesktopWindowEx</a>
 <LI><a href="#[299]">WM_GetDialogItem</a>
 <LI><a href="#[1c0]">WM_GetFirstChild</a>
 <LI><a href="#[1e5]">WM_GetFocusedWindow</a>
 <LI><a href="#[27c]">WM_GetHasTrans</a>
 <LI><a href="#[29b]">WM_GetId</a>
 <LI><a href="#[1c1]">WM_GetNextSibling</a>
 <LI><a href="#[1c2]">WM_GetParent</a>
 <LI><a href="#[22f]">WM_GetWindowOrgX</a>
 <LI><a href="#[29c]">WM_GetWindowRectEx</a>
 <LI><a href="#[199]">WM_GetWindowSizeX</a>
 <LI><a href="#[1bc]">WM_GetWindowSizeY</a>
 <LI><a href="#[95]">WM_HandlePID</a>
 <LI><a href="#[2b7]">WM_HasCaptured</a>
 <LI><a href="#[1b3]">WM_HasFocus</a>
 <LI><a href="#[20f]">WM_Init</a>
 <LI><a href="#[185]">WM_InvalidateWindow</a>
 <LI><a href="#[2aa]">WM_InvalidateWindowAndDescsEx</a>
 <LI><a href="#[2ab]">WM_IsFocusable</a>
 <LI><a href="#[1b2]">WM_IsWindow</a>
 <LI><a href="#[2ad]">WM_MoveWindow</a>
 <LI><a href="#[17d]">WM_NotifyParent</a>
 <LI><a href="#[240]">WM_OnKey</a>
 <LI><a href="#[2a2]">WM_PID__SetPrevState</a>
 <LI><a href="#[2a6]">WM_ReleaseCapture</a>
 <LI><a href="#[2b0]">WM_ResizeWindow</a>
 <LI><a href="#[198]">WM_RestartTimer</a>
 <LI><a href="#[2a4]">WM_Screen2hWin</a>
 <LI><a href="#[197]">WM_SelectWindow</a>
 <LI><a href="#[298]">WM_SendMessage</a>
 <LI><a href="#[1e4]">WM_SendMessageNoPara</a>
 <LI><a href="#[290]">WM_SendToParent</a>
 <LI><a href="#[2b6]">WM_SetCapture</a>
 <LI><a href="#[1af]">WM_SetCaptureMove</a>
 <LI><a href="#[1ab]">WM_SetFocus</a>
 <LI><a href="#[1b4]">WM_SetFocusOnNextChild</a>
 <LI><a href="#[1c5]">WM_SetFocusOnPrevChild</a>
 <LI><a href="#[190]">WM_SetHasTrans</a>
 <LI><a href="#[233]">WM_SetSize</a>
 <LI><a href="#[1f2]">WM_SetUserClipRect</a>
 <LI><a href="#[1e2]">WM_ShowWindow</a>
 <LI><a href="#[2bb]">WM_ValidateWindow</a>
 <LI><a href="#[2bc]">WM__ActivateClipRect</a>
 <LI><a href="#[2a0]">WM__AddCriticalHandle</a>
 <LI><a href="#[292]">WM__DeleteAssocTimer</a>
 <LI><a href="#[297]">WM__ForEachDesc</a>
 <LI><a href="#[28f]">WM__GetClientRectEx</a>
 <LI><a href="#[281]">WM__GetClientRectWin</a>
 <LI><a href="#[2b8]">WM__GetFocusedChild</a>
 <LI><a href="#[2ba]">WM__GetLastSibling</a>
 <LI><a href="#[1dd]">WM__GetNextIVR</a>
 <LI><a href="#[289]">WM__GetPrevSibling</a>
 <LI><a href="#[2b9]">WM__GetTopLevelLayer</a>
 <LI><a href="#[1ba]">WM__GetWindowSizeX</a>
 <LI><a href="#[1bb]">WM__GetWindowSizeY</a>
 <LI><a href="#[1dc]">WM__InitIVRSearch</a>
 <LI><a href="#[28c]">WM__InsertWindowIntoList</a>
 <LI><a href="#[2a8]">WM__InvalidateDrawAndDescs</a>
 <LI><a href="#[2af]">WM__InvalidateParent</a>
 <LI><a href="#[293]">WM__InvalidateRect</a>
 <LI><a href="#[28a]">WM__InvalidateRectEx</a>
 <LI><a href="#[1ad]">WM__IsAncestor</a>
 <LI><a href="#[1ac]">WM__IsAncestorOrSelf</a>
 <LI><a href="#[18e]">WM__IsEnabled</a>
 <LI><a href="#[2ac]">WM__IsWindow</a>
 <LI><a href="#[a2]">WM__Paint1</a>
 <LI><a href="#[2a3]">WM__RemoveCriticalHandle</a>
 <LI><a href="#[28b]">WM__RemoveWindowFromList</a>
 <LI><a href="#[284]">WM__Screen2Client</a>
 <LI><a href="#[1b1]">WM__SendMessage</a>
 <LI><a href="#[2a5]">WM__SendMessageIfEnabled</a>
 <LI><a href="#[228]">WM__SendMessageNoPara</a>
 <LI><a href="#[2b3]">WM__SendMsgNoData</a>
 <LI><a href="#[2a1]">WM__SendTouchMessage</a>
 <LI><a href="#[280]">WM__UpdateChildPositions</a>
 <LI><a href="#[208]">emWin_LCD_Init</a>
 <LI><a href="#[d5]">_Color2Index_1616I</a>
 <LI><a href="#[d6]">_Index2Color_1616I</a>
 <LI><a href="#[d7]">_GetIndexMask_1616I</a>
 <LI><a href="#[d8]">_Color2IndexBulk_1616I</a>
 <LI><a href="#[d9]">_Index2ColorBulk_1616I</a>
 <LI><a href="#[da]">_Color2Index_822216</a>
 <LI><a href="#[db]">_Index2Color_822216</a>
 <LI><a href="#[dc]">_GetIndexMask_822216</a>
 <LI><a href="#[dd]">_Color2Index_84444</a>
 <LI><a href="#[df]">_GetIndexMask_84444</a>
 <LI><a href="#[de]">_Index2Color_84444</a>
 <LI><a href="#[e2]">_GetIndexMask_8666</a>
 <LI><a href="#[e5]">_GetIndexMask_8666_1</a>
 <LI><a href="#[e3]">_Color2Index_8666_1</a>
 <LI><a href="#[e4]">_Index2Color_8666_1</a>
 <LI><a href="#[e6]">_Color2Index_88666I</a>
 <LI><a href="#[e7]">_Index2Color_88666I</a>
 <LI><a href="#[e8]">_GetIndexMask_88666I</a>
 <LI><a href="#[e9]">_Color2IndexBulk_88666I</a>
 <LI><a href="#[ea]">_Index2ColorBulk_88666I</a>
 <LI><a href="#[eb]">_Color2Index_M1555I</a>
 <LI><a href="#[ec]">_Index2Color_M1555I</a>
 <LI><a href="#[ed]">_GetIndexMask_M1555I</a>
 <LI><a href="#[ee]">_Color2IndexBulk_M1555I</a>
 <LI><a href="#[ef]">_Index2ColorBulk_M1555I</a>
 <LI><a href="#[f0]">_Color2Index_M4444I</a>
 <LI><a href="#[f1]">_Index2Color_M4444I</a>
 <LI><a href="#[f2]">_GetIndexMask_M4444I</a>
 <LI><a href="#[f3]">_Color2IndexBulk_M4444I</a>
 <LI><a href="#[f4]">_Index2ColorBulk_M4444I</a>
 <LI><a href="#[f5]">_Color2Index_M8888I</a>
 <LI><a href="#[f6]">_GetIndexMask_M8888I</a>
 <LI><a href="#[f7]">_Color2IndexBulk_M8888I</a>
 <LI><a href="#[f8]">_Index2ColorBulk_M8888I</a>
 <LI><a href="#[f9]">_Color2Index_565</a>
 <LI><a href="#[fb]">_GetIndexMask_565</a>
 <LI><a href="#[fc]">_Color2IndexBulk</a>
 <LI><a href="#[fd]">_Index2ColorBulk</a>
 <LI><a href="#[fe]">_Color2Index_888</a>
 <LI><a href="#[100]">_GetIndexMask_888</a>
 <LI><a href="#[101]">_Color2IndexBulk</a>
 <LI><a href="#[102]">_Index2ColorBulk</a>
 <LI><a href="#[103]">_Color2Index_8888</a>
 <LI><a href="#[105]">_GetIndexMask_8888</a>
 <LI><a href="#[106]">_Color2IndexBulk</a>
 <LI><a href="#[107]">_Index2ColorBulk</a>
 <LI><a href="#[108]">_Color2Index_M565</a>
 <LI><a href="#[10a]">_GetIndexMask_M565</a>
 <LI><a href="#[10b]">_Color2IndexBulk</a>
 <LI><a href="#[10c]">_Index2ColorBulk</a>
 <LI><a href="#[10d]">_Color2Index_M888</a>
 <LI><a href="#[10e]">_GetIndexMask_M888</a>
 <LI><a href="#[10f]">_Color2IndexBulk</a>
 <LI><a href="#[110]">_Index2ColorBulk</a>
 <LI><a href="#[111]">_Color2Index_M8888</a>
 <LI><a href="#[113]">_GetIndexMask_M8888</a>
 <LI><a href="#[114]">_Color2IndexBulk</a>
 <LI><a href="#[115]">_Index2ColorBulk</a>
 <LI><a href="#[112]">_Index2Color_M8888</a>
 <LI><a href="#[1d1]">_AddFreeMemory</a>
 <LI><a href="#[1d4]">_RemoveHoles</a>
 <LI><a href="#[1ce]">_Alloc</a>
 <LI><a href="#[1d3]">_EnlargeBlocks</a>
 <LI><a href="#[207]">_InitContext</a>
 <LI><a href="#[98]">_OnExit</a>
 <LI><a href="#[96]">_OnExit</a>
 <LI><a href="#[97]">_OnExit</a>
 <LI><a href="#[119]">_SetBkColor</a>
 <LI><a href="#[118]">_SetColor</a>
 <LI><a href="#[11a]">_SetDrawMode</a>
 <LI><a href="#[126]">_GetRect</a>
 <LI><a href="#[120]">_SetPixelIndex</a>
 <LI><a href="#[11f]">_GetPixelIndex</a>
 <LI><a href="#[121]">_XorPixel</a>
 <LI><a href="#[124]">_GetDevProp</a>
 <LI><a href="#[125]">_GetDevData</a>
 <LI><a href="#[a8]">_ReadRect</a>
 <LI><a href="#[123]">_GetDevFunc</a>
 <LI><a href="#[a3]">_SetVRAMAddr</a>
 <LI><a href="#[a4]">_SetVis</a>
 <LI><a href="#[a5]">_GetPos</a>
 <LI><a href="#[a6]">_SetPos</a>
 <LI><a href="#[a7]">_SetAlpha</a>
 <LI><a href="#[a9]">_SetVRAM_BufferPTR</a>
 <LI><a href="#[aa]">_ShowBuffer</a>
 <LI><a href="#[ab]">_CopyBuffer</a>
 <LI><a href="#[ac]">_SetDevFunc</a>
 <LI><a href="#[ad]">_SetChroma</a>
 <LI><a href="#[ae]">_SetChromaMode</a>
 <LI><a href="#[af]">_SetAlphaMode</a>
 <LI><a href="#[b0]">_Off</a>
 <LI><a href="#[b1]">_On</a>
 <LI><a href="#[b2]">_Init</a>
 <LI><a href="#[b3]">_SetSize</a>
 <LI><a href="#[b4]">_SetVSize</a>
 <LI><a href="#[122]">_SetOrg</a>
 <LI><a href="#[11e]">_FillRect</a>
 <LI><a href="#[11c]">_DrawHLine</a>
 <LI><a href="#[11d]">_DrawVLine</a>
 <LI><a href="#[11b]">_DrawBitmap</a>
 <LI><a href="#[a0]">_OnExit</a>
 <LI><a href="#[2c6]">_Findy1</a>
 <LI><a href="#[2c5]">_Findx0</a>
 <LI><a href="#[2be]">_Findx1</a>
 <LI><a href="#[2c1]">_Paint1Trans</a>
 <LI><a href="#[2c0]">_PaintTransChildren</a>
 <LI><a href="#[2bd]">_Findx0.constprop.10</a>
 <LI><a href="#[2bf]">_Findy1.constprop.11</a>
 <LI><a href="#[296]">WM__PaintWinAndOverlays</a>
 <LI><a href="#[9e]">_cbPaintMemDev</a>
 <LI><a href="#[2a7]">_Invalidate1Abs</a>
 <LI><a href="#[28e]">WM_InvalidateRect.part.2</a>
 <LI><a href="#[9f]">_cbBackWin</a>
 <LI><a href="#[291]">WM_DeleteWindow.part.3</a>
 <LI><a href="#[294]">_Exec1Input</a>
 <LI><a href="#[2b1]">WM_ResizeWindow.part.11</a>
 <LI><a href="#[2a9]">WM_InvalidateWindowAndDescs.part.14</a>
 <LI><a href="#[2c9]">_GetDialogItem.part.5</a>
 <LI><a href="#[2c8]">_GetDialogItem</a>
 <LI><a href="#[29a]">__GetDialogItem</a>
 <LI><a href="#[e]">_OnTouchDefault</a>
 <LI><a href="#[196]">_Paint</a>
 <LI><a href="#[1a8]">EDIT_SetText.part.5</a>
 <LI><a href="#[94]">FRAMEWIN__cbClient</a>
 <LI><a href="#[12b]">_Color2Index_16</a>
 <LI><a href="#[12c]">_Index2Color_16</a>
 <LI><a href="#[12d]">_GetIndexMask_16</a>
 <LI><a href="#[12]">_Log2VisBuffered</a>
 <LI><a href="#[25a]">_DispLine</a>
 <LI><a href="#[1eb]">GUI_DispString.part.0</a>
 <LI><a href="#[1f6]">GUI_DispStringInRectWrap.part.1</a>
 <LI><a href="#[12e]">_GetCharCode</a>
 <LI><a href="#[12f]">_GetCharSize</a>
 <LI><a href="#[130]">_CalcSizeOfChar</a>
 <LI><a href="#[131]">_Encode</a>
 <LI><a href="#[13]">_GetCursorPosX</a>
 <LI><a href="#[15]">_GetCursorCharacter</a>
 <LI><a href="#[14]">_GetCursorPosChar</a>
 <LI><a href="#[9b]">_OnExit</a>
 <LI><a href="#[242]">LCD_ReadRectEx</a>
 <LI><a href="#[212]">GUI_MEMDEV_CopyToLCDAt.part.0</a>
 <LI><a href="#[140]">_GetDevData</a>
 <LI><a href="#[13e]">_GetDevFunc</a>
 <LI><a href="#[13d]">_SetOrg</a>
 <LI><a href="#[141]">_GetRect</a>
 <LI><a href="#[136]">_DrawBitmap</a>
 <LI><a href="#[13f]">_GetDevProp</a>
 <LI><a href="#[13a]">_GetPixelIndex</a>
 <LI><a href="#[13b]">_SetPixelIndex</a>
 <LI><a href="#[13c]">_XorPixel</a>
 <LI><a href="#[139]">_FillRect</a>
 <LI><a href="#[137]">_DrawHLine</a>
 <LI><a href="#[138]">_DrawVLine</a>
 <LI><a href="#[9d]">_cbInvalidateOne</a>
 <LI><a href="#[2ae]">_MoveDescendents</a>
 <LI><a href="#[19]">_Create</a>
 <LI><a href="#[18]">_Paint</a>
 <LI><a href="#[1c]">_GetBorderSize</a>
 <LI><a href="#[1b]">_Create</a>
 <LI><a href="#[1a]">_Paint</a>
 <LI><a href="#[144]">_GetIndexMask_0</a>
 <LI><a href="#[143]">_Index2Color_0</a>
 <LI><a href="#[142]">_Color2Index_0</a>
 <LI><a href="#[24f]">_Link</a>
 <LI><a href="#[1d]">_GetWordWrap</a>
 <LI><a href="#[1e]">_GetCharWrap</a>
 <LI><a href="#[14f]">_GetDevData</a>
 <LI><a href="#[14d]">_GetDevFunc</a>
 <LI><a href="#[14e]">_GetDevProp</a>
 <LI><a href="#[14c]">_SetOrg</a>
 <LI><a href="#[150]">_GetRect</a>
 <LI><a href="#[145]">_DrawBitmap</a>
 <LI><a href="#[149]">_GetPixelIndex</a>
 <LI><a href="#[14a]">_SetPixelIndex</a>
 <LI><a href="#[14b]">_XorPixel</a>
 <LI><a href="#[148]">_FillRect</a>
 <LI><a href="#[146]">_DrawHLine</a>
 <LI><a href="#[147]">_DrawVLine</a>
 <LI><a href="#[151]">GUI_USAGE_BM_AddPixel</a>
 <LI><a href="#[155]">GUI_USAGE_BM_GetNextDirty</a>
 <LI><a href="#[154]">_GUI_USAGE_BM_Delete</a>
 <LI><a href="#[153]">GUI_USAGE_BM_Clear</a>
 <LI><a href="#[152]">GUI_USAGE_BM_AddHLine</a>
 <LI><a href="#[2b5]">_Screen2hWin</a>
 <LI><a href="#[159]">_DrawDownRect</a>
 <LI><a href="#[156]">_DrawUp</a>
 <LI><a href="#[157]">_DrawUpRect</a>
 <LI><a href="#[158]">_DrawDown</a>
 <LI><a href="#[244]">_CreateBuffer.isra.4</a>
 <LI><a href="#[246]">_SetBkIndexBuffered</a>
 <LI><a href="#[247]">_ReleaseBuffer.isra.7</a>
 <LI><a href="#[236]">_WriteToActiveAlpha</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[29]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">SysTick_Handler</a><BR>
 <LI><a href="#[3c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c]">ADC_IRQHandler</a><BR>
 <LI><a href="#[1b1]">WM__SendMessage</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[179]">WM_DefaultProc</a><BR>
 <LI><a href="#[293]">WM__InvalidateRect</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[293]">WM__InvalidateRect</a><BR>
 <LI><a href="#[2aa]">WM_InvalidateWindowAndDescsEx</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2aa]">WM_InvalidateWindowAndDescsEx</a><BR>
 <LI><a href="#[2a8]">WM__InvalidateDrawAndDescs</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a8]">WM__InvalidateDrawAndDescs</a><BR>
 <LI><a href="#[2b1]">WM_ResizeWindow.part.11</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[280]">WM__UpdateChildPositions</a><BR>
 <LI><a href="#[2ae]">_MoveDescendents</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2ae]">_MoveDescendents</a><BR>
 <LI><a href="#[297]">WM__ForEachDesc</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[297]">WM__ForEachDesc</a><BR>
 <LI><a href="#[1d3]">_EnlargeBlocks</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1ce]">_Alloc</a><BR>
 <LI><a href="#[2c6]">_Findy1</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c6]">_Findy1</a><BR>
 <LI><a href="#[2c5]">_Findx0</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c5]">_Findx0</a><BR>
 <LI><a href="#[2be]">_Findx1</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2be]">_Findx1</a><BR>
 <LI><a href="#[291]">WM_DeleteWindow.part.3</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[291]">WM_DeleteWindow.part.3</a><BR>
 <LI><a href="#[2b5]">_Screen2hWin</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b5]">_Screen2hWin</a><BR>
 <LI><a href="#[24]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">BusFault_Handler</a><BR>
 <LI><a href="#[22]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">HardFault_Handler</a><BR>
 <LI><a href="#[23]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">MemManage_Handler</a><BR>
 <LI><a href="#[25]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">UsageFault_Handler</a><BR>
 <LI><a href="#[2c0]">_PaintTransChildren</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c0]">_PaintTransChildren</a><BR>
 <LI><a href="#[2a9]">WM_InvalidateWindowAndDescs.part.14</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a9]">WM_InvalidateWindowAndDescs.part.14</a><BR>
 <LI><a href="#[2c9]">_GetDialogItem.part.5</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c9]">_GetDialogItem.part.5</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[3c]">ADC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[91]">BUTTON_Callback</a> from BUTTON.o(.text.BUTTON_Callback) referenced from BUTTON.o(.text.BUTTON_CreateIndirect)
 <LI><a href="#[d2]">BUTTON_CreateIndirect</a> from BUTTON.o(.text.BUTTON_CreateIndirect) referenced 18 times from framewindlg.o(.constdata)
 <LI><a href="#[f]">BUTTON_DrawSkinFlex</a> from BUTTON_SkinFlex.o(.text.BUTTON_DrawSkinFlex) referenced 2 times from BUTTON.o(.data)
 <LI><a href="#[24]">BusFault_Handler</a> from stm32f7xx_it.o(i.BusFault_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3e]">CAN1_RX0_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3f]">CAN1_RX1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[40]">CAN1_SCE_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3d]">CAN1_TX_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6a]">CAN2_RX0_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6b]">CAN2_RX1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6c]">CAN2_SCE_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[69]">CAN2_TX_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[87]">CEC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[78]">DCMI_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[35]">DMA1_Stream0_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[36]">DMA1_Stream1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[37]">DMA1_Stream2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[38]">DMA1_Stream3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[59]">DMA1_Stream7_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[83]">DMA2D_IRQHandler</a> from stm32f7xx_it.o(i.DMA2D_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[62]">DMA2_Stream0_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[63]">DMA2_Stream1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[64]">DMA2_Stream2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[65]">DMA2_Stream3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[66]">DMA2_Stream4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6e]">DMA2_Stream5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6f]">DMA2_Stream6_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[70]">DMA2_Stream7_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[27]">DebugMon_Handler</a> from stm32f7xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[92]">EDIT_Callback</a> from EDIT.o(.text.EDIT_Callback) referenced from EDIT.o(.text.EDIT_CreateIndirect)
 <LI><a href="#[d3]">EDIT_CreateIndirect</a> from EDIT.o(.text.EDIT_CreateIndirect) referenced from framewindlg.o(.constdata)
 <LI><a href="#[67]">ETH_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[68]">ETH_WKUP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[30]">EXTI0_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[52]">EXTI15_10_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[31]">EXTI1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[32]">EXTI2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[33]">EXTI3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[34]">EXTI4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[41]">EXTI9_5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2e]">FLASH_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5a]">FMC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[7a]">FPU_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[93]">FRAMEWIN_Callback</a> from FRAMEWIN.o(.text.FRAMEWIN_Callback) referenced from FRAMEWIN.o(.text.FRAMEWIN_CreateIndirect)
 <LI><a href="#[d1]">FRAMEWIN_CreateIndirect</a> from FRAMEWIN.o(.text.FRAMEWIN_CreateIndirect) referenced from framewindlg.o(.constdata)
 <LI><a href="#[11]">FRAMEWIN_DrawSkinFlex</a> from FRAMEWIN_SkinFlex.o(.text.FRAMEWIN_DrawSkinFlex) referenced 4 times from FRAMEWIN.o(.data)
 <LI><a href="#[10]">FRAMEWIN__GetBorderSize</a> from FRAMEWIN.o(.text.FRAMEWIN__GetBorderSize) referenced 2 times from FRAMEWIN.o(.data)
 <LI><a href="#[94]">FRAMEWIN__cbClient</a> from FRAMEWIN.o(.text.FRAMEWIN__cbClient) referenced from FRAMEWIN.o(.text.FRAMEWIN_CreateIndirect)
 <LI><a href="#[127]">GUIMONO_DispChar</a> from GUI_CharM.o(.text.GUIMONO_DispChar) referenced 8 times from F8x16.o(.rodata)
 <LI><a href="#[128]">GUIMONO_GetCharDistX</a> from GUI_CharM.o(.text.GUIMONO_GetCharDistX) referenced 8 times from F8x16.o(.rodata)
 <LI><a href="#[129]">GUIMONO_GetFontInfo</a> from GUI_CharM.o(.text.GUIMONO_GetFontInfo) referenced 8 times from F8x16.o(.rodata)
 <LI><a href="#[12a]">GUIMONO_IsInFont</a> from GUI_CharM.o(.text.GUIMONO_IsInFont) referenced 8 times from F8x16.o(.rodata)
 <LI><a href="#[132]">GUIPROP_DispChar</a> from GUI_CharP.o(.text.GUIPROP_DispChar) referenced 2 times from F13_1.o(.rodata)
 <LI><a href="#[133]">GUIPROP_GetCharDistX</a> from GUI_CharP.o(.text.GUIPROP_GetCharDistX) referenced 2 times from F13_1.o(.rodata)
 <LI><a href="#[134]">GUIPROP_GetFontInfo</a> from GUI_CharP.o(.text.GUIPROP_GetFontInfo) referenced 2 times from F13_1.o(.rodata)
 <LI><a href="#[135]">GUIPROP_IsInFont</a> from GUI_CharP.o(.text.GUIPROP_IsInFont) referenced 2 times from F13_1.o(.rodata)
 <LI><a href="#[a1]">GUI_MEMDEV_Paint1Static</a> from GUIDEV_StaticDevices.o(.text.GUI_MEMDEV_Paint1Static) referenced from WM.o(.text.WM__PaintWinAndOverlays)
 <LI><a href="#[a1]">GUI_MEMDEV_Paint1Static</a> from GUIDEV_StaticDevices.o(.text.GUI_MEMDEV_Paint1Static) referenced from WM.o(.text._Paint1Trans)
 <LI><a href="#[b6]">GUI_MEMDEV__WriteToActiveAlpha</a> from GUIDEV_WriteToActiveAlpha.o(.text.GUI_MEMDEV__WriteToActiveAlpha) referenced from GUIDEV_32.o(.text._GetDevFunc)
 <LI><a href="#[b5]">GUI_MEMDEV__WriteToActiveOpaque</a> from GUIDEV_WriteToActiveOpaque.o(.text.GUI_MEMDEV__WriteToActiveOpaque) referenced from GUIDEV_16.o(.text._GetDevFunc)
 <LI><a href="#[152]">GUI_USAGE_BM_AddHLine</a> from GUIDEV_UsageBM.o(.text.GUI_USAGE_BM_AddHLine) referenced from GUIDEV_UsageBM.o(.rodata)
 <LI><a href="#[151]">GUI_USAGE_BM_AddPixel</a> from GUIDEV_UsageBM.o(.text.GUI_USAGE_BM_AddPixel) referenced from GUIDEV_UsageBM.o(.rodata)
 <LI><a href="#[153]">GUI_USAGE_BM_Clear</a> from GUIDEV_UsageBM.o(.text.GUI_USAGE_BM_Clear) referenced from GUIDEV_UsageBM.o(.rodata)
 <LI><a href="#[155]">GUI_USAGE_BM_GetNextDirty</a> from GUIDEV_UsageBM.o(.text.GUI_USAGE_BM_GetNextDirty) referenced from GUIDEV_UsageBM.o(.rodata)
 <LI><a href="#[c]">GUI__MixColors</a> from GUI__Alpha.o(.text.GUI__MixColors) referenced 2 times from GUI__Alpha.o(.data)
 <LI><a href="#[d]">GUI__MixColorsBulk</a> from GUI__Alpha.o(.text.GUI__MixColorsBulk) referenced 2 times from GUI__Alpha.o(.data)
 <LI><a href="#[22]">HardFault_Handler</a> from stm32f7xx_it.o(i.HardFault_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4a]">I2C1_ER_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[49]">I2C1_EV_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4c]">I2C2_ER_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4b]">I2C2_EV_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[73]">I2C3_ER_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[72]">I2C3_EV_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[89]">I2C4_ER_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[88]">I2C4_EV_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[1f]">LCD_AA_MixColors16</a> from LCD_AA.o(.text.LCD_AA_MixColors16) referenced 2 times from LCD_AA.o(.data)
 <LI><a href="#[e0]">LCD_Color2Index_8666</a> from GUICC_8666.o(.text.LCD_Color2Index_8666) referenced from GUICC_8666.o(.rodata)
 <LI><a href="#[116]">LCD_DrawHLine</a> from LCD.o(.text.LCD_DrawHLine) referenced from GUI_Core.o(.rodata)
 <LI><a href="#[117]">LCD_DrawPixel</a> from LCD.o(.text.LCD_DrawPixel) referenced from GUI_Core.o(.rodata)
 <LI><a href="#[b]">LCD_GetpPalConvTableBM</a> from LCD_Color.o(.text.LCD_GetpPalConvTableBM) referenced 2 times from GUI_Core.o(.data)
 <LI><a href="#[fa]">LCD_Index2Color_565</a> from GUICC_565.o(.text.LCD_Index2Color_565) referenced from GUICC_565.o(.rodata)
 <LI><a href="#[e1]">LCD_Index2Color_8666</a> from GUICC_8666.o(.text.LCD_Index2Color_8666) referenced from GUICC_8666.o(.rodata)
 <LI><a href="#[ff]">LCD_Index2Color_888</a> from GUICC_888_Index2Color.o(.text.LCD_Index2Color_888) referenced from GUICC_888.o(.rodata)
 <LI><a href="#[104]">LCD_Index2Color_8888</a> from GUICC_8888_Index2Color.o(.text.LCD_Index2Color_8888) referenced from GUICC_8888.o(.rodata)
 <LI><a href="#[109]">LCD_Index2Color_M565</a> from GUICC_M565.o(.text.LCD_Index2Color_M565) referenced from GUICC_M565.o(.rodata)
 <LI><a href="#[99]">LCD_Index2Color_M888</a> from GUICC_M888_Index2Color.o(.text.LCD_Index2Color_M888) referenced from GUICC_M888.o(.rodata)
 <LI><a href="#[99]">LCD_Index2Color_M888</a> from GUICC_M888_Index2Color.o(.text.LCD_Index2Color_M888) referenced from GUI__Alpha.o(.text.GUI__DoAlphaBlending)
 <LI><a href="#[9a]">LCD_Index2Color_M8888I</a> from GUICC_M8888I_Index2Color.o(.text.LCD_Index2Color_M8888I) referenced from GUICC_M8888I.o(.rodata)
 <LI><a href="#[9a]">LCD_Index2Color_M8888I</a> from GUICC_M8888I_Index2Color.o(.text.LCD_Index2Color_M8888I) referenced from GUI__Alpha.o(.text.GUI__DoAlphaBlending)
 <LI><a href="#[9a]">LCD_Index2Color_M8888I</a> from GUICC_M8888I_Index2Color.o(.text.LCD_Index2Color_M8888I) referenced from GUIDEV_WriteToActiveAlpha.o(.text._WriteToActiveAlpha)
 <LI><a href="#[ba]">LCD_LL_CopyBuffer</a> from stemwin_wrapper.o(i.LCD_LL_CopyBuffer) referenced from stemwin_wrapper.o(i.LCD_X_Config)
 <LI><a href="#[bb]">LCD_LL_CopyRect</a> from stemwin_wrapper.o(i.LCD_LL_CopyRect) referenced from stemwin_wrapper.o(i.LCD_X_Config)
 <LI><a href="#[bd]">LCD_LL_DrawBitmap16bpp</a> from stemwin_wrapper.o(i.LCD_LL_DrawBitmap16bpp) referenced from stemwin_wrapper.o(i.LCD_X_Config)
 <LI><a href="#[be]">LCD_LL_DrawBitmap32bpp</a> from stemwin_wrapper.o(i.LCD_LL_DrawBitmap32bpp) referenced from stemwin_wrapper.o(i.LCD_X_Config)
 <LI><a href="#[bc]">LCD_LL_DrawBitmap8bpp</a> from stemwin_wrapper.o(i.LCD_LL_DrawBitmap8bpp) referenced from stemwin_wrapper.o(i.LCD_X_Config)
 <LI><a href="#[b9]">LCD_LL_FillRect</a> from stemwin_wrapper.o(i.LCD_LL_FillRect) referenced from stemwin_wrapper.o(i.LCD_LL_FillRect)
 <LI><a href="#[b9]">LCD_LL_FillRect</a> from stemwin_wrapper.o(i.LCD_LL_FillRect) referenced from stemwin_wrapper.o(i.LCD_X_Config)
 <LI><a href="#[86]">LPTIM1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[82]">LTDC_ER_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[81]">LTDC_IRQHandler</a> from stm32f7xx_it.o(i.LTDC_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[23]">MemManage_Handler</a> from stm32f7xx_it.o(i.MemManage_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[21]">NMI_Handler</a> from stm32f7xx_it.o(i.NMI_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6d]">OTG_FS_IRQHandler</a> from stm32f7xx_it.o(i.OTG_FS_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[54]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[75]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[74]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[77]">OTG_HS_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[76]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2b]">PVD_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[28]">PendSV_Handler</a> from stm32f7xx_it.o(i.PendSV_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[85]">QUADSPI_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2f]">RCC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[79]">RNG_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[53]">RTC_Alarm_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2d]">RTC_WKUP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[20]">Reset_Handler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[80]">SAI1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[84]">SAI2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5b]">SDMMC1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[cc]">SD_initialize</a> from sd_diskio.o(i.SD_initialize) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[d0]">SD_ioctl</a> from sd_diskio.o(i.SD_ioctl) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[ce]">SD_read</a> from sd_diskio.o(i.SD_read) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[cd]">SD_status</a> from sd_diskio.o(i.SD_status) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[cf]">SD_write</a> from sd_diskio.o(i.SD_write) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[8a]">SPDIF_RX_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4d]">SPI1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4e]">SPI2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5d]">SPI3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[7d]">SPI4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[7e]">SPI5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[7f]">SPI6_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[26]">SVC_Handler</a> from stm32f7xx_it.o(i.SVC_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[29]">SysTick_Handler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[8c]">SystemInit</a> from system_stm32f7xx.o(i.SystemInit) referenced from startup_stm32f746xx.o(.text)
 <LI><a href="#[2c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[9c]">TEXT_Callback</a> from TEXT.o(.text.TEXT_Callback) referenced from TEXT.o(.text.TEXT_CreateIndirect)
 <LI><a href="#[d4]">TEXT_CreateIndirect</a> from TEXT.o(.text.TEXT_CreateIndirect) referenced from framewindlg.o(.constdata)
 <LI><a href="#[42]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[45]">TIM1_CC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[44]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[43]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[46]">TIM2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[47]">TIM3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[48]">TIM4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5c]">TIM5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[60]">TIM6_DAC_IRQHandler</a> from stm32f7xx_it.o(i.TIM6_DAC_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[61]">TIM7_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[55]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[58]">TIM8_CC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[57]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[56]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[b8]">TransferComplete</a> from stemwin_wrapper.o(i.TransferComplete) referenced from stemwin_wrapper.o(i.DMA2D_Init)
 <LI><a href="#[5e]">UART4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5f]">UART5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[7b]">UART7_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[7c]">UART8_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4f]">USART1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[50]">USART2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[51]">USART3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[71]">USART6_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[25]">UsageFault_Handler</a> from stm32f7xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[95]">WM_HandlePID</a> from WM_Touch.o(.text.WM_HandlePID) referenced from GUI_PID.o(.text.GUI_PID_StoreState)
 <LI><a href="#[a2]">WM__Paint1</a> from WM.o(.text.WM__Paint1) referenced from WM.o(.text.WM__PaintWinAndOverlays)
 <LI><a href="#[a2]">WM__Paint1</a> from WM.o(.text.WM__Paint1) referenced from WM.o(.text._Paint1Trans)
 <LI><a href="#[2a]">WWDG_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[130]">_CalcSizeOfChar</a> from GUI_UC_EncodeNone.o(.text._CalcSizeOfChar) referenced from GUI_UC_EncodeNone.o(.rodata)
 <LI><a href="#[fc]">_Color2IndexBulk</a> from GUICC_565.o(.text._Color2IndexBulk) referenced 6 times from GUICC_565.o(.rodata)
 <LI><a href="#[d8]">_Color2IndexBulk_1616I</a> from GUICC_1616I.o(.text._Color2IndexBulk_1616I) referenced from GUICC_1616I.o(.rodata)
 <LI><a href="#[e9]">_Color2IndexBulk_88666I</a> from GUICC_88666I.o(.text._Color2IndexBulk_88666I) referenced from GUICC_88666I.o(.rodata)
 <LI><a href="#[ee]">_Color2IndexBulk_M1555I</a> from GUICC_M1555I.o(.text._Color2IndexBulk_M1555I) referenced from GUICC_M1555I.o(.rodata)
 <LI><a href="#[c0]">_Color2IndexBulk_M1555I_DMA2D</a> from stemwin_wrapper.o(i._Color2IndexBulk_M1555I_DMA2D) referenced from stemwin_wrapper.o(i.LCD_X_Config)
 <LI><a href="#[f3]">_Color2IndexBulk_M4444I</a> from GUICC_M4444I.o(.text._Color2IndexBulk_M4444I) referenced from GUICC_M4444I.o(.rodata)
 <LI><a href="#[c4]">_Color2IndexBulk_M4444I_DMA2D</a> from stemwin_wrapper.o(i._Color2IndexBulk_M4444I_DMA2D) referenced from stemwin_wrapper.o(i.LCD_X_Config)
 <LI><a href="#[c2]">_Color2IndexBulk_M565_DMA2D</a> from stemwin_wrapper.o(i._Color2IndexBulk_M565_DMA2D) referenced from stemwin_wrapper.o(i.LCD_X_Config)
 <LI><a href="#[f7]">_Color2IndexBulk_M8888I</a> from GUICC_M8888I.o(.text._Color2IndexBulk_M8888I) referenced from GUICC_M8888I.o(.rodata)
 <LI><a href="#[c8]">_Color2IndexBulk_M8888I_DMA2D</a> from stemwin_wrapper.o(i._Color2IndexBulk_M8888I_DMA2D) referenced from stemwin_wrapper.o(i.LCD_X_Config)
 <LI><a href="#[c6]">_Color2IndexBulk_M888_DMA2D</a> from stemwin_wrapper.o(i._Color2IndexBulk_M888_DMA2D) referenced from stemwin_wrapper.o(i.LCD_X_Config)
 <LI><a href="#[142]">_Color2Index_0</a> from GUICC_0.o(.text._Color2Index_0) referenced from GUICC_0.o(.rodata)
 <LI><a href="#[12b]">_Color2Index_16</a> from GUICC_16.o(.text._Color2Index_16) referenced from GUICC_16.o(.rodata)
 <LI><a href="#[d5]">_Color2Index_1616I</a> from GUICC_1616I.o(.text._Color2Index_1616I) referenced from GUICC_1616I.o(.rodata)
 <LI><a href="#[f9]">_Color2Index_565</a> from GUICC_565.o(.text._Color2Index_565) referenced from GUICC_565.o(.rodata)
 <LI><a href="#[da]">_Color2Index_822216</a> from GUICC_822216.o(.text._Color2Index_822216) referenced from GUICC_822216.o(.rodata)
 <LI><a href="#[dd]">_Color2Index_84444</a> from GUICC_84444.o(.text._Color2Index_84444) referenced from GUICC_84444.o(.rodata)
 <LI><a href="#[e3]">_Color2Index_8666_1</a> from GUICC_8666_1.o(.text._Color2Index_8666_1) referenced from GUICC_8666_1.o(.rodata)
 <LI><a href="#[e6]">_Color2Index_88666I</a> from GUICC_88666I.o(.text._Color2Index_88666I) referenced from GUICC_88666I.o(.rodata)
 <LI><a href="#[fe]">_Color2Index_888</a> from GUICC_888.o(.text._Color2Index_888) referenced from GUICC_888.o(.rodata)
 <LI><a href="#[103]">_Color2Index_8888</a> from GUICC_8888.o(.text._Color2Index_8888) referenced from GUICC_8888.o(.rodata)
 <LI><a href="#[eb]">_Color2Index_M1555I</a> from GUICC_M1555I.o(.text._Color2Index_M1555I) referenced from GUICC_M1555I.o(.rodata)
 <LI><a href="#[f0]">_Color2Index_M4444I</a> from GUICC_M4444I.o(.text._Color2Index_M4444I) referenced from GUICC_M4444I.o(.rodata)
 <LI><a href="#[108]">_Color2Index_M565</a> from GUICC_M565.o(.text._Color2Index_M565) referenced from GUICC_M565.o(.rodata)
 <LI><a href="#[10d]">_Color2Index_M888</a> from GUICC_M888.o(.text._Color2Index_M888) referenced from GUICC_M888.o(.rodata)
 <LI><a href="#[111]">_Color2Index_M8888</a> from GUICC_M8888.o(.text._Color2Index_M8888) referenced from GUICC_M8888.o(.rodata)
 <LI><a href="#[f5]">_Color2Index_M8888I</a> from GUICC_M8888I.o(.text._Color2Index_M8888I) referenced from GUICC_M8888I.o(.rodata)
 <LI><a href="#[ab]">_CopyBuffer</a> from GUIDRV_Lin_16.o(.text._CopyBuffer) referenced from GUIDRV_Lin_16.o(.text._GetDevFunc)
 <LI><a href="#[19]">_Create</a> from BUTTON_Skin.o(.text._Create) referenced 4 times from BUTTON_Skin.o(.data)
 <LI><a href="#[11b]">_DrawBitmap</a> from GUIDRV_Lin_16.o(.text._DrawBitmap) referenced 3 times from GUIDRV_Lin_16.o(.rodata)
 <LI><a href="#[158]">_DrawDown</a> from WIDGET_Effect_Simple.o(.text._DrawDown) referenced from WIDGET_Effect_Simple.o(.rodata)
 <LI><a href="#[159]">_DrawDownRect</a> from WIDGET_Effect_Simple.o(.text._DrawDownRect) referenced from WIDGET_Effect_Simple.o(.rodata)
 <LI><a href="#[11c]">_DrawHLine</a> from GUIDRV_Lin_16.o(.text._DrawHLine) referenced 3 times from GUIDRV_Lin_16.o(.rodata)
 <LI><a href="#[156]">_DrawUp</a> from WIDGET_Effect_Simple.o(.text._DrawUp) referenced from WIDGET_Effect_Simple.o(.rodata)
 <LI><a href="#[157]">_DrawUpRect</a> from WIDGET_Effect_Simple.o(.text._DrawUpRect) referenced from WIDGET_Effect_Simple.o(.rodata)
 <LI><a href="#[11d]">_DrawVLine</a> from GUIDRV_Lin_16.o(.text._DrawVLine) referenced 3 times from GUIDRV_Lin_16.o(.rodata)
 <LI><a href="#[131]">_Encode</a> from GUI_UC_EncodeNone.o(.text._Encode) referenced from GUI_UC_EncodeNone.o(.rodata)
 <LI><a href="#[11e]">_FillRect</a> from GUIDRV_Lin_16.o(.text._FillRect) referenced 3 times from GUIDRV_Lin_16.o(.rodata)
 <LI><a href="#[154]">_GUI_USAGE_BM_Delete</a> from GUIDEV_UsageBM.o(.text._GUI_USAGE_BM_Delete) referenced from GUIDEV_UsageBM.o(.rodata)
 <LI><a href="#[1c]">_GetBorderSize</a> from FRAMEWIN_Skin.o(.text._GetBorderSize) referenced 2 times from FRAMEWIN_Skin.o(.data)
 <LI><a href="#[12e]">_GetCharCode</a> from GUI_UC_EncodeNone.o(.text._GetCharCode) referenced from GUI_UC_EncodeNone.o(.rodata)
 <LI><a href="#[12f]">_GetCharSize</a> from GUI_UC_EncodeNone.o(.text._GetCharSize) referenced from GUI_UC_EncodeNone.o(.rodata)
 <LI><a href="#[1e]">_GetCharWrap</a> from GUI__Wrap.o(.text._GetCharWrap) referenced 2 times from GUI__Wrap.o(.data)
 <LI><a href="#[15]">_GetCursorCharacter</a> from GUI__GetCursorPos.o(.text._GetCursorCharacter) referenced 2 times from GUI__GetCursorPos.o(.data)
 <LI><a href="#[14]">_GetCursorPosChar</a> from GUI__GetCursorPos.o(.text._GetCursorPosChar) referenced 2 times from GUI__GetCursorPos.o(.data)
 <LI><a href="#[13]">_GetCursorPosX</a> from GUI__GetCursorPos.o(.text._GetCursorPosX) referenced 2 times from GUI__GetCursorPos.o(.data)
 <LI><a href="#[125]">_GetDevData</a> from GUIDRV_Lin_16.o(.text._GetDevData) referenced 3 times from GUIDRV_Lin_16.o(.rodata)
 <LI><a href="#[123]">_GetDevFunc</a> from GUIDRV_Lin_16.o(.text._GetDevFunc) referenced 3 times from GUIDRV_Lin_16.o(.rodata)
 <LI><a href="#[124]">_GetDevProp</a> from GUIDRV_Lin_16.o(.text._GetDevProp) referenced 3 times from GUIDRV_Lin_16.o(.rodata)
 <LI><a href="#[144]">_GetIndexMask_0</a> from GUICC_0.o(.text._GetIndexMask_0) referenced from GUICC_0.o(.rodata)
 <LI><a href="#[12d]">_GetIndexMask_16</a> from GUICC_16.o(.text._GetIndexMask_16) referenced from GUICC_16.o(.rodata)
 <LI><a href="#[d7]">_GetIndexMask_1616I</a> from GUICC_1616I.o(.text._GetIndexMask_1616I) referenced from GUICC_1616I.o(.rodata)
 <LI><a href="#[fb]">_GetIndexMask_565</a> from GUICC_565.o(.text._GetIndexMask_565) referenced from GUICC_565.o(.rodata)
 <LI><a href="#[dc]">_GetIndexMask_822216</a> from GUICC_822216.o(.text._GetIndexMask_822216) referenced from GUICC_822216.o(.rodata)
 <LI><a href="#[df]">_GetIndexMask_84444</a> from GUICC_84444.o(.text._GetIndexMask_84444) referenced from GUICC_84444.o(.rodata)
 <LI><a href="#[e2]">_GetIndexMask_8666</a> from GUICC_8666.o(.text._GetIndexMask_8666) referenced from GUICC_8666.o(.rodata)
 <LI><a href="#[e5]">_GetIndexMask_8666_1</a> from GUICC_8666_1.o(.text._GetIndexMask_8666_1) referenced from GUICC_8666_1.o(.rodata)
 <LI><a href="#[e8]">_GetIndexMask_88666I</a> from GUICC_88666I.o(.text._GetIndexMask_88666I) referenced from GUICC_88666I.o(.rodata)
 <LI><a href="#[100]">_GetIndexMask_888</a> from GUICC_888.o(.text._GetIndexMask_888) referenced from GUICC_888.o(.rodata)
 <LI><a href="#[105]">_GetIndexMask_8888</a> from GUICC_8888.o(.text._GetIndexMask_8888) referenced from GUICC_8888.o(.rodata)
 <LI><a href="#[ed]">_GetIndexMask_M1555I</a> from GUICC_M1555I.o(.text._GetIndexMask_M1555I) referenced from GUICC_M1555I.o(.rodata)
 <LI><a href="#[f2]">_GetIndexMask_M4444I</a> from GUICC_M4444I.o(.text._GetIndexMask_M4444I) referenced from GUICC_M4444I.o(.rodata)
 <LI><a href="#[10a]">_GetIndexMask_M565</a> from GUICC_M565.o(.text._GetIndexMask_M565) referenced from GUICC_M565.o(.rodata)
 <LI><a href="#[10e]">_GetIndexMask_M888</a> from GUICC_M888.o(.text._GetIndexMask_M888) referenced from GUICC_M888.o(.rodata)
 <LI><a href="#[113]">_GetIndexMask_M8888</a> from GUICC_M8888.o(.text._GetIndexMask_M8888) referenced from GUICC_M8888.o(.rodata)
 <LI><a href="#[f6]">_GetIndexMask_M8888I</a> from GUICC_M8888I.o(.text._GetIndexMask_M8888I) referenced from GUICC_M8888I.o(.rodata)
 <LI><a href="#[11f]">_GetPixelIndex</a> from GUIDRV_Lin_16.o(.text._GetPixelIndex) referenced 3 times from GUIDRV_Lin_16.o(.rodata)
 <LI><a href="#[a5]">_GetPos</a> from GUIDRV_Lin_16.o(.text._GetPos) referenced from GUIDRV_Lin_16.o(.text._GetDevFunc)
 <LI><a href="#[126]">_GetRect</a> from GUIDRV_Lin_16.o(.text._GetRect) referenced 3 times from GUIDRV_Lin_16.o(.rodata)
 <LI><a href="#[1d]">_GetWordWrap</a> from GUI__Wrap.o(.text._GetWordWrap) referenced 2 times from GUI__Wrap.o(.data)
 <LI><a href="#[fd]">_Index2ColorBulk</a> from GUICC_565.o(.text._Index2ColorBulk) referenced 6 times from GUICC_565.o(.rodata)
 <LI><a href="#[d9]">_Index2ColorBulk_1616I</a> from GUICC_1616I.o(.text._Index2ColorBulk_1616I) referenced from GUICC_1616I.o(.rodata)
 <LI><a href="#[ea]">_Index2ColorBulk_88666I</a> from GUICC_88666I.o(.text._Index2ColorBulk_88666I) referenced from GUICC_88666I.o(.rodata)
 <LI><a href="#[ef]">_Index2ColorBulk_M1555I</a> from GUICC_M1555I.o(.text._Index2ColorBulk_M1555I) referenced from GUICC_M1555I.o(.rodata)
 <LI><a href="#[bf]">_Index2ColorBulk_M1555I_DMA2D</a> from stemwin_wrapper.o(i._Index2ColorBulk_M1555I_DMA2D) referenced from stemwin_wrapper.o(i.LCD_X_Config)
 <LI><a href="#[f4]">_Index2ColorBulk_M4444I</a> from GUICC_M4444I.o(.text._Index2ColorBulk_M4444I) referenced from GUICC_M4444I.o(.rodata)
 <LI><a href="#[c3]">_Index2ColorBulk_M4444I_DMA2D</a> from stemwin_wrapper.o(i._Index2ColorBulk_M4444I_DMA2D) referenced from stemwin_wrapper.o(i.LCD_X_Config)
 <LI><a href="#[c1]">_Index2ColorBulk_M565_DMA2D</a> from stemwin_wrapper.o(i._Index2ColorBulk_M565_DMA2D) referenced from stemwin_wrapper.o(i.LCD_X_Config)
 <LI><a href="#[f8]">_Index2ColorBulk_M8888I</a> from GUICC_M8888I.o(.text._Index2ColorBulk_M8888I) referenced from GUICC_M8888I.o(.rodata)
 <LI><a href="#[c7]">_Index2ColorBulk_M8888I_DMA2D</a> from stemwin_wrapper.o(i._Index2ColorBulk_M8888I_DMA2D) referenced from stemwin_wrapper.o(i.LCD_X_Config)
 <LI><a href="#[c5]">_Index2ColorBulk_M888_DMA2D</a> from stemwin_wrapper.o(i._Index2ColorBulk_M888_DMA2D) referenced from stemwin_wrapper.o(i.LCD_X_Config)
 <LI><a href="#[143]">_Index2Color_0</a> from GUICC_0.o(.text._Index2Color_0) referenced from GUICC_0.o(.rodata)
 <LI><a href="#[12c]">_Index2Color_16</a> from GUICC_16.o(.text._Index2Color_16) referenced from GUICC_16.o(.rodata)
 <LI><a href="#[d6]">_Index2Color_1616I</a> from GUICC_1616I.o(.text._Index2Color_1616I) referenced from GUICC_1616I.o(.rodata)
 <LI><a href="#[db]">_Index2Color_822216</a> from GUICC_822216.o(.text._Index2Color_822216) referenced from GUICC_822216.o(.rodata)
 <LI><a href="#[de]">_Index2Color_84444</a> from GUICC_84444.o(.text._Index2Color_84444) referenced from GUICC_84444.o(.rodata)
 <LI><a href="#[e4]">_Index2Color_8666_1</a> from GUICC_8666_1.o(.text._Index2Color_8666_1) referenced from GUICC_8666_1.o(.rodata)
 <LI><a href="#[e7]">_Index2Color_88666I</a> from GUICC_88666I.o(.text._Index2Color_88666I) referenced from GUICC_88666I.o(.rodata)
 <LI><a href="#[ec]">_Index2Color_M1555I</a> from GUICC_M1555I.o(.text._Index2Color_M1555I) referenced from GUICC_M1555I.o(.rodata)
 <LI><a href="#[f1]">_Index2Color_M4444I</a> from GUICC_M4444I.o(.text._Index2Color_M4444I) referenced from GUICC_M4444I.o(.rodata)
 <LI><a href="#[112]">_Index2Color_M8888</a> from GUICC_M8888.o(.text._Index2Color_M8888) referenced from GUICC_M8888.o(.rodata)
 <LI><a href="#[b2]">_Init</a> from GUIDRV_Lin_16.o(.text._Init) referenced from GUIDRV_Lin_16.o(.text._GetDevFunc)
 <LI><a href="#[c9]">_LCD_DrawBitmapAlpha</a> from stemwin_wrapper.o(i._LCD_DrawBitmapAlpha) referenced from stemwin_wrapper.o(i.LCD_X_Config)
 <LI><a href="#[ca]">_LCD_DrawMemdevAlpha</a> from stemwin_wrapper.o(i._LCD_DrawMemdevAlpha) referenced from stemwin_wrapper.o(i.LCD_X_Config)
 <LI><a href="#[12]">_Log2VisBuffered</a> from GUI_CharLine.o(.text._Log2VisBuffered) referenced 2 times from GUI_CharLine.o(.data)
 <LI><a href="#[b0]">_Off</a> from GUIDRV_Lin_16.o(.text._Off) referenced from GUIDRV_Lin_16.o(.text._GetDevFunc)
 <LI><a href="#[b1]">_On</a> from GUIDRV_Lin_16.o(.text._On) referenced from GUIDRV_Lin_16.o(.text._GetDevFunc)
 <LI><a href="#[96]">_OnExit</a> from GUI_PID.o(.text._OnExit) referenced from GUI_PID.o(.text.GUI_PID_StoreState)
 <LI><a href="#[97]">_OnExit</a> from GUI__Alpha.o(.text._OnExit) referenced from GUI__Alpha.o(.text.GUI__AllocAlphaBuffer)
 <LI><a href="#[98]">_OnExit</a> from GUI_Core.o(.text._OnExit) referenced from GUI_Core.o(.text.GUI__Config)
 <LI><a href="#[97]">_OnExit</a> from GUI__Alpha.o(.text._OnExit) referenced from GUI__Alpha.o(.text.GUI__DoAlphaBlending)
 <LI><a href="#[9b]">_OnExit</a> from LCD_Color.o(.text._OnExit) referenced from LCD_Color.o(.text.LCD_InitColors)
 <LI><a href="#[a0]">_OnExit</a> from WM.o(.text._OnExit) referenced from WM.o(.text.WM_Init)
 <LI><a href="#[e]">_OnTouchDefault</a> from BUTTON.o(.text._OnTouchDefault) referenced 2 times from BUTTON.o(.data)
 <LI><a href="#[18]">_Paint</a> from BUTTON_Skin.o(.text._Paint) referenced 4 times from BUTTON_Skin.o(.data)
 <LI><a href="#[a8]">_ReadRect</a> from GUIDRV_Lin_16.o(.text._ReadRect) referenced from GUIDRV_Lin_16.o(.text._GetDevFunc)
 <LI><a href="#[a7]">_SetAlpha</a> from GUIDRV_Lin_16.o(.text._SetAlpha) referenced from GUIDRV_Lin_16.o(.text._GetDevFunc)
 <LI><a href="#[af]">_SetAlphaMode</a> from GUIDRV_Lin_16.o(.text._SetAlphaMode) referenced from GUIDRV_Lin_16.o(.text._GetDevFunc)
 <LI><a href="#[119]">_SetBkColor</a> from LCD.o(.text._SetBkColor) referenced from LCD.o(.rodata)
 <LI><a href="#[ad]">_SetChroma</a> from GUIDRV_Lin_16.o(.text._SetChroma) referenced from GUIDRV_Lin_16.o(.text._GetDevFunc)
 <LI><a href="#[ae]">_SetChromaMode</a> from GUIDRV_Lin_16.o(.text._SetChromaMode) referenced from GUIDRV_Lin_16.o(.text._GetDevFunc)
 <LI><a href="#[118]">_SetColor</a> from LCD.o(.text._SetColor) referenced from LCD.o(.rodata)
 <LI><a href="#[ac]">_SetDevFunc</a> from GUIDRV_Lin_16.o(.text._SetDevFunc) referenced from GUIDRV_Lin_16.o(.text._GetDevFunc)
 <LI><a href="#[11a]">_SetDrawMode</a> from LCD.o(.text._SetDrawMode) referenced from LCD.o(.rodata)
 <LI><a href="#[122]">_SetOrg</a> from GUIDRV_Lin_16.o(.text._SetOrg) referenced 3 times from GUIDRV_Lin_16.o(.rodata)
 <LI><a href="#[120]">_SetPixelIndex</a> from GUIDRV_Lin_16.o(.text._SetPixelIndex) referenced 3 times from GUIDRV_Lin_16.o(.rodata)
 <LI><a href="#[a6]">_SetPos</a> from GUIDRV_Lin_16.o(.text._SetPos) referenced from GUIDRV_Lin_16.o(.text._GetDevFunc)
 <LI><a href="#[b3]">_SetSize</a> from GUIDRV_Lin_16.o(.text._SetSize) referenced from GUIDRV_Lin_16.o(.text._GetDevFunc)
 <LI><a href="#[a3]">_SetVRAMAddr</a> from GUIDRV_Lin_16.o(.text._SetVRAMAddr) referenced from GUIDRV_Lin_16.o(.text._GetDevFunc)
 <LI><a href="#[a9]">_SetVRAM_BufferPTR</a> from GUIDRV_Lin_16.o(.text._SetVRAM_BufferPTR) referenced from GUIDRV_Lin_16.o(.text._GetDevFunc)
 <LI><a href="#[b4]">_SetVSize</a> from GUIDRV_Lin_16.o(.text._SetVSize) referenced from GUIDRV_Lin_16.o(.text._GetDevFunc)
 <LI><a href="#[a4]">_SetVis</a> from GUIDRV_Lin_16.o(.text._SetVis) referenced from GUIDRV_Lin_16.o(.text._GetDevFunc)
 <LI><a href="#[aa]">_ShowBuffer</a> from GUIDRV_Lin_16.o(.text._ShowBuffer) referenced from GUIDRV_Lin_16.o(.text._GetDevFunc)
 <LI><a href="#[121]">_XorPixel</a> from GUIDRV_Lin_16.o(.text._XorPixel) referenced 3 times from GUIDRV_Lin_16.o(.rodata)
 <LI><a href="#[8d]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f746xx.o(.text)
 <LI><a href="#[9f]">_cbBackWin</a> from WM.o(.text._cbBackWin) referenced from WM.o(.text.WM_Init)
 <LI><a href="#[b7]">_cbDialog</a> from framewindlg.o(i._cbDialog) referenced from framewindlg.o(i.CreateFramewin)
 <LI><a href="#[9d]">_cbInvalidateOne</a> from WM_BringToTop.o(.text._cbInvalidateOne) referenced from WM_BringToTop.o(.text.WM_BringToTop)
 <LI><a href="#[9e]">_cbPaintMemDev</a> from WM.o(.text._cbPaintMemDev) referenced from WM.o(.text.WM_Exec)
 <LI><a href="#[8f]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[8e]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[cb]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[1]">ft5336_Init</a> from ft5336.o(i.ft5336_Init) referenced 2 times from ft5336.o(.data)
 <LI><a href="#[2]">ft5336_ReadID</a> from ft5336.o(i.ft5336_ReadID) referenced 2 times from ft5336.o(.data)
 <LI><a href="#[3]">ft5336_Reset</a> from ft5336.o(i.ft5336_Reset) referenced 2 times from ft5336.o(.data)
 <LI><a href="#[8]">ft5336_TS_ClearIT</a> from ft5336.o(i.ft5336_TS_ClearIT) referenced 2 times from ft5336.o(.data)
 <LI><a href="#[5]">ft5336_TS_DetectTouch</a> from ft5336.o(i.ft5336_TS_DetectTouch) referenced 2 times from ft5336.o(.data)
 <LI><a href="#[a]">ft5336_TS_DisableIT</a> from ft5336.o(i.ft5336_TS_DisableIT) referenced 2 times from ft5336.o(.data)
 <LI><a href="#[7]">ft5336_TS_EnableIT</a> from ft5336.o(i.ft5336_TS_EnableIT) referenced 2 times from ft5336.o(.data)
 <LI><a href="#[6]">ft5336_TS_GetXY</a> from ft5336.o(i.ft5336_TS_GetXY) referenced 2 times from ft5336.o(.data)
 <LI><a href="#[9]">ft5336_TS_ITStatus</a> from ft5336.o(i.ft5336_TS_ITStatus) referenced 2 times from ft5336.o(.data)
 <LI><a href="#[4]">ft5336_TS_Start</a> from ft5336.o(i.ft5336_TS_Start) referenced 2 times from ft5336.o(.data)
 <LI><a href="#[90]">isspace</a> from isspace_c.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[8b]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[16]">memcpy</a> from memmove.o(.text) referenced 2 times from GUI__Private.o(.data)
 <LI><a href="#[17]">memset</a> from memseta.o(.text) referenced 2 times from GUI__Private.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[8d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(.text)
</UL>
<P><STRONG><a name="[411]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[15a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[170]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[412]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[413]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[414]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[415]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[416]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[417]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[20]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[15c]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[418]"></a>____aeabi_memcpy8$ret$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[419]"></a>___aeabi_memmove$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[41a]"></a>___aeabi_memmove4$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[41b]"></a>___aeabi_memmove8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[41c]"></a>__aeabi_memcpy</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[319]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
</UL>

<P><STRONG><a name="[16]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RestoreContext
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SaveContext_W
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI__Private.o(.data)
</UL>
<P><STRONG><a name="[1a3]"></a>memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHoles
</UL>

<P><STRONG><a name="[160]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[41d]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[41e]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[15f]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
</UL>

<P><STRONG><a name="[2f8]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPDIFRX_MspInit
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_MspInit
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_MspInit
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FMC_Init
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FMC_MspInit
</UL>

<P><STRONG><a name="[41f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[17]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_AddHLine
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Clear
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI__Private.o(.data)
</UL>
<P><STRONG><a name="[400]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operater_check
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catenate
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_result
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
</UL>

<P><STRONG><a name="[40b]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_result
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust
</UL>

<P><STRONG><a name="[19e]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_CreateIndirect
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;point
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operater_check
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_result
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetText.part.5
</UL>

<P><STRONG><a name="[3ff]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
</UL>

<P><STRONG><a name="[1a5]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_CreateIndirect
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catenate
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_result
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__SetText
</UL>

<P><STRONG><a name="[161]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[165]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate
</UL>

<P><STRONG><a name="[166]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust
</UL>

<P><STRONG><a name="[167]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[168]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[169]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust
</UL>

<P><STRONG><a name="[16a]"></a>__aeabi_l2d</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, dfltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_l2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust
</UL>

<P><STRONG><a name="[16b]"></a>__aeabi_d2lz</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dfixl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2lz
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust
</UL>

<P><STRONG><a name="[409]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust
</UL>

<P><STRONG><a name="[420]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[3fa]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[421]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[406]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[15e]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[422]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[423]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[424]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>__strtod_int</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtod
</UL>

<P><STRONG><a name="[425]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[163]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>

<P><STRONG><a name="[3fb]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[426]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[16f]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[15b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[427]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>isspace</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, isspace_c.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ctype_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[16d]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[174]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[8e]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[8f]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[177]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[171]"></a>__ctype_lookup</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ctype_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[173]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[176]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[428]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[429]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[42a]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[42b]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>BUTTON_Callback</STRONG> (Thumb, 368 bytes, Stack size unknown bytes, BUTTON.o(.text.BUTTON_Callback))
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_OrState
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_AndState
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_StoreKey
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreePtrArray
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreePtr
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> BUTTON.o(.text.BUTTON_CreateIndirect)
</UL>
<P><STRONG><a name="[d2]"></a>BUTTON_CreateIndirect</STRONG> (Thumb, 212 bytes, Stack size unknown bytes, BUTTON.o(.text.BUTTON_CreateIndirect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = BUTTON_CreateIndirect &rArr; GUI__SetText &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _RemoveHoles &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__SetText
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> framewindlg.o(.constdata)
</UL>
<P><STRONG><a name="[f]"></a>BUTTON_DrawSkinFlex</STRONG> (Thumb, 612 bytes, Stack size unknown bytes, BUTTON_SkinFlex.o(.text.BUTTON_DrawSkinFlex))
<BR><BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsEnabled
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetClientRect
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawTwinArc4
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DRAW__Draw
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientV
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRect
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetHasTrans
</UL>
<BR>[Address Reference Count : 1]<UL><LI> BUTTON.o(.data)
</UL>
<P><STRONG><a name="[195]"></a>BUTTON_SetText</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, BUTTON.o(.text.BUTTON_SetText))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = BUTTON_SetText &rArr; GUI__SetText &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _RemoveHoles &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__SetText
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
</UL>

<P><STRONG><a name="[92]"></a>EDIT_Callback</STRONG> (Thumb, 1964 bytes, Stack size unknown bytes, EDIT.o(.text.EDIT_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = EDIT_Callback &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memmove
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_GetCharSize
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_Encode
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__CalcSizeOfChar
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_GetCharCode
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetCursorPosChar
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetStringDistX
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeX
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_RestartTimer
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetNumChars
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsEnabled
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__NumChars2NumBytes
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Realloc
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreePtr
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> EDIT.o(.text.EDIT_CreateIndirect)
</UL>
<P><STRONG><a name="[d3]"></a>EDIT_CreateIndirect</STRONG> (Thumb, 332 bytes, Stack size unknown bytes, EDIT.o(.text.EDIT_CreateIndirect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = EDIT_CreateIndirect &rArr; WM_CreateWindowAsChild &rArr; GUI_ALLOC_AllocZero &rArr; _Alloc &rArr; _RemoveHoles &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Realloc
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> framewindlg.o(.constdata)
</UL>
<P><STRONG><a name="[1a7]"></a>EDIT_SetFont</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, EDIT.o(.text.EDIT_SetFont))
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
</UL>

<P><STRONG><a name="[3fe]"></a>EDIT_SetText</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, EDIT.o(.text.EDIT_SetText))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
</UL>

<P><STRONG><a name="[1a9]"></a>EDIT_SetTextAlign</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, EDIT.o(.text.EDIT_SetTextAlign))
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
</UL>

<P><STRONG><a name="[1aa]"></a>EDIT_SetTextColor</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, EDIT.o(.text.EDIT_SetTextColor))
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
</UL>

<P><STRONG><a name="[93]"></a>FRAMEWIN_Callback</STRONG> (Thumb, 818 bytes, Stack size unknown bytes, FRAMEWIN.o(.text.FRAMEWIN_Callback))
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnNextChild
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_OrState
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsWindow
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HasFocus
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreePtr
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCaptureMove
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToTop
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsAncestor
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsAncestorOrSelf
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__CalcPositions
</UL>
<BR>[Address Reference Count : 1]<UL><LI> FRAMEWIN.o(.text.FRAMEWIN_CreateIndirect)
</UL>
<P><STRONG><a name="[d1]"></a>FRAMEWIN_CreateIndirect</STRONG> (Thumb, 328 bytes, Stack size unknown bytes, FRAMEWIN.o(.text.FRAMEWIN_CreateIndirect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = FRAMEWIN_CreateIndirect &rArr; GUI__SetText &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _RemoveHoles &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__SetText
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DisableMemdev
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__CalcPositions
</UL>
<BR>[Address Reference Count : 1]<UL><LI> framewindlg.o(.constdata)
</UL>
<P><STRONG><a name="[11]"></a>FRAMEWIN_DrawSkinFlex</STRONG> (Thumb, 952 bytes, Stack size unknown bytes, FRAMEWIN_SkinFlex.o(.text.FRAMEWIN_DrawSkinFlex))
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPixel
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRectEx
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawTwinArc2
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientV
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRect
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetHasTrans
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_GetActive
</UL>
<BR>[Address Reference Count : 2]<UL><LI> FRAMEWIN.o(.data)
<LI> FRAMEWIN_Skin.o(.data)
</UL>
<P><STRONG><a name="[1b6]"></a>FRAMEWIN_GetActive</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, FRAMEWIN.o(.text.FRAMEWIN_GetActive))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_DrawSkinFlex
</UL>

<P><STRONG><a name="[1b0]"></a>FRAMEWIN__CalcPositions</STRONG> (Thumb, 276 bytes, Stack size unknown bytes, FRAMEWIN.o(.text.FRAMEWIN__CalcPositions))
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetYSizeOfFont
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeY
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetWindowSizeY
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetWindowSizeX
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__GetTitleLimits
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_CreateIndirect
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_Callback
</UL>

<P><STRONG><a name="[1bf]"></a>FRAMEWIN__CalcTitleHeight</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, FRAMEWIN.o(.text.FRAMEWIN__CalcTitleHeight))
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetYSizeOfFont
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[10]"></a>FRAMEWIN__GetBorderSize</STRONG> (Thumb, 74 bytes, Stack size unknown bytes, FRAMEWIN.o(.text.FRAMEWIN__GetBorderSize))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> FRAMEWIN.o(.data)
</UL>
<P><STRONG><a name="[1bd]"></a>FRAMEWIN__GetTitleLimits</STRONG> (Thumb, 156 bytes, Stack size unknown bytes, FRAMEWIN.o(.text.FRAMEWIN__GetTitleLimits))
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetNextSibling
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__CalcPositions
</UL>

<P><STRONG><a name="[1c6]"></a>GL_SetDefault</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, GUI_Common.o(.text.GL_SetDefault))
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
</UL>

<P><STRONG><a name="[3a6]"></a>GUICC_M1555I_SetCustColorConv</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, GUICC_M1555I.o(.text.GUICC_M1555I_SetCustColorConv))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[3a8]"></a>GUICC_M4444I_SetCustColorConv</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, GUICC_M4444I.o(.text.GUICC_M4444I_SetCustColorConv))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[3a7]"></a>GUICC_M565_SetCustColorConv</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, GUICC_M565.o(.text.GUICC_M565_SetCustColorConv))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[3aa]"></a>GUICC_M8888I_SetCustColorConv</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, GUICC_M8888I.o(.text.GUICC_M8888I_SetCustColorConv))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[3a9]"></a>GUICC_M888_SetCustColorConv</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, GUICC_M888.o(.text.GUICC_M888_SetCustColorConv))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[127]"></a>GUIMONO_DispChar</STRONG> (Thumb, 380 bytes, Stack size unknown bytes, GUI_CharM.o(.text.GUIMONO_DispChar))
<BR><BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
</UL>
<BR>[Address Reference Count : 2]<UL><LI> F8x16.o(.rodata)
<LI> F6x8.o(.rodata)
</UL>
<P><STRONG><a name="[128]"></a>GUIMONO_GetCharDistX</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, GUI_CharM.o(.text.GUIMONO_GetCharDistX))
<BR>[Address Reference Count : 2]<UL><LI> F8x16.o(.rodata)
<LI> F6x8.o(.rodata)
</UL>
<P><STRONG><a name="[129]"></a>GUIMONO_GetFontInfo</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, GUI_CharM.o(.text.GUIMONO_GetFontInfo))
<BR>[Address Reference Count : 2]<UL><LI> F8x16.o(.rodata)
<LI> F6x8.o(.rodata)
</UL>
<P><STRONG><a name="[12a]"></a>GUIMONO_IsInFont</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, GUI_CharM.o(.text.GUIMONO_IsInFont))
<BR>[Address Reference Count : 2]<UL><LI> F8x16.o(.rodata)
<LI> F6x8.o(.rodata)
</UL>
<P><STRONG><a name="[132]"></a>GUIPROP_DispChar</STRONG> (Thumb, 244 bytes, Stack size unknown bytes, GUI_CharP.o(.text.GUIPROP_DispChar))
<BR><BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
</UL>
<BR>[Address Reference Count : 2]<UL><LI> F13_ASCII.o(.rodata)
<LI> F13_1.o(.rodata)
</UL>
<P><STRONG><a name="[133]"></a>GUIPROP_GetCharDistX</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, GUI_CharP.o(.text.GUIPROP_GetCharDistX))
<BR>[Address Reference Count : 2]<UL><LI> F13_ASCII.o(.rodata)
<LI> F13_1.o(.rodata)
</UL>
<P><STRONG><a name="[134]"></a>GUIPROP_GetFontInfo</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, GUI_CharP.o(.text.GUIPROP_GetFontInfo))
<BR>[Address Reference Count : 2]<UL><LI> F13_ASCII.o(.rodata)
<LI> F13_1.o(.rodata)
</UL>
<P><STRONG><a name="[135]"></a>GUIPROP_IsInFont</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, GUI_CharP.o(.text.GUIPROP_IsInFont))
<BR>[Address Reference Count : 2]<UL><LI> F13_ASCII.o(.rodata)
<LI> F13_1.o(.rodata)
</UL>
<P><STRONG><a name="[1cd]"></a>GUI_ALLOC_AllocNoInit</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, GUI_Alloc.o(.text.GUI_ALLOC_AllocNoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _RemoveHoles &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateBuffer.isra.4
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__SetText
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[1cf]"></a>GUI_ALLOC_AllocZero</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, GUI_Alloc.o(.text.GUI_ALLOC_AllocZero))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GUI_ALLOC_AllocZero &rArr; _Alloc &rArr; _RemoveHoles &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_CreateIndirect
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Create
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>

<P><STRONG><a name="[2f4]"></a>GUI_ALLOC_AssignMemory</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, GUI_Alloc.o(.text.GUI_ALLOC_AssignMemory))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Config
</UL>

<P><STRONG><a name="[1d0]"></a>GUI_ALLOC_Free</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, GUI_Alloc.o(.text.GUI_ALLOC_Free))
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReleaseBuffer.isra.7
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GUI_USAGE_BM_Delete
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow.part.3
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[1ea]"></a>GUI_ALLOC_FreeFixedBlock</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, GUI_Alloc.o(.text.GUI_ALLOC_FreeFixedBlock))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnExit
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Delete
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnExit
</UL>

<P><STRONG><a name="[17e]"></a>GUI_ALLOC_FreePtr</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, GUI_Alloc.o(.text.GUI_ALLOC_FreePtr))
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetText.part.5
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__SetText
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Callback
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_Callback
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_Callback
</UL>

<P><STRONG><a name="[17f]"></a>GUI_ALLOC_FreePtrArray</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, GUI_Alloc.o(.text.GUI_ALLOC_FreePtrArray))
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Callback
</UL>

<P><STRONG><a name="[1d2]"></a>GUI_ALLOC_GetFixedBlock</STRONG> (Thumb, 568 bytes, Stack size unknown bytes, GUI_Alloc.o(.text.GUI_ALLOC_GetFixedBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GUI_ALLOC_GetFixedBlock &rArr; _RemoveHoles &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHoles
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_CreateAndLink
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVSize
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetSize
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetDevFunc
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyBuffer
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowBuffer
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVRAM_BufferPTR
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetAlpha
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPos
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPos
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVis
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVRAMAddr
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitColors
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__AllocAlphaBuffer
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DoAlphaBlending
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Create
</UL>

<P><STRONG><a name="[1d5]"></a>GUI_ALLOC_GetMaxSize</STRONG> (Thumb, 308 bytes, Stack size unknown bytes, GUI_Alloc.o(.text.GUI_ALLOC_GetMaxSize))
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateBuffer.isra.4
</UL>

<P><STRONG><a name="[267]"></a>GUI_ALLOC_GetSize</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, GUI_Alloc.o(.text.GUI_ALLOC_GetSize))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__SetText
</UL>

<P><STRONG><a name="[17b]"></a>GUI_ALLOC_LockH</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, GUI_Alloc.o(.text.GUI_ALLOC_LockH))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveAlpha
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateBuffer.isra.4
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWin
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAlpha
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPixelIndex
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetRect
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Link
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SPRITE_SetPosition
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetTextColor
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetText
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetFont
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_CreateIndirect
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_CreateIndirect
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetTextColor
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetTextAlign
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetFont
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_CreateIndirect
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetText
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_CreateIndirect
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeX
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_RestartTimer
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetText.part.5
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__SetText
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Callback
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_OrState
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_AndState
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouchDefault
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ValidateWindow
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ShowWindow
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveWindow
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__UpdateChildPositions
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GetDialogItem
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow.part.11
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateParent
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectEx
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InsertWindowIntoList
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Exec1Input
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow.part.3
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect.part.2
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbPaintMemDev
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1.constprop.11
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0.constprop.10
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1Trans
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetBorderSize
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DRAW__Draw
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Screen2hWin
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendTouchMessage
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Restart
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_SetPeriod
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetNextTimerLin
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_GetFlag
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetFirstTimer
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetFocusedChild
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Write
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Clear
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_ReduceYSize
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYSize
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPixelIndex
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetRect
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Create
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAt
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt.part.0
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetHasTrans
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_Callback
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_DrawSkinFlex
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_GetActive
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToTop
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_Callback
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeY
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__CalcPositions
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__GetTitleLimits
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__GetBorderSize
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__cbClient
</UL>

<P><STRONG><a name="[1a2]"></a>GUI_ALLOC_Realloc</STRONG> (Thumb, 224 bytes, Stack size unknown bytes, GUI_Alloc.o(.text.GUI_ALLOC_Realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GUI_ALLOC_Realloc &rArr; _Alloc &rArr; _RemoveHoles &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_CreateIndirect
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetText.part.5
</UL>

<P><STRONG><a name="[1d6]"></a>GUI_ALLOC_RequestSize</STRONG> (Thumb, 352 bytes, Stack size unknown bytes, GUI_Alloc.o(.text.GUI_ALLOC_RequestSize))
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>

<P><STRONG><a name="[17c]"></a>GUI_ALLOC_UnlockH</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, GUI_Alloc.o(.text.GUI_ALLOC_UnlockH))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveAlpha
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReleaseBuffer.isra.7
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWin
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAlpha
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPixelIndex
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetRect
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Link
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SPRITE_SetPosition
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetTextColor
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetText
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetFont
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_CreateIndirect
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_CreateIndirect
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetTextColor
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetTextAlign
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetFont
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_CreateIndirect
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetText
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_CreateIndirect
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeX
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_RestartTimer
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetText.part.5
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__SetText
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Callback
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_OrState
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_AndState
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouchDefault
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ValidateWindow
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ShowWindow
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveWindow
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__UpdateChildPositions
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GetDialogItem
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow.part.11
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateParent
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectEx
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InsertWindowIntoList
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Exec1Input
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow.part.3
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect.part.2
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbPaintMemDev
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1.constprop.11
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0.constprop.10
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1Trans
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetBorderSize
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DRAW__Draw
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Screen2hWin
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendTouchMessage
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Restart
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_SetPeriod
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetNextTimerLin
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_GetFlag
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetFirstTimer
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetFocusedChild
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Write
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Clear
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_ReduceYSize
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYSize
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPixelIndex
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetRect
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Create
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAt
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt.part.0
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetHasTrans
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_Callback
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_DrawSkinFlex
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_GetActive
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToTop
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_Callback
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeY
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__CalcPositions
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__GetTitleLimits
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__GetBorderSize
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__cbClient
</UL>

<P><STRONG><a name="[1e6]"></a>GUI_ALLOC_h2p</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, GUI_Alloc.o(.text.GUI_ALLOC_h2p))
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWin
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDialogBox
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnNextChild
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessageNoPara
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsFocusable
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsEnabled
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRectEx
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowOrgX
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetNextSibling
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetPrevSibling
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ForEachDesc
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GetDialogItem
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDialogItem
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDialogItem.part.5
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescs.part.14
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetTopLevelLayer
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateParent
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsWindow
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__RemoveWindowFromList
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InsertWindowIntoList
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow.part.3
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1.constprop.11
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0.constprop.10
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1Trans
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Screen2hWin
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessageIfEnabled
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetLastSibling
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetHasTrans
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DisableMemdev
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsAncestor
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsAncestorOrSelf
</UL>

<P><STRONG><a name="[1d7]"></a>GUI_CURSOR_SetPositionEx</STRONG> (Thumb, 124 bytes, Stack size unknown bytes, GUI_Cursor.o(.text.GUI_CURSOR_SetPositionEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GUI_CURSOR_SetPositionEx &rArr; GUI_SPRITE_SetPosition &rArr; _CreateBuffer.isra.4 &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _RemoveHoles &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SPRITE_SetPosition
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetLayerPosEx
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCursorLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[2c2]"></a>GUI_CalcColorDist</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, GUI_Common.o(.text.GUI_CalcColorDist))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Color2Index_0
</UL>

<P><STRONG><a name="[1c4]"></a>GUI_Clear</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, GUI_Core.o(.text.GUI_Clear))
<BR><BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBackWin
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_Callback
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__cbClient
</UL>

<P><STRONG><a name="[1de]"></a>GUI_ClearRect</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, GUI_Core.o(.text.GUI_ClearRect))
<BR><BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__FillStringInRect
</UL>

<P><STRONG><a name="[1df]"></a>GUI_ClearRectEx</STRONG> (Thumb, 108 bytes, Stack size unknown bytes, GUI_Core.o(.text.GUI_ClearRectEx))
<BR><BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__FillStringInRect
</UL>

<P><STRONG><a name="[1e0]"></a>GUI_CreateDialogBox</STRONG> (Thumb, 190 bytes, Stack size unknown bytes, DIALOG.o(.text.GUI_CreateDialogBox))
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDesktopWindow
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnNextChild
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_OrState
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ShowWindow
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFocusedWindow
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientWindow
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessageNoPara
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFramewin
</UL>

<P><STRONG><a name="[1e7]"></a>GUI_DEVICE_Create</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, GUI_Device.o(.text.GUI_DEVICE_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GUI_DEVICE_Create &rArr; GUI_ALLOC_GetFixedBlock &rArr; _RemoveHoles &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>

<P><STRONG><a name="[1e8]"></a>GUI_DEVICE_CreateAndLink</STRONG> (Thumb, 304 bytes, Stack size unknown bytes, GUI_Device.o(.text.GUI_DEVICE_CreateAndLink))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GUI_DEVICE_CreateAndLink &rArr; GUI_ALLOC_GetFixedBlock &rArr; _RemoveHoles &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[1e9]"></a>GUI_DEVICE_Delete</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, GUI_Device.o(.text.GUI_DEVICE_Delete))
<BR><BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreeFixedBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>

<P><STRONG><a name="[217]"></a>GUI_DEVICE_Link</STRONG> (Thumb, 156 bytes, Stack size unknown bytes, GUI_Device.o(.text.GUI_DEVICE_Link))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt.part.0
</UL>

<P><STRONG><a name="[274]"></a>GUI_DEVICE_Unlink</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, GUI_Device.o(.text.GUI_DEVICE_Unlink))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SelectLCD
</UL>

<P><STRONG><a name="[21d]"></a>GUI_DEVICE__GetpDriver</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, GUI_Device.o(.text.GUI_DEVICE__GetpDriver))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateBuffer.isra.4
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetVSizeEx
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetVRAMAddrEx
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetSizeEx
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDevFunc
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetSwapXYEx
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetBitsPerPixelEx
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ManageCache
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetLUTEntryEx
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPalette
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColors
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetMirrorYEx
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetMirrorXEx
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColorsEx
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVYSizeEx
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVXSizeEx
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSizeEx
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSizeEx
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVXSizeMax
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPosEx
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPosEx
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSizeMax
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSizeMax
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emWin_LCD_Init
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSize
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSize
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateEx
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumLayers
</UL>

<P><STRONG><a name="[18f]"></a>GUI_DRAW__Draw</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, GUI_DRAW.o(.text.GUI_DRAW__Draw))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
</UL>

<P><STRONG><a name="[1f1]"></a>GUI_DispStringAt</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, GUI_DispString.o(.text.GUI_DispStringAt))
<BR><BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString.part.0
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__FillStringInRect
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[18d]"></a>GUI_DispStringInRect</STRONG> (Thumb, 70 bytes, Stack size unknown bytes, GUI_DispString.o(.text.GUI_DispStringInRect))
<BR><BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_DrawSkinFlex
</UL>

<P><STRONG><a name="[1f5]"></a>GUI_DispStringInRectWrap</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, GUI_DispString.o(.text.GUI_DispStringInRectWrap))
<BR><BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap.part.1
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_Callback
</UL>

<P><STRONG><a name="[188]"></a>GUI_DrawGradientV</STRONG> (Thumb, 416 bytes, Stack size unknown bytes, GUI_DrawGradient.o(.text.GUI_DrawGradientV))
<BR><BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_DrawSkinFlex
</UL>

<P><STRONG><a name="[192]"></a>GUI_DrawHLine</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, GUI_DrawLib.o(.text.GUI_DrawHLine))
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_DrawSkinFlex
</UL>

<P><STRONG><a name="[1b9]"></a>GUI_DrawPixel</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, GUI_DrawLib.o(.text.GUI_DrawPixel))
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_DrawSkinFlex
</UL>

<P><STRONG><a name="[187]"></a>GUI_DrawRect</STRONG> (Thumb, 132 bytes, Stack size unknown bytes, GUI_2DLib.o(.text.GUI_DrawRect))
<BR><BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawVLine
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawDown
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawUpRect
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawUp
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawDownRect
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
</UL>

<P><STRONG><a name="[193]"></a>GUI_DrawVLine</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, GUI_DrawLib.o(.text.GUI_DrawVLine))
<BR><BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawVLine
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_DrawSkinFlex
</UL>

<P><STRONG><a name="[1fa]"></a>GUI_Exec</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, GUI_Common.o(.text.GUI_Exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GUI_Exec &rArr; WM_Exec &rArr; GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CopyToLCD &rArr; GUI_MEMDEV_CopyToLCDAt.part.0 &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _RemoveHoles &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAPHICS_MainTask
</UL>

<P><STRONG><a name="[194]"></a>GUI_FillRect</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, GUI_DrawLib.o(.text.GUI_FillRect))
<BR><BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_DrawSkinFlex
</UL>

<P><STRONG><a name="[1b8]"></a>GUI_FillRectEx</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, GUI_DrawLib.o(.text.GUI_FillRectEx))
<BR><BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_DrawSkinFlex
</UL>

<P><STRONG><a name="[245]"></a>GUI_GetBitmapPixelIndex</STRONG> (Thumb, 168 bytes, Stack size unknown bytes, GUI_Common.o(.text.GUI_GetBitmapPixelIndex))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SPRITE_SetPosition
</UL>

<P><STRONG><a name="[237]"></a>GUI_GetBitsPerPixelEx</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, LCD_GetEx.o(.text.GUI_GetBitsPerPixelEx))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DoAlphaBlending
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadRectEx
</UL>

<P><STRONG><a name="[1cc]"></a>GUI_GetBkColor</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, GUI_Common.o(.text.GUI_GetBkColor))
<BR><BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetBkColorIndex
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__FillStringInRect
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
</UL>

<P><STRONG><a name="[260]"></a>GUI_GetCharDistX</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, GUI_Char.o(.text.GUI_GetCharDistX))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCharWrap
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWordWrap
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCursorPosChar
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCursorPosX
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__WrapGetNumBytesToNextLine
</UL>

<P><STRONG><a name="[261]"></a>GUI_GetCharDistXEx</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, GUI_Char.o(.text.GUI_GetCharDistXEx))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
</UL>

<P><STRONG><a name="[18a]"></a>GUI_GetClientRect</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, GUI_Common.o(.text.GUI_GetClientRect))
<BR><BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
</UL>

<P><STRONG><a name="[1cb]"></a>GUI_GetColor</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, GUI_Common.o(.text.GUI_GetColor))
<BR><BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetColorIndex
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientV
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
</UL>

<P><STRONG><a name="[1d8]"></a>GUI_GetCursorLayer</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, GUI_SelectLayer.o(.text.GUI_GetCursorLayer))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CURSOR_SetPositionEx
</UL>

<P><STRONG><a name="[3a5]"></a>GUI_GetDrawMode</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, GUI_Common.o(.text.GUI_GetDrawMode))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LL_FillRect
</UL>

<P><STRONG><a name="[1ec]"></a>GUI_GetFontDistY</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, GUI_Char.o(.text.GUI_GetFontDistY))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CalcTextRect
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap.part.1
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString.part.0
</UL>

<P><STRONG><a name="[200]"></a>GUI_GetLayerPosEx</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, GUI_SelectLayer.o(.text.GUI_GetLayerPosEx))
<BR><BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPosEx
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[223]"></a>GUI_GetOrg</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, GUI_Common.o(.text.GUI_GetOrg))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[19a]"></a>GUI_GetStringDistX</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, GUI_DispString.o(.text.GUI_GetStringDistX))
<BR><BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetNumChars
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CalcTextRect
</UL>

<P><STRONG><a name="[202]"></a>GUI_GetTime</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, GUI_Time.o(.text.GUI_GetTime))
<BR><BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Restart
</UL>

<P><STRONG><a name="[257]"></a>GUI_GetVersionString</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, GUI_Common.o(.text.GUI_GetVersionString))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Config
</UL>

<P><STRONG><a name="[1ed]"></a>GUI_GetYAdjust</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, GUI_Char.o(.text.GUI_GetYAdjust))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString.part.0
</UL>

<P><STRONG><a name="[1be]"></a>GUI_GetYSizeOfFont</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, GUI_Common.o(.text.GUI_GetYSizeOfFont))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__CalcPositions
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__CalcTitleHeight
</UL>

<P><STRONG><a name="[239]"></a>GUI_GetpfColor2IndexEx</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, LCD_GetEx.o(.text.GUI_GetpfColor2IndexEx))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[238]"></a>GUI_GetpfIndex2ColorEx</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, LCD_GetEx.o(.text.GUI_GetpfIndex2ColorEx))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DoAlphaBlending
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[1db]"></a>GUI_GotoXY</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, GUI_Common.o(.text.GUI_GotoXY))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
</UL>

<P><STRONG><a name="[204]"></a>GUI_Init</STRONG> (Thumb, 392 bytes, Stack size unknown bytes, GUI_Core.o(.text.GUI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = GUI_Init &rArr; GUI__Config &rArr; LCD_X_Config &rArr; GUI_DEVICE_CreateAndLink &rArr; GUI_ALLOC_GetFixedBlock &rArr; _RemoveHoles &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDisplaySize
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSizeMax
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSizeMax
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSizeDisplay
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSizeDisplay
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emWin_LCD_Init
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Config
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitContext
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetOrg
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAPHICS_Init
</UL>

<P><STRONG><a name="[210]"></a>GUI_MEMDEV_Clear</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, GUIDEV_Clear.o(.text.GUI_MEMDEV_Clear))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[211]"></a>GUI_MEMDEV_CopyToLCD</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, GUIDEV.o(.text.GUI_MEMDEV_CopyToLCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_CopyToLCD &rArr; GUI_MEMDEV_CopyToLCDAt.part.0 &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _RemoveHoles &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt.part.0
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[21b]"></a>GUI_MEMDEV_CreateEx</STRONG> (Thumb, 132 bytes, Stack size unknown bytes, GUIDEV.o(.text.GUI_MEMDEV_CreateEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_CreateEx &rArr; GUI_MEMDEV__CreateFixed &rArr; GUI_DEVICE_Create &rArr; GUI_ALLOC_GetFixedBlock &rArr; _RemoveHoles &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[21e]"></a>GUI_MEMDEV_Delete</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, GUIDEV.o(.text.GUI_MEMDEV_Delete))
<BR><BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Delete
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow.part.3
</UL>

<P><STRONG><a name="[220]"></a>GUI_MEMDEV_Draw</STRONG> (Thumb, 368 bytes, Stack size unknown bytes, GUIDEV_Banding.o(.text.GUI_MEMDEV_Draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CopyToLCD &rArr; GUI_MEMDEV_CopyToLCDAt.part.0 &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _RemoveHoles &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessageNoPara
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVYSizeEx
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVXSizeEx
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSizeEx
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSizeEx
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetOrg
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Clear
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_ReduceYSize
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYSize
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCD
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateEx
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
</UL>

<P><STRONG><a name="[22b]"></a>GUI_MEMDEV_GetBitsPerPixel</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, GUIDEV.o(.text.GUI_MEMDEV_GetBitsPerPixel))
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__GetBPPDevice
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[22d]"></a>GUI_MEMDEV_GetDataPtr</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, GUIDEV_GetDataPtr.o(.text.GUI_MEMDEV_GetDataPtr))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveAlpha
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAlpha
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[224]"></a>GUI_MEMDEV_GetYSize</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, GUIDEV_GetYSize.o(.text.GUI_MEMDEV_GetYSize))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[a1]"></a>GUI_MEMDEV_Paint1Static</STRONG> (Thumb, 404 bytes, Stack size unknown bytes, GUIDEV_StaticDevices.o(.text.GUI_MEMDEV_Paint1Static))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_Paint1Static &rArr; GUI_MEMDEV__CreateFixed &rArr; GUI_DEVICE_Create &rArr; GUI_ALLOC_GetFixedBlock &rArr; _RemoveHoles &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDesktopWindow
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowOrgX
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSize
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSize
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Write
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__AlphaPreserveTrans
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>
<BR>[Address Reference Count : 2]<UL><LI> WM.o(.text._Paint1Trans)
<LI> WM.o(.text.WM__PaintWinAndOverlays)
</UL>
<P><STRONG><a name="[226]"></a>GUI_MEMDEV_ReduceYSize</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, GUIDEV_ReduceYSize.o(.text.GUI_MEMDEV_ReduceYSize))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[225]"></a>GUI_MEMDEV_Select</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, GUIDEV.o(.text.GUI_MEMDEV_Select))
<BR><BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Deactivate
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Link
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SPRITE_SetPosition
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
</UL>

<P><STRONG><a name="[227]"></a>GUI_MEMDEV_SetOrg</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, GUIDEV_SetOrg.o(.text.GUI_MEMDEV_SetOrg))
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
</UL>

<P><STRONG><a name="[230]"></a>GUI_MEMDEV_Write</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, GUIDEV_Write.o(.text.GUI_MEMDEV_Write))
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAt
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
</UL>

<P><STRONG><a name="[21c]"></a>GUI_MEMDEV__CreateFixed</STRONG> (Thumb, 312 bytes, Stack size unknown bytes, GUIDEV.o(.text.GUI_MEMDEV__CreateFixed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV__CreateFixed &rArr; GUI_DEVICE_Create &rArr; GUI_ALLOC_GetFixedBlock &rArr; _RemoveHoles &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__GetBPPDevice
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Create
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Delete
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_RequestSize
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateEx
</UL>

<P><STRONG><a name="[b6]"></a>GUI_MEMDEV__WriteToActiveAlpha</STRONG> (Thumb, 404 bytes, Stack size unknown bytes, GUIDEV_WriteToActiveAlpha.o(.text.GUI_MEMDEV__WriteToActiveAlpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV__WriteToActiveAlpha &rArr; _WriteToActiveAlpha &rArr; GUI__AllocAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _RemoveHoles &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveAlpha
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_32.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[234]"></a>GUI_MEMDEV__WriteToActiveAt</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, GUIDEV.o(.text.GUI_MEMDEV__WriteToActiveAt))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Write
</UL>

<P><STRONG><a name="[b5]"></a>GUI_MEMDEV__WriteToActiveOpaque</STRONG> (Thumb, 2494 bytes, Stack size unknown bytes, GUIDEV_WriteToActiveOpaque.o(.text.GUI_MEMDEV__WriteToActiveOpaque))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV__WriteToActiveOpaque &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _RemoveHoles &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CompactPixelIndices
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetpfColor2IndexEx
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__DrawBitmap_1bpp
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetpfIndex2ColorEx
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBitsPerPixelEx
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt.part.0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_16.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[33c]"></a>GUI_MULTIBUF_ConfirmEx</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, GUI_MULTIBUF.o(.text.GUI_MULTIBUF_ConfirmEx))
<BR><BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_LineEventCallback
</UL>

<P><STRONG><a name="[2b2]"></a>GUI_MergeRect</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, GUI_Common.o(.text.GUI_MergeRect))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow.part.11
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
</UL>

<P><STRONG><a name="[18b]"></a>GUI_MoveRect</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, GUI_Common.o(.text.GUI_MoveRect))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveWindow
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect.part.2
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Screen2Client
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCaptureMove
</UL>

<P><STRONG><a name="[29f]"></a>GUI_PID_GetState</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, GUI_PID.o(.text.GUI_PID_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[29e]"></a>GUI_PID_IsEmpty</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, GUI_PID.o(.text.GUI_PID_IsEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[23c]"></a>GUI_PID_StoreState</STRONG> (Thumb, 268 bytes, Stack size unknown bytes, GUI_PID.o(.text.GUI_PID_StoreState))
<BR><BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SignalEvent
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAPHICS_MainTask
</UL>

<P><STRONG><a name="[23f]"></a>GUI_PollKeyMsg</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, GUI_OnKey.o(.text.GUI_PollKeyMsg))
<BR><BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OnKey
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Exec1Input
</UL>

<P><STRONG><a name="[241]"></a>GUI_ReadRectEx</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, LCD_ReadRect.o(.text.GUI_ReadRectEx))
<BR><BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadRectEx
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DoAlphaBlending
</UL>

<P><STRONG><a name="[286]"></a>GUI_RectsIntersect</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, GUI_Common.o(.text.GUI_RectsIntersect))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__FillStringInRect
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1.constprop.11
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0.constprop.10
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1Trans
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispLine
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCaptureMove
</UL>

<P><STRONG><a name="[243]"></a>GUI_RestoreContext</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, GUI_Common.o(.text.GUI_RestoreContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GUI_RestoreContext &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawDown
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawUpRect
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawUp
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawDownRect
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
</UL>

<P><STRONG><a name="[1da]"></a>GUI_SPRITE_SetPosition</STRONG> (Thumb, 1584 bytes, Stack size unknown bytes, GUI_SPRITE.o(.text.GUI_SPRITE_SetPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GUI_SPRITE_SetPosition &rArr; _CreateBuffer.isra.4 &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _RemoveHoles &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReleaseBuffer.isra.7
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetBkIndexBuffered
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateBuffer.isra.4
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSizeEx
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSizeEx
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBitmapPixelIndex
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CURSOR_SetPositionEx
</UL>

<P><STRONG><a name="[248]"></a>GUI_SaveContext_W</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, GUI_Common.o(.text.GUI_SaveContext_W))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GUI_SaveContext_W &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawDown
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawUpRect
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawUp
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawDownRect
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
</UL>

<P><STRONG><a name="[21a]"></a>GUI_SelectLCD</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, GUI_Common.o(.text.GUI_SelectLCD))
<BR><BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Activate
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SelectLCD
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt.part.0
</UL>

<P><STRONG><a name="[214]"></a>GUI_SelectLayer</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, GUI_SelectLayer.o(.text.GUI_SelectLayer))
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow.part.3
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emWin_LCD_Init
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt.part.0
</UL>

<P><STRONG><a name="[24a]"></a>GUI_SetBkColor</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, GUI_Common.o(.text.GUI_SetBkColor))
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBackWin
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
</UL>

<P><STRONG><a name="[186]"></a>GUI_SetColor</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, GUI_Common.o(.text.GUI_SetColor))
<BR><BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawTwinArc2
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawTwinArc4
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_DrawSkinFlex
</UL>

<P><STRONG><a name="[213]"></a>GUI_SetDrawMode</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, GUI_Common.o(.text.GUI_SetDrawMode))
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt.part.0
</UL>

<P><STRONG><a name="[189]"></a>GUI_SetFont</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, GUI_Common.o(.text.GUI_SetFont))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_Callback
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_DrawSkinFlex
</UL>

<P><STRONG><a name="[3ab]"></a>GUI_SetFuncDrawAlpha</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, GUI__Alpha.o(.text.GUI_SetFuncDrawAlpha))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[1d9]"></a>GUI_SetLayerPosEx</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, GUI_SelectLayer.o(.text.GUI_SetLayerPosEx))
<BR><BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPosEx
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CURSOR_SetPositionEx
</UL>

<P><STRONG><a name="[20e]"></a>GUI_SetOrg</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, GUI_Common.o(.text.GUI_SetOrg))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[18c]"></a>GUI_SetTextMode</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, GUI_Common.o(.text.GUI_SetTextMode))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__FillStringInRect
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_Callback
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_DrawSkinFlex
</UL>

<P><STRONG><a name="[23d]"></a>GUI_SignalEvent</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, GUI_WaitEvent.o(.text.GUI_SignalEvent))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PID_StoreState
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_StoreKey
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
</UL>

<P><STRONG><a name="[181]"></a>GUI_StoreKey</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, GUI_OnKey.o(.text.GUI_StoreKey))
<BR><BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SignalEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Callback
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouchDefault
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBackWin
</UL>

<P><STRONG><a name="[24c]"></a>GUI_TIMER_Delete</STRONG> (Thumb, 200 bytes, Stack size unknown bytes, GUI_Timer.o(.text.GUI_TIMER_Delete))
<BR><BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
</UL>

<P><STRONG><a name="[24d]"></a>GUI_TIMER_GetFlag</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, GUI_Timer.o(.text.GUI_TIMER_GetFlag))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
</UL>

<P><STRONG><a name="[24e]"></a>GUI_TIMER_Restart</STRONG> (Thumb, 124 bytes, Stack size unknown bytes, GUI_Timer.o(.text.GUI_TIMER_Restart))
<BR><BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Link
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_RestartTimer
</UL>

<P><STRONG><a name="[250]"></a>GUI_TIMER_SetPeriod</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, GUI_Timer.o(.text.GUI_TIMER_SetPeriod))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_RestartTimer
</UL>

<P><STRONG><a name="[251]"></a>GUI_TIMER__GetFirstTimer</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, GUI_Timer.o(.text.GUI_TIMER__GetFirstTimer))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
</UL>

<P><STRONG><a name="[252]"></a>GUI_TIMER__GetNextTimerLin</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, GUI_Timer.o(.text.GUI_TIMER__GetNextTimerLin))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
</UL>

<P><STRONG><a name="[1a1]"></a>GUI_UC_Encode</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, GUI_UC.o(.text.GUI_UC_Encode))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
</UL>

<P><STRONG><a name="[19f]"></a>GUI_UC_GetCharCode</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, GUI_UC.o(.text.GUI_UC_GetCharCode))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCursorPosChar
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCursorCharacter
</UL>

<P><STRONG><a name="[1a4]"></a>GUI_UC_GetCharSize</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, GUI_UC.o(.text.GUI_UC_GetCharSize))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCursorPosChar
</UL>

<P><STRONG><a name="[1a0]"></a>GUI_UC__CalcSizeOfChar</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, GUI_UC.o(.text.GUI_UC__CalcSizeOfChar))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
</UL>

<P><STRONG><a name="[25f]"></a>GUI_UC__GetCharCodeInc</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, GUI_UC.o(.text.GUI_UC__GetCharCodeInc))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCharWrap
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWordWrap
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__HandleEOLine
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineNumChars
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCursorPosX
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__WrapGetNumBytesToNextLine
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispLine
</UL>

<P><STRONG><a name="[2c7]"></a>GUI_UC__NumBytes2NumChars</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, GUI_UC.o(.text.GUI_UC__NumBytes2NumChars))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCursorPosChar
</UL>

<P><STRONG><a name="[19d]"></a>GUI_UC__NumChars2NumBytes</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, GUI_UC.o(.text.GUI_UC__NumChars2NumBytes))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetText.part.5
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__WrapGetNumBytesToNextLine
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString.part.0
</UL>

<P><STRONG><a name="[2c3]"></a>GUI_USAGE_AddRect</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, GUIDEV_Usage.o(.text.GUI_USAGE_AddRect))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[235]"></a>GUI_USAGE_BM_Create</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, GUIDEV_UsageBM.o(.text.GUI_USAGE_BM_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GUI_USAGE_BM_Create &rArr; GUI_ALLOC_AllocZero &rArr; _Alloc &rArr; _RemoveHoles &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>

<P><STRONG><a name="[21f]"></a>GUI_USAGE_DecUseCnt</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, GUIDEV_Usage.o(.text.GUI_USAGE_DecUseCnt))
<BR><BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
</UL>

<P><STRONG><a name="[253]"></a>GUI__AllocAlphaBuffer</STRONG> (Thumb, 156 bytes, Stack size unknown bytes, GUI__Alpha.o(.text.GUI__AllocAlphaBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GUI__AllocAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _RemoveHoles &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVXSizeMax
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveAlpha
</UL>

<P><STRONG><a name="[22e]"></a>GUI__AlphaPreserveTrans</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, GUI_SetAlpha.o(.text.GUI__AlphaPreserveTrans))
<BR><BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_AA_SetOrMask
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
</UL>

<P><STRONG><a name="[256]"></a>GUI__CalcTextRect</STRONG> (Thumb, 168 bytes, Stack size unknown bytes, GUI__Private.o(.text.GUI__CalcTextRect))
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetStringDistX
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[23a]"></a>GUI__CompactPixelIndices</STRONG> (Thumb, 422 bytes, Stack size unknown bytes, GUI__CompactPixelIndices.o(.text.GUI__CompactPixelIndices))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReleaseBuffer.isra.7
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetBkIndexBuffered
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[2cd]"></a>GUI__CompactPixelIndicesEx</STRONG> (Thumb, 396 bytes, Stack size unknown bytes, GUI__CompactPixelIndices.o(.text.GUI__CompactPixelIndicesEx))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveAlpha
</UL>

<P><STRONG><a name="[205]"></a>GUI__Config</STRONG> (Thumb, 128 bytes, Stack size unknown bytes, GUI_Core.o(.text.GUI__Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = GUI__Config &rArr; LCD_X_Config &rArr; GUI_DEVICE_CreateAndLink &rArr; GUI_ALLOC_GetFixedBlock &rArr; _RemoveHoles &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Config
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetVersionString
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[1f0]"></a>GUI__DispLine</STRONG> (Thumb, 196 bytes, Stack size unknown bytes, GUI_CharLine.o(.text.GUI__DispLine))
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispLine
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap.part.1
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString.part.0
</UL>

<P><STRONG><a name="[1f4]"></a>GUI__DispStringInRect</STRONG> (Thumb, 396 bytes, Stack size unknown bytes, GUI_DispString.o(.text.GUI__DispStringInRect))
<BR><BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__HandleEOLine
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__NumChars2NumBytes
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineNumChars
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetClientRect
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRect
</UL>

<P><STRONG><a name="[25c]"></a>GUI__DoAlphaBlending</STRONG> (Thumb, 636 bytes, Stack size unknown bytes, GUI__Alpha.o(.text.GUI__DoAlphaBlending))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GUI__DoAlphaBlending &rArr; GUI_ALLOC_GetFixedBlock &rArr; _RemoveHoles &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVXSizeMax
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ExpandPixelIndicesEx
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ReadRectEx
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetpfIndex2ColorEx
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBitsPerPixelEx
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveAlpha
</UL>

<P><STRONG><a name="[1b7]"></a>GUI__DrawTwinArc2</STRONG> (Thumb, 504 bytes, Stack size unknown bytes, GUI__DrawTwinArc.o(.text.GUI__DrawTwinArc2))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__sqrt32
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_DrawSkinFlex
</UL>

<P><STRONG><a name="[191]"></a>GUI__DrawTwinArc4</STRONG> (Thumb, 644 bytes, Stack size unknown bytes, GUI__DrawTwinArc.o(.text.GUI__DrawTwinArc4))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__sqrt32
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
</UL>

<P><STRONG><a name="[25d]"></a>GUI__ExpandPixelIndicesEx</STRONG> (Thumb, 392 bytes, Stack size unknown bytes, GUI__ExpandPixelIndices.o(.text.GUI__ExpandPixelIndicesEx))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DoAlphaBlending
</UL>

<P><STRONG><a name="[2cc]"></a>GUI__GetCursorCharacter</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, GUI__GetCursorPos.o(.text.GUI__GetCursorCharacter))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[19c]"></a>GUI__GetCursorPosChar</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, GUI__GetCursorPos.o(.text.GUI__GetCursorPosChar))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
</UL>

<P><STRONG><a name="[2cb]"></a>GUI__GetCursorPosX</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, GUI__GetCursorPos.o(.text.GUI__GetCursorPosX))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[1ef]"></a>GUI__GetLineDistX</STRONG> (Thumb, 128 bytes, Stack size unknown bytes, GUI_CharLine.o(.text.GUI__GetLineDistX))
<BR><BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistXEx
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetStringDistX
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap.part.1
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString.part.0
</UL>

<P><STRONG><a name="[1ee]"></a>GUI__GetLineNumChars</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, GUI_CharLine.o(.text.GUI__GetLineNumChars))
<BR><BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__WrapGetNumCharsDisp
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__WrapGetNumBytesToNextLine
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString.part.0
</UL>

<P><STRONG><a name="[19b]"></a>GUI__GetNumChars</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, GUI_UC.o(.text.GUI__GetNumChars))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetStringDistX
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetText.part.5
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[25b]"></a>GUI__HandleEOLine</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, GUI__Private.o(.text.GUI__HandleEOLine))
<BR><BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
</UL>

<P><STRONG><a name="[295]"></a>GUI__IntersectRect</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, GUI__Private.o(.text.GUI__IntersectRect))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow.part.11
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect.part.2
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
</UL>

<P><STRONG><a name="[1f3]"></a>GUI__IntersectRects</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, GUI__Private.o(.text.GUI__IntersectRects))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__FillStringInRect
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateParent
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectEx
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1Trans
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRect
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap.part.1
</UL>

<P><STRONG><a name="[262]"></a>GUI__InvertRectColors</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, GUI_Common.o(.text.GUI__InvertRectColors))
<BR><BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelIndex
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[266]"></a>GUI__ManageCache</STRONG> (Thumb, 244 bytes, Stack size unknown bytes, GUI__ManageCache.o(.text.GUI__ManageCache))
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispLine
</UL>

<P><STRONG><a name="[c]"></a>GUI__MixColors</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, GUI__Alpha.o(.text.GUI__MixColors))
<BR>[Address Reference Count : 1]<UL><LI> GUI__Alpha.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>GUI__MixColorsBulk</STRONG> (Thumb, 148 bytes, Stack size unknown bytes, GUI__Alpha.o(.text.GUI__MixColorsBulk))
<BR>[Address Reference Count : 1]<UL><LI> GUI__Alpha.o(.data)
</UL>
<P><STRONG><a name="[282]"></a>GUI__ReduceRect</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, GUI__Private.o(.text.GUI__ReduceRect))
<BR><BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__GetInsideRect
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCaptureMove
</UL>

<P><STRONG><a name="[23e]"></a>GUI__RegisterExit</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, GUI_Core.o(.text.GUI__RegisterExit))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PID_StoreState
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitColors
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__AllocAlphaBuffer
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DoAlphaBlending
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Config
</UL>

<P><STRONG><a name="[184]"></a>GUI__SetText</STRONG> (Thumb, 216 bytes, Stack size unknown bytes, GUI__Private.o(.text.GUI__SetText))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GUI__SetText &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _RemoveHoles &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreePtr
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetSize
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetText
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_CreateIndirect
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetText
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_CreateIndirect
</UL>

<P><STRONG><a name="[1f7]"></a>GUI__WrapGetNumBytesToNextLine</STRONG> (Thumb, 196 bytes, Stack size unknown bytes, GUI__Wrap.o(.text.GUI__WrapGetNumBytesToNextLine))
<BR><BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__NumChars2NumBytes
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineNumChars
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap.part.1
</UL>

<P><STRONG><a name="[1f8]"></a>GUI__WrapGetNumCharsDisp</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, GUI__Wrap.o(.text.GUI__WrapGetNumCharsDisp))
<BR><BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineNumChars
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap.part.1
</UL>

<P><STRONG><a name="[268]"></a>GUI__memset</STRONG> (Thumb, 128 bytes, Stack size unknown bytes, GUI__Private.o(.text.GUI__memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GUI__memset &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVSize
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetSize
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetDevFunc
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyBuffer
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowBuffer
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVRAM_BufferPTR
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetAlpha
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPos
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPos
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVis
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVRAMAddr
</UL>

<P><STRONG><a name="[2c4]"></a>GUI__memset16</STRONG> (Thumb, 102 bytes, Stack size unknown bytes, GUI__Private.o(.text.GUI__memset16))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
</UL>

<P><STRONG><a name="[25e]"></a>GUI__sqrt32</STRONG> (Thumb, 316 bytes, Stack size unknown bytes, GUI__Private.o(.text.GUI__sqrt32))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawTwinArc2
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawTwinArc4
</UL>

<P><STRONG><a name="[1f]"></a>LCD_AA_MixColors16</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, LCD_AA.o(.text.LCD_AA_MixColors16))
<BR>[Address Reference Count : 1]<UL><LI> LCD_AA.o(.data)
</UL>
<P><STRONG><a name="[255]"></a>LCD_AA_SetOrMask</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, LCD_AA.o(.text.LCD_AA_SetOrMask))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__AlphaPreserveTrans
</UL>

<P><STRONG><a name="[264]"></a>LCD_Color2Index</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, LCD.o(.text.LCD_Color2Index))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetpPalConvTableBM
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__InvertRectColors
</UL>

<P><STRONG><a name="[e0]"></a>LCD_Color2Index_8666</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, GUICC_8666.o(.text.LCD_Color2Index_8666))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_8666.o(.rodata)
</UL>
<P><STRONG><a name="[1c9]"></a>LCD_DrawBitmap</STRONG> (Thumb, 780 bytes, Stack size unknown bytes, LCD.o(.text.LCD_DrawBitmap))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveAlpha
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMONO_DispChar
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
</UL>

<P><STRONG><a name="[116]"></a>LCD_DrawHLine</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, LCD.o(.text.LCD_DrawHLine))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawTwinArc2
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawTwinArc4
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientV
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_Core.o(.rodata)
</UL>
<P><STRONG><a name="[117]"></a>LCD_DrawPixel</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, LCD.o(.text.LCD_DrawPixel))
<BR>[Address Reference Count : 1]<UL><LI> GUI_Core.o(.rodata)
</UL>
<P><STRONG><a name="[1f9]"></a>LCD_DrawVLine</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, LCD.o(.text.LCD_DrawVLine))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
</UL>

<P><STRONG><a name="[1ca]"></a>LCD_FillRect</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, LCD.o(.text.LCD_FillRect))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LL_FillRect
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMONO_DispChar
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRectEx
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRectEx
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientV
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
</UL>

<P><STRONG><a name="[269]"></a>LCD_GetBitsPerPixelEx</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, LCD_GetEx.o(.text.LCD_GetBitsPerPixelEx))
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
</UL>

<P><STRONG><a name="[1fc]"></a>LCD_GetBkColorIndex</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, LCD_GetColorIndex.o(.text.LCD_GetBkColorIndex))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
</UL>

<P><STRONG><a name="[1ff]"></a>LCD_GetColorIndex</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, LCD_GetColorIndex.o(.text.LCD_GetColorIndex))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
</UL>

<P><STRONG><a name="[26a]"></a>LCD_GetMirrorXEx</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, LCD_GetEx.o(.text.LCD_GetMirrorXEx))
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetOrg
</UL>

<P><STRONG><a name="[26b]"></a>LCD_GetMirrorYEx</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, LCD_GetEx.o(.text.LCD_GetMirrorYEx))
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetOrg
</UL>

<P><STRONG><a name="[26c]"></a>LCD_GetNumColors</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, LCD_GetEx.o(.text.LCD_GetNumColors))
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Color2Index_0
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Index2Color_0
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetIndexMask_0
</UL>

<P><STRONG><a name="[26d]"></a>LCD_GetNumColorsEx</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, LCD_GetEx.o(.text.LCD_GetNumColorsEx))
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
</UL>

<P><STRONG><a name="[26e]"></a>LCD_GetNumLayers</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, LCD_GetNumDisplays.o(.text.LCD_GetNumLayers))
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
</UL>

<P><STRONG><a name="[26f]"></a>LCD_GetPalette</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, LCD_GetEx.o(.text.LCD_GetPalette))
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Color2Index_0
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Index2Color_0
</UL>

<P><STRONG><a name="[263]"></a>LCD_GetPixelIndex</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, LCD_GetP.o(.text.LCD_GetPixelIndex))
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__InvertRectColors
</UL>

<P><STRONG><a name="[201]"></a>LCD_GetPosEx</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, LCD_Set.o(.text.LCD_GetPosEx))
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetLayerPosEx
</UL>

<P><STRONG><a name="[270]"></a>LCD_GetSwapXYEx</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, LCD_GetEx.o(.text.LCD_GetSwapXYEx))
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetOrg
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVSize
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetSize
</UL>

<P><STRONG><a name="[229]"></a>LCD_GetVXSizeEx</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, LCD_GetEx.o(.text.LCD_GetVXSizeEx))
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[254]"></a>LCD_GetVXSizeMax</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, LCD_GetEx.o(.text.LCD_GetVXSizeMax))
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__AllocAlphaBuffer
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DoAlphaBlending
</UL>

<P><STRONG><a name="[22a]"></a>LCD_GetVYSizeEx</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, LCD_GetEx.o(.text.LCD_GetVYSizeEx))
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[231]"></a>LCD_GetXSize</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, LCD_GetEx.o(.text.LCD_GetXSize))
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
</UL>

<P><STRONG><a name="[209]"></a>LCD_GetXSizeDisplay</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, LCD_GetEx.o(.text.LCD_GetXSizeDisplay))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPos
</UL>

<P><STRONG><a name="[221]"></a>LCD_GetXSizeEx</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, LCD_GetEx.o(.text.LCD_GetXSizeEx))
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SPRITE_SetPosition
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[20b]"></a>LCD_GetXSizeMax</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, LCD_GetEx.o(.text.LCD_GetXSizeMax))
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[232]"></a>LCD_GetYSize</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, LCD_GetEx.o(.text.LCD_GetYSize))
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
</UL>

<P><STRONG><a name="[20a]"></a>LCD_GetYSizeDisplay</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, LCD_GetEx.o(.text.LCD_GetYSizeDisplay))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPos
</UL>

<P><STRONG><a name="[222]"></a>LCD_GetYSizeEx</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, LCD_GetEx.o(.text.LCD_GetYSizeEx))
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SPRITE_SetPosition
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[20c]"></a>LCD_GetYSizeMax</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, LCD_GetEx.o(.text.LCD_GetYSizeMax))
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[b]"></a>LCD_GetpPalConvTableBM</STRONG> (Thumb, 116 bytes, Stack size unknown bytes, LCD_Color.o(.text.LCD_GetpPalConvTableBM))
<BR><BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_Core.o(.data)
</UL>
<P><STRONG><a name="[1fd]"></a>LCD_Index2Color</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, LCD.o(.text.LCD_Index2Color))
<BR><BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__InvertRectColors
</UL>

<P><STRONG><a name="[fa]"></a>LCD_Index2Color_565</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, GUICC_565.o(.text.LCD_Index2Color_565))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_565.o(.rodata)
</UL>
<P><STRONG><a name="[e1]"></a>LCD_Index2Color_8666</STRONG> (Thumb, 148 bytes, Stack size unknown bytes, GUICC_8666.o(.text.LCD_Index2Color_8666))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_8666.o(.rodata)
</UL>
<P><STRONG><a name="[ff]"></a>LCD_Index2Color_888</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, GUICC_888_Index2Color.o(.text.LCD_Index2Color_888))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_888.o(.rodata)
</UL>
<P><STRONG><a name="[104]"></a>LCD_Index2Color_8888</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, GUICC_8888_Index2Color.o(.text.LCD_Index2Color_8888))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_8888.o(.rodata)
</UL>
<P><STRONG><a name="[109]"></a>LCD_Index2Color_M565</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, GUICC_M565.o(.text.LCD_Index2Color_M565))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M565.o(.rodata)
</UL>
<P><STRONG><a name="[99]"></a>LCD_Index2Color_M888</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, GUICC_M888_Index2Color.o(.text.LCD_Index2Color_M888))
<BR>[Address Reference Count : 2]<UL><LI> GUICC_M888.o(.rodata)
<LI> GUI__Alpha.o(.text.GUI__DoAlphaBlending)
</UL>
<P><STRONG><a name="[9a]"></a>LCD_Index2Color_M8888I</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, GUICC_M8888I_Index2Color.o(.text.LCD_Index2Color_M8888I))
<BR>[Address Reference Count : 3]<UL><LI> GUIDEV_WriteToActiveAlpha.o(.text._WriteToActiveAlpha)
<LI> GUICC_M8888I.o(.rodata)
<LI> GUI__Alpha.o(.text.GUI__DoAlphaBlending)
</UL>
<P><STRONG><a name="[271]"></a>LCD_InitColors</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, LCD_Color.o(.text.LCD_InitColors))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = LCD_InitColors &rArr; GUI_ALLOC_GetFixedBlock &rArr; _RemoveHoles &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emWin_LCD_Init
</UL>

<P><STRONG><a name="[272]"></a>LCD_InitLUT</STRONG> (Thumb, 128 bytes, Stack size unknown bytes, LCD_Color.o(.text.LCD_InitLUT))
<BR><BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetBitsPerPixelEx
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetLUTEntryEx
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColorsEx
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumLayers
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emWin_LCD_Init
</UL>

<P><STRONG><a name="[249]"></a>LCD_SelectLCD</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, LCD_SelectLCD.o(.text.LCD_SelectLCD))
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
</UL>

<P><STRONG><a name="[1c3]"></a>LCD_SetBkColor</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, LCD.o(.text.LCD_SetBkColor))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitContext
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_Callback
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__cbClient
</UL>

<P><STRONG><a name="[27b]"></a>LCD_SetBkColorIndex</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, LCD.o(.text.LCD_SetBkColorIndex))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
</UL>

<P><STRONG><a name="[275]"></a>LCD_SetClipRectEx</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, LCD_SetClipRectEx.o(.text.LCD_SetClipRectEx))
<BR><BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
</UL>

<P><STRONG><a name="[219]"></a>LCD_SetClipRectMax</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, LCD.o(.text.LCD_SetClipRectMax))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Deactivate
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow.part.3
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SelectLCD
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt.part.0
</UL>

<P><STRONG><a name="[1c7]"></a>LCD_SetColor</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, LCD.o(.text.LCD_SetColor))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawDown
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawUpRect
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawUp
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawDownRect
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitContext
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientV
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_Callback
</UL>

<P><STRONG><a name="[27a]"></a>LCD_SetColorIndex</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, LCD.o(.text.LCD_SetColorIndex))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
</UL>

<P><STRONG><a name="[276]"></a>LCD_SetDevFunc</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, LCD_Set.o(.text.LCD_SetDevFunc))
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LL_FillRect
</UL>

<P><STRONG><a name="[20d]"></a>LCD_SetDisplaySize</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, LCD_GetEx.o(.text.LCD_SetDisplaySize))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[1c8]"></a>LCD_SetDrawMode</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, LCD.o(.text.LCD_SetDrawMode))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMONO_DispChar
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRectEx
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDrawMode
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
</UL>

<P><STRONG><a name="[273]"></a>LCD_SetLUTEntryEx</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, LCD_Set.o(.text.LCD_SetLUTEntryEx))
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
</UL>

<P><STRONG><a name="[265]"></a>LCD_SetPixelIndex</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, LCD.o(.text.LCD_SetPixelIndex))
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__InvertRectColors
</UL>

<P><STRONG><a name="[24b]"></a>LCD_SetPosEx</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, LCD_Set.o(.text.LCD_SetPosEx))
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetLayerPosEx
</UL>

<P><STRONG><a name="[277]"></a>LCD_SetSizeEx</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, LCD_Set.o(.text.LCD_SetSizeEx))
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[278]"></a>LCD_SetVRAMAddrEx</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, LCD_Set.o(.text.LCD_SetVRAMAddrEx))
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[279]"></a>LCD_SetVSizeEx</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, LCD_Set.o(.text.LCD_SetVSizeEx))
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[218]"></a>LCD_UpdateColorIndices</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, LCD_UpdateColorIndices.o(.text.LCD_UpdateColorIndices))
<BR><BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColorIndex
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColorIndex
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt.part.0
</UL>

<P><STRONG><a name="[23b]"></a>LCD__DrawBitmap_1bpp</STRONG> (Thumb, 540 bytes, Stack size unknown bytes, LCD.o(.text.LCD__DrawBitmap_1bpp))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[22c]"></a>LCD__GetBPPDevice</STRONG> (Thumb, 104 bytes, Stack size unknown bytes, LCD_GetEx.o(.text.LCD__GetBPPDevice))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>

<P><STRONG><a name="[9c]"></a>TEXT_Callback</STRONG> (Thumb, 202 bytes, Stack size unknown bytes, TEXT.o(.text.TEXT_Callback))
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreePtr
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetHasTrans
</UL>
<BR>[Address Reference Count : 1]<UL><LI> TEXT.o(.text.TEXT_CreateIndirect)
</UL>
<P><STRONG><a name="[d4]"></a>TEXT_CreateIndirect</STRONG> (Thumb, 168 bytes, Stack size unknown bytes, TEXT.o(.text.TEXT_CreateIndirect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = TEXT_CreateIndirect &rArr; WM_CreateWindowAsChild &rArr; GUI_ALLOC_AllocZero &rArr; _Alloc &rArr; _RemoveHoles &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> framewindlg.o(.constdata)
</UL>
<P><STRONG><a name="[27d]"></a>TEXT_SetFont</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, TEXT.o(.text.TEXT_SetFont))
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
</UL>

<P><STRONG><a name="[27e]"></a>TEXT_SetText</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, TEXT.o(.text.TEXT_SetText))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = TEXT_SetText &rArr; GUI__SetText &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _RemoveHoles &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__SetText
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
</UL>

<P><STRONG><a name="[27f]"></a>TEXT_SetTextColor</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, TEXT.o(.text.TEXT_SetTextColor))
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
</UL>

<P><STRONG><a name="[180]"></a>WIDGET_AndState</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, WIDGET.o(.text.WIDGET_AndState))
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Callback
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouchDefault
</UL>

<P><STRONG><a name="[178]"></a>WIDGET_HandleActive</STRONG> (Thumb, 452 bytes, Stack size unknown bytes, WIDGET.o(.text.WIDGET_HandleActive))
<BR><BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__UpdateChildPositions
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectWin
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ReduceRect
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToTop
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Callback
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_Callback
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_Callback
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__cbClient
</UL>

<P><STRONG><a name="[17a]"></a>WIDGET_OrState</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, WIDGET.o(.text.WIDGET_OrState))
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDialogBox
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Callback
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouchDefault
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_Callback
</UL>

<P><STRONG><a name="[283]"></a>WIDGET__EFFECT_DrawDown</STRONG> (Thumb, 160 bytes, Stack size unknown bytes, WIDGET.o(.text.WIDGET__EFFECT_DrawDown))
<BR><BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Screen2Client
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[285]"></a>WIDGET__FillStringInRect</STRONG> (Thumb, 272 bytes, Stack size unknown bytes, WIDGET.o(.text.WIDGET__FillStringInRect))
<BR><BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRectEx
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[287]"></a>WIDGET__GetInsideRect</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, WIDGET.o(.text.WIDGET__GetInsideRect))
<BR><BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectWin
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ReduceRect
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[183]"></a>WIDGET__Init</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, WIDGET.o(.text.WIDGET__Init))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_CreateIndirect
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_CreateIndirect
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_CreateIndirect
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_CreateIndirect
</UL>

<P><STRONG><a name="[215]"></a>WM_Activate</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, WM.o(.text.WM_Activate))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt.part.0
</UL>

<P><STRONG><a name="[288]"></a>WM_BringToBottom</STRONG> (Thumb, 138 bytes, Stack size unknown bytes, WM_Lib.o(.text.WM_BringToBottom))
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetPrevSibling
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
</UL>

<P><STRONG><a name="[1ae]"></a>WM_BringToTop</STRONG> (Thumb, 124 bytes, Stack size unknown bytes, WM_BringToTop.o(.text.WM_BringToTop))
<BR><BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ForEachDesc
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__RemoveWindowFromList
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InsertWindowIntoList
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_Callback
</UL>

<P><STRONG><a name="[182]"></a>WM_CreateWindowAsChild</STRONG> (Thumb, 452 bytes, Stack size unknown bytes, WM.o(.text.WM_CreateWindowAsChild))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = WM_CreateWindowAsChild &rArr; GUI_ALLOC_AllocZero &rArr; _Alloc &rArr; _RemoveHoles &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InsertWindowIntoList
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect.part.2
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_CreateIndirect
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_CreateIndirect
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_CreateIndirect
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_CreateIndirect
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
</UL>

<P><STRONG><a name="[216]"></a>WM_Deactivate</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, WM.o(.text.WM_Deactivate))
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt.part.0
</UL>

<P><STRONG><a name="[179]"></a>WM_DefaultProc</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, WM.o(.text.WM_DefaultProc))
<BR><BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectEx
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect.part.2
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Callback
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessageIfEnabled
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_Callback
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_Callback
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__cbClient
</UL>

<P><STRONG><a name="[1a6]"></a>WM_DeleteWindow</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, WM.o(.text.WM_DeleteWindow))
<BR><BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow.part.3
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDialogBox
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_CreateIndirect
</UL>

<P><STRONG><a name="[1b5]"></a>WM_DisableMemdev</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, WM_MemDev.o(.text.WM_DisableMemdev))
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_CreateIndirect
</UL>

<P><STRONG><a name="[1fb]"></a>WM_Exec</STRONG> (Thumb, 644 bytes, Stack size unknown bytes, WM.o(.text.WM_Exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = WM_Exec &rArr; GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CopyToLCD &rArr; GUI_MEMDEV_CopyToLCDAt.part.0 &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _RemoveHoles &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ManageCache
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Exec1Input
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RestoreContext
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SaveContext_W
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Exec
</UL>

<P><STRONG><a name="[28d]"></a>WM_ForEachDesc</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, WM_Lib.o(.text.WM_ForEachDesc))
<BR><BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ForEachDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToTop
</UL>

<P><STRONG><a name="[29d]"></a>WM_GetActiveWindow</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, WM.o(.text.WM_GetActiveWindow))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeX
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeY
</UL>

<P><STRONG><a name="[1fe]"></a>WM_GetClientRect</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, WM_Lib.o(.text.WM_GetClientRect))
<BR><BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectEx
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawDown
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawUp
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__EFFECT_DrawDown
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetClientRect
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_Callback
</UL>

<P><STRONG><a name="[1e1]"></a>WM_GetClientWindow</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, WM_Lib.o(.text.WM_GetClientWindow))
<BR><BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDialogBox
</UL>

<P><STRONG><a name="[1e3]"></a>WM_GetDesktopWindow</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, WM_Lib.o(.text.WM_GetDesktopWindow))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFramewin
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDialogBox
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitContext
</UL>

<P><STRONG><a name="[2b4]"></a>WM_GetDesktopWindowEx</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, WM_Lib.o(.text.WM_GetDesktopWindowEx))
<BR><BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Screen2hWin
</UL>

<P><STRONG><a name="[299]"></a>WM_GetDialogItem</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, WM_Lib.o(.text.WM_GetDialogItem))
<BR><BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GetDialogItem
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
</UL>

<P><STRONG><a name="[1c0]"></a>WM_GetFirstChild</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, WM_Lib.o(.text.WM_GetFirstChild))
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateParent
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__GetTitleLimits
</UL>

<P><STRONG><a name="[1e5]"></a>WM_GetFocusedWindow</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, WM_Lib.o(.text.WM_GetFocusedWindow))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDialogBox
</UL>

<P><STRONG><a name="[27c]"></a>WM_GetHasTrans</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, WM_SetTrans.o(.text.WM_GetHasTrans))
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_Callback
</UL>

<P><STRONG><a name="[29b]"></a>WM_GetId</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, WM_Lib.o(.text.WM_GetId))
<BR><BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
</UL>

<P><STRONG><a name="[1c1]"></a>WM_GetNextSibling</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, WM_Lib.o(.text.WM_GetNextSibling))
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__GetTitleLimits
</UL>

<P><STRONG><a name="[1c2]"></a>WM_GetParent</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, WM_Lib.o(.text.WM_GetParent))
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetPrevSibling
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendTouchMessage
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCaptureMove
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__cbClient
</UL>

<P><STRONG><a name="[22f]"></a>WM_GetWindowOrgX</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, WM_Lib.o(.text.WM_GetWindowOrgX))
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
</UL>

<P><STRONG><a name="[29c]"></a>WM_GetWindowRectEx</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, WM_Lib.o(.text.WM_GetWindowRectEx))
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCaptureMove
</UL>

<P><STRONG><a name="[199]"></a>WM_GetWindowSizeX</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, WM_GetWindowSize.o(.text.WM_GetWindowSizeX))
<BR><BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetActiveWindow
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[1bc]"></a>WM_GetWindowSizeY</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, WM_GetWindowSize.o(.text.WM_GetWindowSizeY))
<BR><BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetActiveWindow
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__CalcPositions
</UL>

<P><STRONG><a name="[95]"></a>WM_HandlePID</STRONG> (Thumb, 1260 bytes, Stack size unknown bytes, WM_Touch.o(.text.WM_HandlePID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = WM_HandlePID &rArr; GUI_CURSOR_SetPositionEx &rArr; GUI_SPRITE_SetPosition &rArr; _CreateBuffer.isra.4 &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _RemoveHoles &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetLayerPosEx
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsWindow
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsEnabled
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__AddCriticalHandle
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PID_IsEmpty
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PID_GetState
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ReleaseCapture
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Screen2hWin
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__RemoveCriticalHandle
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_PID__SetPrevState
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CURSOR_SetPositionEx
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendTouchMessage
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessageIfEnabled
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsAncestor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_PID.o(.text.GUI_PID_StoreState)
</UL>
<P><STRONG><a name="[2b7]"></a>WM_HasCaptured</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, WM_Lib.o(.text.WM_HasCaptured))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCaptureMove
</UL>

<P><STRONG><a name="[1b3]"></a>WM_HasFocus</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, WM_Lib.o(.text.WM_HasFocus))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_Callback
</UL>

<P><STRONG><a name="[20f]"></a>WM_Init</STRONG> (Thumb, 336 bytes, Stack size unknown bytes, WM.o(.text.WM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = WM_Init &rArr; WM_CreateWindowAsChild &rArr; GUI_ALLOC_AllocZero &rArr; _Alloc &rArr; _RemoveHoles &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__AddCriticalHandle
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect.part.2
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[185]"></a>WM_InvalidateWindow</STRONG> (Thumb, 172 bytes, Stack size unknown bytes, WM.o(.text.WM_InvalidateWindow))
<BR><BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetTextColor
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetText
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetFont
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_CreateIndirect
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetTextColor
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetTextAlign
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetFont
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_CreateIndirect
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetText
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_CreateIndirect
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetText.part.5
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_OrState
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_AndState
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescs.part.14
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbInvalidateOne
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetHasTrans
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToTop
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_Callback
</UL>

<P><STRONG><a name="[2aa]"></a>WM_InvalidateWindowAndDescsEx</STRONG> (Thumb, 868 bytes, Stack size unknown bytes, WM.o(.text.WM_InvalidateWindowAndDescsEx))
<BR><BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateParent
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
</UL>

<P><STRONG><a name="[2ab]"></a>WM_IsFocusable</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, WM_Lib.o(.text.WM_IsFocusable))
<BR><BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnNextChild
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnPrevChild
</UL>

<P><STRONG><a name="[1b2]"></a>WM_IsWindow</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, WM_Lib.o(.text.WM_IsWindow))
<BR><BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendTouchMessage
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_Callback
</UL>

<P><STRONG><a name="[2ad]"></a>WM_MoveWindow</STRONG> (Thumb, 170 bytes, Stack size unknown bytes, WM_Move.o(.text.WM_MoveWindow))
<BR><BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateParent
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__UpdateChildPositions
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCaptureMove
</UL>

<P><STRONG><a name="[17d]"></a>WM_NotifyParent</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, WM_Lib.o(.text.WM_NotifyParent))
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Callback
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouchDefault
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow.part.3
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_Callback
</UL>

<P><STRONG><a name="[240]"></a>WM_OnKey</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, WM_Lib.o(.text.WM_OnKey))
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PollKeyMsg
</UL>

<P><STRONG><a name="[2a2]"></a>WM_PID__SetPrevState</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, WM_PID__GetPrevState.o(.text.WM_PID__SetPrevState))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[2a6]"></a>WM_ReleaseCapture</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, WM_SetCapture.o(.text.WM_ReleaseCapture))
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[2b0]"></a>WM_ResizeWindow</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, WM_Lib.o(.text.WM_ResizeWindow))
<BR><BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow.part.11
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__UpdateChildPositions
</UL>

<P><STRONG><a name="[198]"></a>WM_RestartTimer</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, WM_Timer.o(.text.WM_RestartTimer))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Restart
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_SetPeriod
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[2a4]"></a>WM_Screen2hWin</STRONG> (Thumb, 132 bytes, Stack size unknown bytes, WM_Screen2Win.o(.text.WM_Screen2hWin))
<BR><BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWin
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDesktopWindowEx
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[197]"></a>WM_SelectWindow</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, WM.o(.text.WM_SelectWindow))
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
</UL>

<P><STRONG><a name="[298]"></a>WM_SendMessage</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, WM.o(.text.WM_SendMessage))
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetId
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsFocusable
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientWindow
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GetDialogItem
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDialogItem
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDialogItem.part.5
</UL>

<P><STRONG><a name="[1e4]"></a>WM_SendMessageNoPara</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, WM_Lib.o(.text.WM_SendMessageNoPara))
<BR><BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessageNoPara
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDialogBox
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
</UL>

<P><STRONG><a name="[290]"></a>WM_SendToParent</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, WM_Lib.o(.text.WM_SendToParent))
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBackWin
</UL>

<P><STRONG><a name="[2b6]"></a>WM_SetCapture</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, WM_SetCapture.o(.text.WM_SetCapture))
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCaptureMove
</UL>

<P><STRONG><a name="[1af]"></a>WM_SetCaptureMove</STRONG> (Thumb, 164 bytes, Stack size unknown bytes, WM_SetCaptureMove.o(.text.WM_SetCaptureMove))
<BR><BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HasCaptured
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRectEx
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveWindow
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ReduceRect
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCapture
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_Callback
</UL>

<P><STRONG><a name="[1ab]"></a>WM_SetFocus</STRONG> (Thumb, 164 bytes, Stack size unknown bytes, WM_Lib.o(.text.WM_SetFocus))
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsWindow
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnNextChild
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_Callback
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnPrevChild
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__cbClient
</UL>

<P><STRONG><a name="[1b4]"></a>WM_SetFocusOnNextChild</STRONG> (Thumb, 136 bytes, Stack size unknown bytes, WM_SetFocusOnNextChild.o(.text.WM_SetFocusOnNextChild))
<BR><BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsFocusable
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetTopLevelLayer
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetFocusedChild
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDialogBox
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_Callback
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__cbClient
</UL>

<P><STRONG><a name="[1c5]"></a>WM_SetFocusOnPrevChild</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, WM_SetFocusOnPrevChild.o(.text.WM_SetFocusOnPrevChild))
<BR><BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsFocusable
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetPrevSibling
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetLastSibling
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetFocusedChild
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__cbClient
</UL>

<P><STRONG><a name="[190]"></a>WM_SetHasTrans</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, WM_SetTrans.o(.text.WM_SetHasTrans))
<BR><BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ValidateWindow
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_DrawSkinFlex
</UL>

<P><STRONG><a name="[233]"></a>WM_SetSize</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, WM_Lib.o(.text.WM_SetSize))
<BR><BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow.part.11
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
</UL>

<P><STRONG><a name="[1f2]"></a>WM_SetUserClipRect</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, WM_Lib.o(.text.WM_SetUserClipRect))
<BR><BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__FillStringInRect
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRect
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap.part.1
</UL>

<P><STRONG><a name="[1e2]"></a>WM_ShowWindow</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, WM_Lib.o(.text.WM_ShowWindow))
<BR><BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescs.part.14
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDialogBox
</UL>

<P><STRONG><a name="[2bb]"></a>WM_ValidateWindow</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, WM_Lib.o(.text.WM_ValidateWindow))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetHasTrans
</UL>

<P><STRONG><a name="[2bc]"></a>WM__ActivateClipRect</STRONG> (Thumb, 296 bytes, Stack size unknown bytes, WM.o(.text.WM__ActivateClipRect))
<BR><BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectEx
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
</UL>

<P><STRONG><a name="[2a0]"></a>WM__AddCriticalHandle</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, WM__Private.o(.text.WM__AddCriticalHandle))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
</UL>

<P><STRONG><a name="[292]"></a>WM__DeleteAssocTimer</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, WM_Timer.o(.text.WM__DeleteAssocTimer))
<BR><BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetNextTimerLin
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_GetFlag
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetFirstTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow.part.3
</UL>

<P><STRONG><a name="[297]"></a>WM__ForEachDesc</STRONG> (Thumb, 346 bytes, Stack size unknown bytes, WM__Private.o(.text.WM__ForEachDesc))
<BR><BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ForEachDesc
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ForEachDesc
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ForEachDesc
</UL>

<P><STRONG><a name="[28f]"></a>WM__GetClientRectEx</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, WM__Private.o(.text.WM__GetClientRectEx))
<BR><BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectWin
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBackWin
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
</UL>

<P><STRONG><a name="[281]"></a>WM__GetClientRectWin</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, WM.o(.text.WM__GetClientRectWin))
<BR><BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__GetInsideRect
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectEx
</UL>

<P><STRONG><a name="[2b8]"></a>WM__GetFocusedChild</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, WM__Private.o(.text.WM__GetFocusedChild))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnNextChild
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnPrevChild
</UL>

<P><STRONG><a name="[2ba]"></a>WM__GetLastSibling</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, WM__Private.o(.text.WM__GetLastSibling))
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnPrevChild
</UL>

<P><STRONG><a name="[1dd]"></a>WM__GetNextIVR</STRONG> (Thumb, 596 bytes, Stack size unknown bytes, WM.o(.text.WM__GetNextIVR))
<BR><BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1.constprop.11
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0.constprop.10
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRectEx
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPixel
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRectEx
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawTwinArc2
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawTwinArc4
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientV
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Write
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt.part.0
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
</UL>

<P><STRONG><a name="[289]"></a>WM__GetPrevSibling</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, WM__Private.o(.text.WM__GetPrevSibling))
<BR><BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnPrevChild
</UL>

<P><STRONG><a name="[2b9]"></a>WM__GetTopLevelLayer</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, WM.o(.text.WM__GetTopLevelLayer))
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnNextChild
</UL>

<P><STRONG><a name="[1ba]"></a>WM__GetWindowSizeX</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, WM_GetWindowSize.o(.text.WM__GetWindowSizeX))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__CalcPositions
</UL>

<P><STRONG><a name="[1bb]"></a>WM__GetWindowSizeY</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, WM_GetWindowSize.o(.text.WM__GetWindowSizeY))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__CalcPositions
</UL>

<P><STRONG><a name="[1dc]"></a>WM__InitIVRSearch</STRONG> (Thumb, 408 bytes, Stack size unknown bytes, WM.o(.text.WM__InitIVRSearch))
<BR><BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRectEx
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPixel
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRectEx
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawTwinArc2
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawTwinArc4
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientV
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Write
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt.part.0
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
</UL>

<P><STRONG><a name="[28c]"></a>WM__InsertWindowIntoList</STRONG> (Thumb, 212 bytes, Stack size unknown bytes, WM.o(.text.WM__InsertWindowIntoList))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToTop
</UL>

<P><STRONG><a name="[2a8]"></a>WM__InvalidateDrawAndDescs</STRONG> (Thumb, 676 bytes, Stack size unknown bytes, WM.o(.text.WM__InvalidateDrawAndDescs))
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow.part.11
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect.part.2
</UL>

<P><STRONG><a name="[2af]"></a>WM__InvalidateParent</STRONG> (Thumb, 230 bytes, Stack size unknown bytes, WM.o(.text.WM__InvalidateParent))
<BR><BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveWindow
</UL>

<P><STRONG><a name="[293]"></a>WM__InvalidateRect</STRONG> (Thumb, 216 bytes, Stack size unknown bytes, WM.o(.text.WM__InvalidateRect))
<BR><BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateParent
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow.part.3
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect.part.2
</UL>

<P><STRONG><a name="[28a]"></a>WM__InvalidateRectEx</STRONG> (Thumb, 196 bytes, Stack size unknown bytes, WM.o(.text.WM__InvalidateRectEx))
<BR><BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow.part.11
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
</UL>

<P><STRONG><a name="[1ad]"></a>WM__IsAncestor</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, WM__Private.o(.text.WM__IsAncestor))
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_Callback
</UL>

<P><STRONG><a name="[1ac]"></a>WM__IsAncestorOrSelf</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, WM__Private.o(.text.WM__IsAncestorOrSelf))
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_Callback
</UL>

<P><STRONG><a name="[18e]"></a>WM__IsEnabled</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, WM__Private.o(.text.WM__IsEnabled))
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[2ac]"></a>WM__IsWindow</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, WM.o(.text.WM__IsWindow))
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsWindow
</UL>

<P><STRONG><a name="[a2]"></a>WM__Paint1</STRONG> (Thumb, 184 bytes, Stack size unknown bytes, WM.o(.text.WM__Paint1))
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessageNoPara
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
</UL>
<BR>[Address Reference Count : 2]<UL><LI> WM.o(.text._Paint1Trans)
<LI> WM.o(.text.WM__PaintWinAndOverlays)
</UL>
<P><STRONG><a name="[2a3]"></a>WM__RemoveCriticalHandle</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, WM__Private.o(.text.WM__RemoveCriticalHandle))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[28b]"></a>WM__RemoveWindowFromList</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, WM.o(.text.WM__RemoveWindowFromList))
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToTop
</UL>

<P><STRONG><a name="[284]"></a>WM__Screen2Client</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, WM__Private.o(.text.WM__Screen2Client))
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__EFFECT_DrawDown
</UL>

<P><STRONG><a name="[1b1]"></a>WM__SendMessage</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, WM__Private.o(.text.WM__SendMessage))
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OnKey
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveWindow
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMsgNoData
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow.part.3
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ReleaseCapture
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCapture
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_Callback
</UL>

<P><STRONG><a name="[2a5]"></a>WM__SendMessageIfEnabled</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, WM__Private.o(.text.WM__SendMessageIfEnabled))
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendTouchMessage
</UL>

<P><STRONG><a name="[228]"></a>WM__SendMessageNoPara</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, WM__Private.o(.text.WM__SendMessageNoPara))
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessageNoPara
</UL>

<P><STRONG><a name="[2b3]"></a>WM__SendMsgNoData</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, WM.o(.text.WM__SendMsgNoData))
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow.part.11
</UL>

<P><STRONG><a name="[2a1]"></a>WM__SendTouchMessage</STRONG> (Thumb, 120 bytes, Stack size unknown bytes, WM_Touch.o(.text.WM__SendTouchMessage))
<BR><BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsWindow
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessageIfEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[280]"></a>WM__UpdateChildPositions</STRONG> (Thumb, 292 bytes, Stack size unknown bytes, WM__Private.o(.text.WM__UpdateChildPositions))
<BR><BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveWindow
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow.part.11
</UL>

<P><STRONG><a name="[208]"></a>emWin_LCD_Init</STRONG> (Thumb, 272 bytes, Stack size unknown bytes, LCD.o(.text.emWin_LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = emWin_LCD_Init &rArr; LCD_InitColors &rArr; GUI_ALLOC_GetFixedBlock &rArr; _RemoveHoles &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitColors
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[2ce]"></a>BSP_PlatformIsDetected</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fatfs_platform.o(i.BSP_PlatformIsDetected))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_PlatformIsDetected
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_IsDetected
</UL>

<P><STRONG><a name="[2d0]"></a>BSP_SD_GetCardInfo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_driver_sd.o(i.BSP_SD_GetCardInfo))
<BR><BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ioctl
</UL>

<P><STRONG><a name="[2d2]"></a>BSP_SD_GetCardState</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_driver_sd.o(i.BSP_SD_GetCardState))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BSP_SD_GetCardState &rArr; HAL_SD_GetCardState &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CheckStatus
</UL>

<P><STRONG><a name="[2d4]"></a>BSP_SD_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bsp_driver_sd.o(i.BSP_SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = BSP_SD_Init &rArr; HAL_SD_ConfigWideBusOperation &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdSendSCR &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_IsDetected
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
</UL>

<P><STRONG><a name="[2d5]"></a>BSP_SD_IsDetected</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_driver_sd.o(i.BSP_SD_IsDetected))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_SD_IsDetected &rArr; BSP_PlatformIsDetected
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PlatformIsDetected
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[2d8]"></a>BSP_SD_ReadBlocks</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, bsp_driver_sd.o(i.BSP_SD_ReadBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BSP_SD_ReadBlocks &rArr; HAL_SD_ReadBlocks &rArr; SDMMC_CmdStopTransfer &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
</UL>

<P><STRONG><a name="[2da]"></a>BSP_SD_WriteBlocks</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, bsp_driver_sd.o(i.BSP_SD_WriteBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BSP_SD_WriteBlocks &rArr; HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
</UL>

<P><STRONG><a name="[2dc]"></a>BSP_TS_GetState</STRONG> (Thumb, 360 bytes, Stack size 120 bytes, stm32746g_discovery_ts.o(i.BSP_TS_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = BSP_TS_GetState &rArr; BSP_TS_Get_GestureId &rArr; ft5336_TS_GetGestureID &rArr; TS_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336_TS_GetTouchInfo
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TS_Get_GestureId
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAPHICS_MainTask
</UL>

<P><STRONG><a name="[2de]"></a>BSP_TS_Get_GestureId</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, stm32746g_discovery_ts.o(i.BSP_TS_Get_GestureId))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = BSP_TS_Get_GestureId &rArr; ft5336_TS_GetGestureID &rArr; TS_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336_TS_GetGestureID
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TS_GetState
</UL>

<P><STRONG><a name="[2f3]"></a>BSP_TS_Init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32746g_discovery_ts.o(i.BSP_TS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_TS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAPHICS_MainTask
</UL>

<P><STRONG><a name="[24]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2e0]"></a>CreateFramewin</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, framewindlg.o(i.CreateFramewin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = CreateFramewin
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDesktopWindow
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDialogBox
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAPHICS_MainTask
</UL>

<P><STRONG><a name="[83]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.DMA2D_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2D_IRQHandler &rArr; HAL_DMA2D_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2e6]"></a>DMA2D_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stemwin_wrapper.o(i.DMA2D_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DMA2D_Init &rArr; HAL_DMA2D_Init &rArr; HAL_DMA2D_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Init
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_ConfigLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAPHICS_HW_Init
</UL>

<P><STRONG><a name="[27]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2e8]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_Init
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LCD_Init
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FMC_Init
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA2D_Init
</UL>

<P><STRONG><a name="[3b5]"></a>FATFS_LinkDriver</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ff_gen_drv.o(i.FATFS_LinkDriver))
<BR><BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FATFS_Init
</UL>

<P><STRONG><a name="[42c]"></a>FATFS_LinkDriverEx</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ff_gen_drv.o(i.FATFS_LinkDriverEx), UNUSED)

<P><STRONG><a name="[359]"></a>FMC_SDRAM_Init</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, stm32f7xx_ll_fmc.o(i.FMC_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FMC_SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[35c]"></a>FMC_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7xx_ll_fmc.o(i.FMC_SDRAM_ProgramRefreshRate))
<BR><BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_ProgramRefreshRate
</UL>

<P><STRONG><a name="[35e]"></a>FMC_SDRAM_SendCommand</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f7xx_ll_fmc.o(i.FMC_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FMC_SDRAM_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
</UL>

<P><STRONG><a name="[35a]"></a>FMC_SDRAM_Timing_Init</STRONG> (Thumb, 134 bytes, Stack size 28 bytes, stm32f7xx_ll_fmc.o(i.FMC_SDRAM_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FMC_SDRAM_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[2ec]"></a>GRAPHICS_HW_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stemwin_wrapper.o(i.GRAPHICS_HW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GRAPHICS_HW_Init &rArr; MX_LCD_Init &rArr; HAL_LTDC_Init &rArr; HAL_LTDC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_Init
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDRAM_InitEx
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LCD_Init
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FMC_Init
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA2D_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f1]"></a>GRAPHICS_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stemwin_wrapper.o(i.GRAPHICS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = GRAPHICS_Init &rArr; GUI_Init &rArr; GUI__Config &rArr; LCD_X_Config &rArr; GUI_DEVICE_CreateAndLink &rArr; GUI_ALLOC_GetFixedBlock &rArr; _RemoveHoles &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f2]"></a>GRAPHICS_MainTask</STRONG> (Thumb, 100 bytes, Stack size 64 bytes, gui_app.o(i.GRAPHICS_MainTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = GRAPHICS_MainTask &rArr; BSP_TS_GetState &rArr; BSP_TS_Get_GestureId &rArr; ft5336_TS_GetGestureID &rArr; TS_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TS_Init
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TS_GetState
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PID_StoreState
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Exec
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFramewin
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[258]"></a>GUI_X_Config</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, guiconf.o(i.GUI_X_Config))
<BR><BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AssignMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Config
</UL>

<P><STRONG><a name="[203]"></a>GUI_X_GetTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_x.o(i.GUI_X_GetTime))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetTime
</UL>

<P><STRONG><a name="[206]"></a>GUI_X_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gui_x.o(i.GUI_X_Init))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[3b1]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, stm32f7xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
</UL>

<P><STRONG><a name="[2f5]"></a>HAL_ADC_Init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f7xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
</UL>

<P><STRONG><a name="[2f6]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, stm32f7xx_hal_msp.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[2fc]"></a>HAL_CRCEx_Polynomial_Set</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, stm32f7xx_hal_crc_ex.o(i.HAL_CRCEx_Polynomial_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>

<P><STRONG><a name="[2fa]"></a>HAL_CRC_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f7xx_hal_crc.o(i.HAL_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_CRC_Init &rArr; HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_MspInit
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2fb]"></a>HAL_CRC_MspInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f7xx_hal_msp.o(i.HAL_CRC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_CRC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>

<P><STRONG><a name="[2fd]"></a>HAL_DCMI_Init</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, stm32f7xx_hal_dcmi.o(i.HAL_DCMI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_DCMI_Init &rArr; HAL_DCMI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DCMI_Init
</UL>

<P><STRONG><a name="[2fe]"></a>HAL_DCMI_MspInit</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, stm32f7xx_hal_msp.o(i.HAL_DCMI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_DCMI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_Init
</UL>

<P><STRONG><a name="[300]"></a>HAL_DMA2D_CLUTLoadingCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_dma2d.o(i.HAL_DMA2D_CLUTLoadingCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_IRQHandler
</UL>

<P><STRONG><a name="[2e9]"></a>HAL_DMA2D_ConfigLayer</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, stm32f7xx_hal_dma2d.o(i.HAL_DMA2D_ConfigLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA2D_ConfigLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_Init
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA2D_Init
</UL>

<P><STRONG><a name="[2e5]"></a>HAL_DMA2D_IRQHandler</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, stm32f7xx_hal_dma2d.o(i.HAL_DMA2D_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA2D_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_LineEventCallback
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_CLUTLoadingCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_IRQHandler
</UL>

<P><STRONG><a name="[2e7]"></a>HAL_DMA2D_Init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f7xx_hal_dma2d.o(i.HAL_DMA2D_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_DMA2D_Init &rArr; HAL_DMA2D_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_Init
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA2D_Init
</UL>

<P><STRONG><a name="[2ff]"></a>HAL_DMA2D_LineEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_dma2d.o(i.HAL_DMA2D_LineEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_IRQHandler
</UL>

<P><STRONG><a name="[301]"></a>HAL_DMA2D_MspInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, hw_init.o(i.HAL_DMA2D_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA2D_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Init
</UL>

<P><STRONG><a name="[2eb]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f7xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Delay
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDRAM_InitEx
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMAConfig
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostInit
</UL>

<P><STRONG><a name="[305]"></a>HAL_ETH_Init</STRONG> (Thumb, 456 bytes, Stack size 40 bytes, stm32f7xx_hal_eth.o(i.HAL_ETH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_ETH_Init &rArr; HAL_ETH_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMAConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ETH_Init
</UL>

<P><STRONG><a name="[306]"></a>HAL_ETH_MspInit</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, stm32f7xx_hal_msp.o(i.HAL_ETH_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_ETH_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[309]"></a>HAL_ETH_ReadPHYRegister</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, stm32f7xx_hal_eth.o(i.HAL_ETH_ReadPHYRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_ETH_ReadPHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[308]"></a>HAL_ETH_WritePHYRegister</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, stm32f7xx_hal_eth.o(i.HAL_ETH_WritePHYRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ETH_WritePHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[329]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 340 bytes, Stack size 36 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspDeInit
</UL>

<P><STRONG><a name="[2f9]"></a>HAL_GPIO_Init</STRONG> (Thumb, 418 bytes, Stack size 40 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_MspInit
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPDIFRX_MspInit
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_MspInit
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_MspInit
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_MspInit
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FMC_MspInit
</UL>

<P><STRONG><a name="[2cf]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PlatformIsDetected
</UL>

<P><STRONG><a name="[3b7]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[304]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[398]"></a>HAL_HCD_Connect_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_hcd.o(i.HAL_HCD_Connect_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Port_IRQHandler
</UL>

<P><STRONG><a name="[30e]"></a>HAL_HCD_Disconnect_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_hcd.o(i.HAL_HCD_Disconnect_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[397]"></a>HAL_HCD_HC_NotifyURBChange_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_hcd.o(i.HAL_HCD_HC_NotifyURBChange_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_HC_OUT_IRQHandler
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_HC_IN_IRQHandler
</UL>

<P><STRONG><a name="[30b]"></a>HAL_HCD_IRQHandler</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, stm32f7xx_hal_hcd.o(i.HAL_HCD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_HCD_IRQHandler &rArr; HCD_HC_IN_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_SOF_Callback
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Disconnect_Callback
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadInterrupts
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_InitFSLSPClkSel
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_ReadInterrupt
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetMode
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_RXQLVL_IRQHandler
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Port_IRQHandler
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_HC_OUT_IRQHandler
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_HC_IN_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[316]"></a>HAL_HCD_Init</STRONG> (Thumb, 104 bytes, Stack size 56 bytes, stm32f7xx_hal_hcd.o(i.HAL_HCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_HCD_Init &rArr; HAL_HCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_MspInit
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostInit
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableGlobalInt
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[317]"></a>HAL_HCD_MspInit</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, stm32f7xx_hal_msp.o(i.HAL_HCD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_HCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
</UL>

<P><STRONG><a name="[39a]"></a>HAL_HCD_PortDisabled_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_hcd.o(i.HAL_HCD_PortDisabled_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Port_IRQHandler
</UL>

<P><STRONG><a name="[399]"></a>HAL_HCD_PortEnabled_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_hcd.o(i.HAL_HCD_PortEnabled_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Port_IRQHandler
</UL>

<P><STRONG><a name="[311]"></a>HAL_HCD_SOF_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_hcd.o(i.HAL_HCD_SOF_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[3b9]"></a>HAL_I2CEx_ConfigAnalogFilter</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, stm32f7xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigAnalogFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_I2CEx_ConfigAnalogFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[3ba]"></a>HAL_I2CEx_ConfigDigitalFilter</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, stm32f7xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigDigitalFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_I2CEx_ConfigDigitalFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[31d]"></a>HAL_I2C_DeInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f7xx_hal_i2c.o(i.HAL_I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_I2C_DeInit &rArr; HAL_I2C_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Error
</UL>

<P><STRONG><a name="[3a0]"></a>HAL_I2C_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal_i2c.o(i.HAL_I2C_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
</UL>

<P><STRONG><a name="[31f]"></a>HAL_I2C_Init</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, stm32f7xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[321]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 346 bytes, Stack size 64 bytes, stm32f7xx_hal_i2c.o(i.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_ReadMultiple
</UL>

<P><STRONG><a name="[326]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 340 bytes, Stack size 64 bytes, stm32f7xx_hal_i2c.o(i.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_WriteMultiple
</UL>

<P><STRONG><a name="[31e]"></a>HAL_I2C_MspDeInit</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32f7xx_hal_msp.o(i.HAL_I2C_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_I2C_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>

<P><STRONG><a name="[320]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, stm32f7xx_hal_msp.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[390]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[32a]"></a>HAL_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f7xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[32c]"></a>HAL_InitTick</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, stm32f7xx_hal_timebase_tim.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[3ac]"></a>HAL_LTDC_ConfigCLUT</STRONG> (Thumb, 140 bytes, Stack size 20 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_ConfigCLUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_LTDC_ConfigCLUT
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>

<P><STRONG><a name="[3af]"></a>HAL_LTDC_ConfigColorKeying</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_ConfigColorKeying))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_LTDC_ConfigColorKeying
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>

<P><STRONG><a name="[332]"></a>HAL_LTDC_ConfigLayer</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_ConfigLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_LTDC_ConfigLayer &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LCD_Init
</UL>

<P><STRONG><a name="[334]"></a>HAL_LTDC_DeInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_LTDC_DeInit &rArr; HAL_LTDC_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LCD_Init
</UL>

<P><STRONG><a name="[3ae]"></a>HAL_LTDC_DisableColorKeying</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_DisableColorKeying))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_LTDC_DisableColorKeying
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>

<P><STRONG><a name="[3ad]"></a>HAL_LTDC_EnableColorKeying</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_EnableColorKeying))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_LTDC_EnableColorKeying
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>

<P><STRONG><a name="[337]"></a>HAL_LTDC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>

<P><STRONG><a name="[336]"></a>HAL_LTDC_IRQHandler</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = HAL_LTDC_IRQHandler &rArr; HAL_LTDC_LineEventCallback &rArr; HAL_LTDC_ProgramLineEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_LineEventCallback
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ReloadEventCallback
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_IRQHandler
</UL>

<P><STRONG><a name="[33a]"></a>HAL_LTDC_Init</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_LTDC_Init &rArr; HAL_LTDC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LCD_Init
</UL>

<P><STRONG><a name="[338]"></a>HAL_LTDC_LineEventCallback</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, stemwin_wrapper.o(i.HAL_LTDC_LineEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = HAL_LTDC_LineEventCallback &rArr; HAL_LTDC_ProgramLineEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ProgramLineEvent
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MULTIBUF_ConfirmEx
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>

<P><STRONG><a name="[335]"></a>HAL_LTDC_MspDeInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, hw_init.o(i.HAL_LTDC_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_LTDC_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_DeInit
</UL>

<P><STRONG><a name="[33b]"></a>HAL_LTDC_MspInit</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, hw_init.o(i.HAL_LTDC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_LTDC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
</UL>

<P><STRONG><a name="[33d]"></a>HAL_LTDC_ProgramLineEvent</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_ProgramLineEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_LTDC_ProgramLineEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_LineEventCallback
</UL>

<P><STRONG><a name="[339]"></a>HAL_LTDC_ReloadEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_ReloadEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>

<P><STRONG><a name="[33f]"></a>HAL_LTDC_SetAddress</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_LTDC_SetAddress &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>

<P><STRONG><a name="[340]"></a>HAL_LTDC_SetAlpha</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_SetAlpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_LTDC_SetAlpha &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>

<P><STRONG><a name="[341]"></a>HAL_LTDC_SetWindowPosition</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_SetWindowPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_LTDC_SetWindowPosition &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>

<P><STRONG><a name="[32d]"></a>HAL_MspInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f7xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[33e]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspDeInit
</UL>

<P><STRONG><a name="[303]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_MspInit
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_MspInit
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_MspInit
</UL>

<P><STRONG><a name="[302]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_MspInit
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_MspInit
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_MspInit
</UL>

<P><STRONG><a name="[32b]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[343]"></a>HAL_PWREx_EnableOverDrive</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32f7xx_hal_pwr_ex.o(i.HAL_PWREx_EnableOverDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PWREx_EnableOverDrive
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[3df]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7xx_hal_pwr.o(i.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[344]"></a>HAL_QSPI_Init</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_QSPI_Init &rArr; HAL_QSPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[345]"></a>HAL_QSPI_MspInit</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, stm32f7xx_hal_msp.o(i.HAL_QSPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_QSPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
</UL>

<P><STRONG><a name="[356]"></a>HAL_RCCEx_GetPeriphCLKFreq</STRONG> (Thumb, 268 bytes, Stack size 20 bytes, stm32f7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPeriphCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCCEx_GetPeriphCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
</UL>

<P><STRONG><a name="[347]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 1276 bytes, Stack size 40 bytes, stm32f7xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[348]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[32e]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RCC_GetClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[307]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[32f]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[3e5]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[349]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[34a]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 810 bytes, Stack size 40 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[3bd]"></a>HAL_RTCEx_SetTimeStamp</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, stm32f7xx_hal_rtc_ex.o(i.HAL_RTCEx_SetTimeStamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RTCEx_SetTimeStamp
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[34b]"></a>HAL_RTC_Init</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, stm32f7xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[34c]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f7xx_hal_msp.o(i.HAL_RTC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[34e]"></a>HAL_RTC_SetAlarm</STRONG> (Thumb, 362 bytes, Stack size 40 bytes, stm32f7xx_hal_rtc.o(i.HAL_RTC_SetAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[350]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, stm32f7xx_hal_rtc.o(i.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RTC_SetDate &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[352]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, stm32f7xx_hal_rtc.o(i.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[351]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f7xx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[353]"></a>HAL_SAI_Init</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, stm32f7xx_hal_sai.o(i.HAL_SAI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_SAI_Init &rArr; HAL_SAI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_MspInit
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Disable
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SAI2_Init
</UL>

<P><STRONG><a name="[354]"></a>HAL_SAI_MspInit</STRONG> (Thumb, 136 bytes, Stack size 56 bytes, stm32f7xx_hal_msp.o(i.HAL_SAI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_SAI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
</UL>

<P><STRONG><a name="[357]"></a>HAL_SDRAM_Init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f7xx_hal_sdram.o(i.HAL_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_SDRAM_Init &rArr; HAL_SDRAM_MspInit &rArr; HAL_FMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Timing_Init
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Init
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FMC_Init
</UL>

<P><STRONG><a name="[358]"></a>HAL_SDRAM_MspInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hw_init.o(i.HAL_SDRAM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SDRAM_MspInit &rArr; HAL_FMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FMC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[35b]"></a>HAL_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f7xx_hal_sdram.o(i.HAL_SDRAM_ProgramRefreshRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SDRAM_ProgramRefreshRate
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_ProgramRefreshRate
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDRAM_InitEx
</UL>

<P><STRONG><a name="[35d]"></a>HAL_SDRAM_SendCommand</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32f7xx_hal_sdram.o(i.HAL_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDRAM_InitEx
</UL>

<P><STRONG><a name="[2d7]"></a>HAL_SD_ConfigWideBusOperation</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_ConfigWideBusOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HAL_SD_ConfigWideBusOperation &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdSendSCR &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[3dd]"></a>HAL_SD_GetCardCSD</STRONG> (Thumb, 506 bytes, Stack size 20 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_GetCardCSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_SD_GetCardCSD
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[2d1]"></a>HAL_SD_GetCardInfo</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_GetCardInfo))
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardInfo
</UL>

<P><STRONG><a name="[2d3]"></a>HAL_SD_GetCardState</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_GetCardState))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SD_GetCardState &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>

<P><STRONG><a name="[2d6]"></a>HAL_SD_Init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = HAL_SD_Init &rArr; HAL_SD_InitCard &rArr; SD_InitCard &rArr; SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[365]"></a>HAL_SD_InitCard</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_InitCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = HAL_SD_InitCard &rArr; SD_InitCard &rArr; SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_PowerState_ON
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[364]"></a>HAL_SD_MspInit</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, stm32f7xx_hal_msp.o(i.HAL_SD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[2d9]"></a>HAL_SD_ReadBlocks</STRONG> (Thumb, 432 bytes, Stack size 64 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_ReadBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_SD_ReadBlocks &rArr; SDMMC_CmdStopTransfer &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ReadFIFO
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigData
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks
</UL>

<P><STRONG><a name="[2db]"></a>HAL_SD_WriteBlocks</STRONG> (Thumb, 418 bytes, Stack size 64 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_WriteBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_WriteFIFO
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigData
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteBlocks
</UL>

<P><STRONG><a name="[372]"></a>HAL_SPDIFRX_Init</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, stm32f7xx_hal_spdifrx.o(i.HAL_SPDIFRX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_SPDIFRX_Init &rArr; HAL_SPDIFRX_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPDIFRX_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPDIFRX_Init
</UL>

<P><STRONG><a name="[373]"></a>HAL_SPDIFRX_MspInit</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, stm32f7xx_hal_msp.o(i.HAL_SPDIFRX_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SPDIFRX_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPDIFRX_Init
</UL>

<P><STRONG><a name="[374]"></a>HAL_SPI_Init</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, stm32f7xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
</UL>

<P><STRONG><a name="[375]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, stm32f7xx_hal_msp.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[383]"></a>HAL_TIMEx_Break2Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_Break2Callback))
<BR><BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[382]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[385]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[3c4]"></a>HAL_TIMEx_ConfigBreakDeadTime</STRONG> (Thumb, 150 bytes, Stack size 28 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_ConfigBreakDeadTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIMEx_ConfigBreakDeadTime
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[3c3]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[330]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[376]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, stm32f7xx_hal_msp.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[331]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[378]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[37e]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[37d]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 386 bytes, Stack size 16 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_Break2Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
</UL>

<P><STRONG><a name="[386]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, stm32f7xx_hal_msp.o(i.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
</UL>

<P><STRONG><a name="[37f]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[387]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC6_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC6_SetConfig
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC5_SetConfig
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
</UL>

<P><STRONG><a name="[38e]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
</UL>

<P><STRONG><a name="[38f]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f7xx_hal_msp.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PWM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[380]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[381]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[384]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[391]"></a>HAL_UART_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[392]"></a>HAL_UART_MspInit</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, stm32f7xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[22]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[bd]"></a>LCD_LL_DrawBitmap16bpp</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, stemwin_wrapper.o(i.LCD_LL_DrawBitmap16bpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_LL_DrawBitmap16bpp &rArr; DMA2D_CopyBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBufferSize
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_CopyBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stemwin_wrapper.o(i.LCD_X_Config)
</UL>
<P><STRONG><a name="[259]"></a>LCD_X_Config</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, stemwin_wrapper.o(i.LCD_X_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = LCD_X_Config &rArr; GUI_DEVICE_CreateAndLink &rArr; GUI_ALLOC_GetFixedBlock &rArr; _RemoveHoles &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetVSizeEx
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetVRAMAddrEx
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetSizeEx
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDevFunc
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetSwapXYEx
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetBitsPerPixelEx
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFuncDrawAlpha
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_CreateAndLink
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUICC_M888_SetCustColorConv
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUICC_M8888I_SetCustColorConv
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUICC_M565_SetCustColorConv
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUICC_M4444I_SetCustColorConv
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUICC_M1555I_SetCustColorConv
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Config
</UL>

<P><STRONG><a name="[2ca]"></a>LCD_X_DisplayDriver</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, stemwin_wrapper.o(i.LCD_X_DisplayDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = LCD_X_DisplayDriver &rArr; HAL_LTDC_SetWindowPosition &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetWindowPosition
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetAlpha
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetAddress
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_EnableColorKeying
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_DisableColorKeying
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigColorKeying
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigCLUT
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetLayerPosEx
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetOrg
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetSize
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_On
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Off
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetAlphaMode
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetChromaMode
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetChroma
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowBuffer
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetAlpha
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPos
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVis
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVRAMAddr
</UL>

<P><STRONG><a name="[81]"></a>LTDC_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.LTDC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = LTDC_IRQHandler &rArr; HAL_LTDC_IRQHandler &rArr; HAL_LTDC_LineEventCallback &rArr; HAL_LTDC_ProgramLineEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2f0]"></a>MX_DMA2D_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, hw_init.o(i.MX_DMA2D_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MX_DMA2D_Init &rArr; HAL_DMA2D_Init &rArr; HAL_DMA2D_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Init
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_ConfigLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAPHICS_HW_Init
</UL>

<P><STRONG><a name="[3b4]"></a>MX_FATFS_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fatfs.o(i.MX_FATFS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MX_FATFS_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2ed]"></a>MX_FMC_Init</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, hw_init.o(i.MX_FMC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MX_FMC_Init &rArr; HAL_SDRAM_Init &rArr; HAL_SDRAM_MspInit &rArr; HAL_FMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAPHICS_HW_Init
</UL>

<P><STRONG><a name="[2ef]"></a>MX_LCD_Init</STRONG> (Thumb, 158 bytes, Stack size 72 bytes, hw_init.o(i.MX_LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MX_LCD_Init &rArr; HAL_LTDC_Init &rArr; HAL_LTDC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_DeInit
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAPHICS_HW_Init
</UL>

<P><STRONG><a name="[2ee]"></a>MX_SDRAM_InitEx</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, hw_init.o(i.MX_SDRAM_InitEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MX_SDRAM_InitEx &rArr; HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_ProgramRefreshRate
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAPHICS_HW_Init
</UL>

<P><STRONG><a name="[23]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.OTG_FS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OTG_FS_IRQHandler &rArr; HAL_HCD_IRQHandler &rArr; HCD_HC_IN_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[34f]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f7xx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm
</UL>

<P><STRONG><a name="[34d]"></a>RTC_EnterInitMode</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f7xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[3cb]"></a>SDMMC_CmdAppCommand</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdAppCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdAppCommand &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[3ce]"></a>SDMMC_CmdAppOperCommand</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdAppOperCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdAppOperCommand &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp3
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[369]"></a>SDMMC_CmdBlockLength</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdBlockLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdBlockLength &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[3d0]"></a>SDMMC_CmdBusWidth</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdBusWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdBusWidth &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
</UL>

<P><STRONG><a name="[3d1]"></a>SDMMC_CmdGoIdleState</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdGoIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdGoIdleState &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[3d2]"></a>SDMMC_CmdOperCond</STRONG> (Thumb, 94 bytes, Stack size 36 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdOperCond))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SDMMC_CmdOperCond &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[36b]"></a>SDMMC_CmdReadMultiBlock</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdReadMultiBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdReadMultiBlock &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
</UL>

<P><STRONG><a name="[36c]"></a>SDMMC_CmdReadSingleBlock</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdReadSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdReadSingleBlock &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
</UL>

<P><STRONG><a name="[3d3]"></a>SDMMC_CmdSelDesel</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdSelDesel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdSelDesel &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[3d4]"></a>SDMMC_CmdSendCID</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdSendCID))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdSendCID &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp2
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[3d6]"></a>SDMMC_CmdSendCSD</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdSendCSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdSendCSD &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp2
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[3d7]"></a>SDMMC_CmdSendSCR</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdSendSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdSendSCR &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[362]"></a>SDMMC_CmdSendStatus</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdSendStatus &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>

<P><STRONG><a name="[3d8]"></a>SDMMC_CmdSetRelAdd</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdSetRelAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp6
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[36e]"></a>SDMMC_CmdStopTransfer</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdStopTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdStopTransfer &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
</UL>

<P><STRONG><a name="[36f]"></a>SDMMC_CmdWriteMultiBlock</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdWriteMultiBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdWriteMultiBlock &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
</UL>

<P><STRONG><a name="[370]"></a>SDMMC_CmdWriteSingleBlock</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdWriteSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdWriteSingleBlock &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
</UL>

<P><STRONG><a name="[36a]"></a>SDMMC_ConfigData</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_ConfigData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDMMC_ConfigData
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[3dc]"></a>SDMMC_GetPowerState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_GetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[363]"></a>SDMMC_GetResponse</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_GetResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDMMC_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp6
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>

<P><STRONG><a name="[361]"></a>SDMMC_Init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDMMC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[366]"></a>SDMMC_PowerState_ON</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_PowerState_ON))
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[36d]"></a>SDMMC_ReadFIFO</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_ReadFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[3cc]"></a>SDMMC_SendCommand</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdGoIdleState
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>

<P><STRONG><a name="[371]"></a>SDMMC_WriteFIFO</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_WriteFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
</UL>

<P><STRONG><a name="[cc]"></a>SD_initialize</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sd_diskio.o(i.SD_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SD_initialize &rArr; BSP_SD_Init &rArr; HAL_SD_ConfigWideBusOperation &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdSendSCR &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CheckStatus
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>SD_ioctl</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, sd_diskio.o(i.SD_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SD_ioctl
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>SD_read</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sd_diskio.o(i.SD_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SD_read &rArr; BSP_SD_ReadBlocks &rArr; HAL_SD_ReadBlocks &rArr; SDMMC_CmdStopTransfer &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>SD_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sd_diskio.o(i.SD_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SD_status &rArr; SD_CheckStatus &rArr; BSP_SD_GetCardState &rArr; HAL_SD_GetCardState &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CheckStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>SD_write</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sd_diskio.o(i.SD_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SD_write &rArr; BSP_SD_WriteBlocks &rArr; HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteBlocks
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[26]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3de]"></a>SystemClock_Config</STRONG> (Thumb, 206 bytes, Stack size 224 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>SystemInit</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, system_stm32f7xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(.text)
</UL>
<P><STRONG><a name="[60]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.TIM6_DAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM6_DAC_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[377]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 158 bytes, Stack size 20 bytes, stm32f7xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[379]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[389]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, stm32f7xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[3e0]"></a>TS_IO_Delay</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32746g_discovery.o(i.TS_IO_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TS_IO_Delay &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336_Init
</UL>

<P><STRONG><a name="[3e1]"></a>TS_IO_Init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32746g_discovery.o(i.TS_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TS_IO_Init &rArr; I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336_I2C_InitializeIfRequired
</UL>

<P><STRONG><a name="[3e2]"></a>TS_IO_Read</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, stm32746g_discovery.o(i.TS_IO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TS_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_ReadMultiple
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336_TS_GetXY
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336_TS_DetectTouch
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336_ReadID
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336_TS_GetTouchInfo
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336_TS_GetGestureID
</UL>

<P><STRONG><a name="[3e3]"></a>TS_IO_Write</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, stm32746g_discovery.o(i.TS_IO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TS_IO_Write &rArr; I2Cx_WriteMultiple &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_WriteMultiple
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336_TS_EnableIT
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336_TS_DisableIT
</UL>

<P><STRONG><a name="[394]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[395]"></a>UART_CheckIdleState</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f7xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[393]"></a>UART_SetConfig</STRONG> (Thumb, 546 bytes, Stack size 24 bytes, stm32f7xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[3e4]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, stm32f7xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[31a]"></a>USB_CoreInit</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32f7xx_ll_usb.o(i.USB_CoreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_CoreInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreReset
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
</UL>

<P><STRONG><a name="[318]"></a>USB_DisableGlobalInt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7xx_ll_usb.o(i.USB_DisableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
</UL>

<P><STRONG><a name="[3e9]"></a>USB_DriveVbus</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f7xx_ll_usb.o(i.USB_DriveVbus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_DriveVbus
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostInit
</UL>

<P><STRONG><a name="[3e8]"></a>USB_FlushRxFifo</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f7xx_ll_usb.o(i.USB_FlushRxFifo))
<BR><BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostInit
</UL>

<P><STRONG><a name="[3e7]"></a>USB_FlushTxFifo</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f7xx_ll_usb.o(i.USB_FlushTxFifo))
<BR><BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostInit
</UL>

<P><STRONG><a name="[30c]"></a>USB_GetMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f7xx_ll_usb.o(i.USB_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[396]"></a>USB_HC_Halt</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, stm32f7xx_ll_usb.o(i.USB_HC_Halt))
<BR><BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_HC_OUT_IRQHandler
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_HC_IN_IRQHandler
</UL>

<P><STRONG><a name="[312]"></a>USB_HC_ReadInterrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f7xx_ll_usb.o(i.USB_HC_ReadInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[31c]"></a>USB_HostInit</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, stm32f7xx_ll_usb.o(i.USB_HostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_HostInit &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushRxFifo
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DriveVbus
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
</UL>

<P><STRONG><a name="[30f]"></a>USB_InitFSLSPClkSel</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, stm32f7xx_ll_usb.o(i.USB_InitFSLSPClkSel))
<BR><BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Port_IRQHandler
</UL>

<P><STRONG><a name="[30d]"></a>USB_ReadInterrupts</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f7xx_ll_usb.o(i.USB_ReadInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[39b]"></a>USB_ReadPacket</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f7xx_ll_usb.o(i.USB_ReadPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_RXQLVL_IRQHandler
</UL>

<P><STRONG><a name="[31b]"></a>USB_SetCurrentMode</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f7xx_ll_usb.o(i.USB_SetCurrentMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_SetCurrentMode &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
</UL>

<P><STRONG><a name="[25]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3ee]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[42d]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[408]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catenate
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust
</UL>

<P><STRONG><a name="[42e]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[42f]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[3fc]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[3f0]"></a>__hardfp_pow</STRONG> (Thumb, 3072 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust
</UL>

<P><STRONG><a name="[3fd]"></a>__hardfp_strtod</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, strtod.o(i.__hardfp_strtod))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate
</UL>

<P><STRONG><a name="[3f9]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[3f3]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[3f1]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[3f7]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[3f4]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[3f8]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[430]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[431]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[432]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[3f2]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[175]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[407]"></a>adjust</STRONG> (Thumb, 264 bytes, Stack size 80 bytes, framewindlg.o(i.adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = adjust &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;point
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_result
</UL>

<P><STRONG><a name="[40c]"></a>calculate</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, framewindlg.o(i.calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = calculate &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtod
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_result
</UL>

<P><STRONG><a name="[402]"></a>calculate_result</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, framewindlg.o(i.calculate_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = calculate_result &rArr; adjust &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catenate
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
</UL>

<P><STRONG><a name="[40f]"></a>catenate</STRONG> (Thumb, 40 bytes, Stack size 112 bytes, framewindlg.o(i.catenate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = catenate &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_result
</UL>

<P><STRONG><a name="[3f6]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[40e]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_result
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate
</UL>

<P><STRONG><a name="[1]"></a>ft5336_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ft5336.o(i.ft5336_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ft5336_Init &rArr; ft5336_I2C_InitializeIfRequired &rArr; TS_IO_Init &rArr; I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Delay
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336_I2C_InitializeIfRequired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft5336.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>ft5336_ReadID</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ft5336.o(i.ft5336_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ft5336_ReadID &rArr; TS_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Read
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336_I2C_InitializeIfRequired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft5336.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>ft5336_Reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ft5336.o(i.ft5336_Reset))
<BR>[Address Reference Count : 1]<UL><LI> ft5336.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>ft5336_TS_ClearIT</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ft5336.o(i.ft5336_TS_ClearIT))
<BR>[Address Reference Count : 1]<UL><LI> ft5336.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>ft5336_TS_DetectTouch</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ft5336.o(i.ft5336_TS_DetectTouch))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ft5336_TS_DetectTouch &rArr; TS_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft5336.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>ft5336_TS_DisableIT</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ft5336.o(i.ft5336_TS_DisableIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ft5336_TS_DisableIT &rArr; TS_IO_Write &rArr; I2Cx_WriteMultiple &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336_TS_Start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft5336.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>ft5336_TS_EnableIT</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ft5336.o(i.ft5336_TS_EnableIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ft5336_TS_EnableIT &rArr; TS_IO_Write &rArr; I2Cx_WriteMultiple &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft5336.o(.data)
</UL>
<P><STRONG><a name="[2df]"></a>ft5336_TS_GetGestureID</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ft5336.o(i.ft5336_TS_GetGestureID))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ft5336_TS_GetGestureID &rArr; TS_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TS_Get_GestureId
</UL>

<P><STRONG><a name="[2dd]"></a>ft5336_TS_GetTouchInfo</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, ft5336.o(i.ft5336_TS_GetTouchInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ft5336_TS_GetTouchInfo &rArr; TS_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TS_GetState
</UL>

<P><STRONG><a name="[6]"></a>ft5336_TS_GetXY</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, ft5336.o(i.ft5336_TS_GetXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ft5336_TS_GetXY &rArr; TS_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft5336.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>ft5336_TS_ITStatus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ft5336.o(i.ft5336_TS_ITStatus))
<BR>[Address Reference Count : 1]<UL><LI> ft5336.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>ft5336_TS_Start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ft5336.o(i.ft5336_TS_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ft5336_TS_Start &rArr; ft5336_TS_DisableIT &rArr; TS_IO_Write &rArr; I2Cx_WriteMultiple &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336_TS_DisableIT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft5336.o(.data)
</UL>
<P><STRONG><a name="[8b]"></a>main</STRONG> (Thumb, 196 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = main &rArr; GRAPHICS_MainTask &rArr; BSP_TS_GetState &rArr; BSP_TS_Get_GestureId &rArr; ft5336_TS_GetGestureID &rArr; TS_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAPHICS_MainTask
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAPHICS_Init
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAPHICS_HW_Init
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPDIFRX_Init
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SAI2_Init
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ETH_Init
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DCMI_Init
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FATFS_Init
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[40d]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_result
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate
</UL>

<P><STRONG><a name="[401]"></a>operater_check</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, framewindlg.o(i.operater_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = operater_check
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
</UL>

<P><STRONG><a name="[40a]"></a>point</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, framewindlg.o(i.point))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = point
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust
</UL>

<P><STRONG><a name="[3f5]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[39e]"></a>I2Cx_Error</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32746g_discovery.o(i.I2Cx_Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = I2Cx_Error &rArr; HAL_I2C_DeInit &rArr; HAL_I2C_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_WriteMultiple
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_ReadMultiple
</UL>

<P><STRONG><a name="[39f]"></a>I2Cx_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stm32746g_discovery.o(i.I2Cx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetState
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Init
</UL>

<P><STRONG><a name="[3a1]"></a>I2Cx_MspInit</STRONG> (Thumb, 266 bytes, Stack size 48 bytes, stm32746g_discovery.o(i.I2Cx_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = I2Cx_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
</UL>

<P><STRONG><a name="[3a2]"></a>I2Cx_ReadMultiple</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, stm32746g_discovery.o(i.I2Cx_ReadMultiple))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Read
</UL>

<P><STRONG><a name="[3a3]"></a>I2Cx_WriteMultiple</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, stm32746g_discovery.o(i.I2Cx_WriteMultiple))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = I2Cx_WriteMultiple &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Write
</UL>

<P><STRONG><a name="[410]"></a>ft5336_I2C_InitializeIfRequired</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ft5336.o(i.ft5336_I2C_InitializeIfRequired))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ft5336_I2C_InitializeIfRequired &rArr; TS_IO_Init &rArr; I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336_ReadID
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336_Init
</UL>

<P><STRONG><a name="[3b0]"></a>MX_ADC3_Init</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, main.o(i.MX_ADC3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_ADC3_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3b2]"></a>MX_DCMI_Init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, main.o(i.MX_DCMI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_DCMI_Init &rArr; HAL_DCMI_Init &rArr; HAL_DCMI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3b3]"></a>MX_ETH_Init</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, main.o(i.MX_ETH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MX_ETH_Init &rArr; HAL_ETH_Init &rArr; HAL_ETH_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3b6]"></a>MX_GPIO_Init</STRONG> (Thumb, 618 bytes, Stack size 64 bytes, main.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3b8]"></a>MX_I2C1_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, main.o(i.MX_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_I2C1_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3bb]"></a>MX_I2C3_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, main.o(i.MX_I2C3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_I2C3_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3bc]"></a>MX_RTC_Init</STRONG> (Thumb, 178 bytes, Stack size 88 bytes, main.o(i.MX_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MX_RTC_Init &rArr; HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SetTimeStamp
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3be]"></a>MX_SAI2_Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, main.o(i.MX_SAI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MX_SAI2_Init &rArr; HAL_SAI_Init &rArr; HAL_SAI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3bf]"></a>MX_SPDIFRX_Init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, main.o(i.MX_SPDIFRX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_SPDIFRX_Init &rArr; HAL_SPDIFRX_Init &rArr; HAL_SPDIFRX_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPDIFRX_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c0]"></a>MX_SPI2_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, main.o(i.MX_SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c1]"></a>MX_TIM12_Init</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, main.o(i.MX_TIM12_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_TIM12_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c2]"></a>MX_TIM1_Init</STRONG> (Thumb, 164 bytes, Stack size 112 bytes, main.o(i.MX_TIM1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MX_TIM1_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakDeadTime
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c5]"></a>MX_TIM2_Init</STRONG> (Thumb, 112 bytes, Stack size 64 bytes, main.o(i.MX_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MX_TIM2_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c6]"></a>MX_TIM3_Init</STRONG> (Thumb, 110 bytes, Stack size 64 bytes, main.o(i.MX_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MX_TIM3_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c7]"></a>MX_TIM5_Init</STRONG> (Thumb, 110 bytes, Stack size 64 bytes, main.o(i.MX_TIM5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MX_TIM5_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c8]"></a>MX_TIM8_Init</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, main.o(i.MX_TIM8_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MX_TIM8_Init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c9]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3ca]"></a>MX_USART6_UART_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i.MX_USART6_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART6_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3da]"></a>SD_CheckStatus</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sd_diskio.o(i.SD_CheckStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SD_CheckStatus &rArr; BSP_SD_GetCardState &rArr; HAL_SD_GetCardState &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_status
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
</UL>

<P><STRONG><a name="[b7]"></a>_cbDialog</STRONG> (Thumb, 952 bytes, Stack size 16 bytes, framewindlg.o(i._cbDialog))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = _cbDialog &rArr; calculate_result &rArr; adjust &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetId
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetTextColor
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetText
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetFont
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetTextColor
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetTextAlign
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetText
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetFont
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetText
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operater_check
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_result
</UL>
<BR>[Address Reference Count : 1]<UL><LI> framewindlg.o(i.CreateFramewin)
</UL>
<P><STRONG><a name="[30a]"></a>HAL_FMC_MspInit</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, hw_init.o(i.HAL_FMC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_FMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_MspInit
</UL>

<P><STRONG><a name="[2e1]"></a>DMA2D_CopyBuffer</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, stemwin_wrapper.o(i.DMA2D_CopyBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2D_CopyBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_ExecOperation
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPixelformat
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LL_DrawBitmap16bpp
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LL_CopyRect
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LL_CopyBuffer
</UL>

<P><STRONG><a name="[2e4]"></a>DMA2D_CopyBufferWithAlpha</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, stemwin_wrapper.o(i.DMA2D_CopyBufferWithAlpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2D_CopyBufferWithAlpha
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_ExecOperation
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPixelformat
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LL_DrawBitmap32bpp
</UL>

<P><STRONG><a name="[3a4]"></a>GetBufferSize</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stemwin_wrapper.o(i.GetBufferSize))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LL_DrawBitmap16bpp
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LCD_DrawBitmapAlpha
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LL_FillRect
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LL_DrawBitmap8bpp
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LL_DrawBitmap32bpp
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LL_CopyRect
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LL_CopyBuffer
</UL>

<P><STRONG><a name="[2e3]"></a>GetPixelformat</STRONG> (Thumb, 224 bytes, Stack size 0 bytes, stemwin_wrapper.o(i.GetPixelformat))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LCD_DrawBitmapAlpha
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LL_FillRect
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LL_DrawBitmap8bpp
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_CopyBufferWithAlpha
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_CopyBuffer
</UL>

<P><STRONG><a name="[ba]"></a>LCD_LL_CopyBuffer</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, stemwin_wrapper.o(i.LCD_LL_CopyBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_LL_CopyBuffer &rArr; DMA2D_CopyBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBufferSize
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_CopyBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stemwin_wrapper.o(i.LCD_X_Config)
</UL>
<P><STRONG><a name="[bb]"></a>LCD_LL_CopyRect</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, stemwin_wrapper.o(i.LCD_LL_CopyRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_LL_CopyRect &rArr; DMA2D_CopyBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBufferSize
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_CopyBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stemwin_wrapper.o(i.LCD_X_Config)
</UL>
<P><STRONG><a name="[be]"></a>LCD_LL_DrawBitmap32bpp</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, stemwin_wrapper.o(i.LCD_LL_DrawBitmap32bpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_LL_DrawBitmap32bpp &rArr; DMA2D_CopyBufferWithAlpha
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBufferSize
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_CopyBufferWithAlpha
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stemwin_wrapper.o(i.LCD_X_Config)
</UL>
<P><STRONG><a name="[bc]"></a>LCD_LL_DrawBitmap8bpp</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, stemwin_wrapper.o(i.LCD_LL_DrawBitmap8bpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_LL_DrawBitmap8bpp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_ExecOperation
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPixelformat
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBufferSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stemwin_wrapper.o(i.LCD_X_Config)
</UL>
<P><STRONG><a name="[b9]"></a>LCD_LL_FillRect</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, stemwin_wrapper.o(i.LCD_LL_FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = LCD_LL_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDevFunc
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetDrawMode
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_ExecOperation
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPixelformat
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBufferSize
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stemwin_wrapper.o(i.LCD_LL_FillRect)
<LI> stemwin_wrapper.o(i.LCD_X_Config)
</UL>
<P><STRONG><a name="[b8]"></a>TransferComplete</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stemwin_wrapper.o(i.TransferComplete))
<BR>[Address Reference Count : 1]<UL><LI> stemwin_wrapper.o(i.DMA2D_Init)
</UL>
<P><STRONG><a name="[c0]"></a>_Color2IndexBulk_M1555I_DMA2D</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, stemwin_wrapper.o(i._Color2IndexBulk_M1555I_DMA2D))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _Color2IndexBulk_M1555I_DMA2D &rArr; _DMA_Color2IndexBulk &rArr; _DMA_ConvertColor
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_Color2IndexBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stemwin_wrapper.o(i.LCD_X_Config)
</UL>
<P><STRONG><a name="[c4]"></a>_Color2IndexBulk_M4444I_DMA2D</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, stemwin_wrapper.o(i._Color2IndexBulk_M4444I_DMA2D))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _Color2IndexBulk_M4444I_DMA2D &rArr; _DMA_Color2IndexBulk &rArr; _DMA_ConvertColor
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_Color2IndexBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stemwin_wrapper.o(i.LCD_X_Config)
</UL>
<P><STRONG><a name="[c2]"></a>_Color2IndexBulk_M565_DMA2D</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, stemwin_wrapper.o(i._Color2IndexBulk_M565_DMA2D))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _Color2IndexBulk_M565_DMA2D &rArr; _DMA_Color2IndexBulk &rArr; _DMA_ConvertColor
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_Color2IndexBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stemwin_wrapper.o(i.LCD_X_Config)
</UL>
<P><STRONG><a name="[c8]"></a>_Color2IndexBulk_M8888I_DMA2D</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, stemwin_wrapper.o(i._Color2IndexBulk_M8888I_DMA2D))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _Color2IndexBulk_M8888I_DMA2D &rArr; _DMA_Color2IndexBulk &rArr; _DMA_ConvertColor
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_Color2IndexBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stemwin_wrapper.o(i.LCD_X_Config)
</UL>
<P><STRONG><a name="[c6]"></a>_Color2IndexBulk_M888_DMA2D</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, stemwin_wrapper.o(i._Color2IndexBulk_M888_DMA2D))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _Color2IndexBulk_M888_DMA2D &rArr; _DMA_Color2IndexBulk &rArr; _DMA_ConvertColor
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_Color2IndexBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stemwin_wrapper.o(i.LCD_X_Config)
</UL>
<P><STRONG><a name="[3ea]"></a>_DMA_Color2IndexBulk</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stemwin_wrapper.o(i._DMA_Color2IndexBulk))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _DMA_Color2IndexBulk &rArr; _DMA_ConvertColor
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_ConvertColor
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Color2IndexBulk_M888_DMA2D
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Color2IndexBulk_M8888I_DMA2D
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Color2IndexBulk_M565_DMA2D
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Color2IndexBulk_M4444I_DMA2D
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Color2IndexBulk_M1555I_DMA2D
</UL>

<P><STRONG><a name="[3eb]"></a>_DMA_ConvertColor</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, stemwin_wrapper.o(i._DMA_ConvertColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _DMA_ConvertColor
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_ExecOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_Index2ColorBulk
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_Color2IndexBulk
</UL>

<P><STRONG><a name="[3ec]"></a>_DMA_DrawAlphaBitmap</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stemwin_wrapper.o(i._DMA_DrawAlphaBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _DMA_DrawAlphaBitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_ExecOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LCD_DrawMemdevAlpha
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LCD_DrawBitmapAlpha
</UL>

<P><STRONG><a name="[2e2]"></a>_DMA_ExecOperation</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stemwin_wrapper.o(i._DMA_ExecOperation))
<BR><BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_DrawAlphaBitmap
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_ConvertColor
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LL_FillRect
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LL_DrawBitmap8bpp
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_CopyBufferWithAlpha
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_CopyBuffer
</UL>

<P><STRONG><a name="[3ed]"></a>_DMA_Index2ColorBulk</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stemwin_wrapper.o(i._DMA_Index2ColorBulk))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DMA_Index2ColorBulk &rArr; _DMA_ConvertColor
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_ConvertColor
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Index2ColorBulk_M888_DMA2D
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Index2ColorBulk_M8888I_DMA2D
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Index2ColorBulk_M565_DMA2D
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Index2ColorBulk_M4444I_DMA2D
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Index2ColorBulk_M1555I_DMA2D
</UL>

<P><STRONG><a name="[bf]"></a>_Index2ColorBulk_M1555I_DMA2D</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, stemwin_wrapper.o(i._Index2ColorBulk_M1555I_DMA2D))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _Index2ColorBulk_M1555I_DMA2D &rArr; _DMA_Index2ColorBulk &rArr; _DMA_ConvertColor
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_Index2ColorBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stemwin_wrapper.o(i.LCD_X_Config)
</UL>
<P><STRONG><a name="[c3]"></a>_Index2ColorBulk_M4444I_DMA2D</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, stemwin_wrapper.o(i._Index2ColorBulk_M4444I_DMA2D))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _Index2ColorBulk_M4444I_DMA2D &rArr; _DMA_Index2ColorBulk &rArr; _DMA_ConvertColor
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_Index2ColorBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stemwin_wrapper.o(i.LCD_X_Config)
</UL>
<P><STRONG><a name="[c1]"></a>_Index2ColorBulk_M565_DMA2D</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, stemwin_wrapper.o(i._Index2ColorBulk_M565_DMA2D))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _Index2ColorBulk_M565_DMA2D &rArr; _DMA_Index2ColorBulk &rArr; _DMA_ConvertColor
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_Index2ColorBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stemwin_wrapper.o(i.LCD_X_Config)
</UL>
<P><STRONG><a name="[c7]"></a>_Index2ColorBulk_M8888I_DMA2D</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, stemwin_wrapper.o(i._Index2ColorBulk_M8888I_DMA2D))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _Index2ColorBulk_M8888I_DMA2D &rArr; _DMA_Index2ColorBulk &rArr; _DMA_ConvertColor
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_Index2ColorBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stemwin_wrapper.o(i.LCD_X_Config)
</UL>
<P><STRONG><a name="[c5]"></a>_Index2ColorBulk_M888_DMA2D</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, stemwin_wrapper.o(i._Index2ColorBulk_M888_DMA2D))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _Index2ColorBulk_M888_DMA2D &rArr; _DMA_Index2ColorBulk &rArr; _DMA_ConvertColor
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_Index2ColorBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stemwin_wrapper.o(i.LCD_X_Config)
</UL>
<P><STRONG><a name="[c9]"></a>_LCD_DrawBitmapAlpha</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, stemwin_wrapper.o(i._LCD_DrawBitmapAlpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _LCD_DrawBitmapAlpha &rArr; _DMA_DrawAlphaBitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_DrawAlphaBitmap
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPixelformat
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBufferSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stemwin_wrapper.o(i.LCD_X_Config)
</UL>
<P><STRONG><a name="[ca]"></a>_LCD_DrawMemdevAlpha</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, stemwin_wrapper.o(i._LCD_DrawMemdevAlpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _LCD_DrawMemdevAlpha &rArr; _DMA_DrawAlphaBitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_DrawAlphaBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stemwin_wrapper.o(i.LCD_X_Config)
</UL>
<P><STRONG><a name="[333]"></a>LTDC_SetConfig</STRONG> (Thumb, 464 bytes, Stack size 48 bytes, stm32f7xx_hal_ltdc.o(i.LTDC_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetWindowPosition
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetAlpha
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetAddress
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
</UL>

<P><STRONG><a name="[2f7]"></a>ADC_Init</STRONG> (Thumb, 298 bytes, Stack size 8 bytes, stm32f7xx_hal_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[342]"></a>__NVIC_SetPriority</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[2ea]"></a>ETH_MACDMAConfig</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f7xx_hal_eth.o(i.ETH_MACDMAConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ETH_MACDMAConfig &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[39d]"></a>I2C_Flush_TXDR</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f7xx_hal_i2c.o(i.I2C_Flush_TXDR))
<BR><BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>

<P><STRONG><a name="[39c]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, stm32f7xx_hal_i2c.o(i.I2C_IsAcknowledgeFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
</UL>

<P><STRONG><a name="[323]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, stm32f7xx_hal_i2c.o(i.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[327]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, stm32f7xx_hal_i2c.o(i.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[324]"></a>I2C_TransferConfig</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f7xx_hal_i2c.o(i.I2C_TransferConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[322]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, stm32f7xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[325]"></a>I2C_WaitOnSTOPFlagUntilTimeout</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f7xx_hal_i2c.o(i.I2C_WaitOnSTOPFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[328]"></a>I2C_WaitOnTXISFlagUntilTimeout</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f7xx_hal_i2c.o(i.I2C_WaitOnTXISFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[346]"></a>QSPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, stm32f7xx_hal_qspi.o(i.QSPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
</UL>

<P><STRONG><a name="[355]"></a>SAI_Disable</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f7xx_hal_sai.o(i.SAI_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SAI_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
</UL>

<P><STRONG><a name="[3cd]"></a>SDMMC_GetCmdResp1</STRONG> (Thumb, 276 bytes, Stack size 8 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_GetCmdResp1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>

<P><STRONG><a name="[3d5]"></a>SDMMC_GetCmdResp2</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_GetCmdResp2))
<BR><BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
</UL>

<P><STRONG><a name="[3cf]"></a>SDMMC_GetCmdResp3</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_GetCmdResp3))
<BR><BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
</UL>

<P><STRONG><a name="[3d9]"></a>SDMMC_GetCmdResp6</STRONG> (Thumb, 128 bytes, Stack size 12 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_GetCmdResp6))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SDMMC_GetCmdResp6 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
</UL>

<P><STRONG><a name="[3db]"></a>SD_FindSCR</STRONG> (Thumb, 214 bytes, Stack size 72 bytes, stm32f7xx_hal_sd.o(i.SD_FindSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SD_FindSCR &rArr; SDMMC_CmdSendSCR &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ReadFIFO
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigData
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
</UL>

<P><STRONG><a name="[368]"></a>SD_InitCard</STRONG> (Thumb, 230 bytes, Stack size 72 bytes, stm32f7xx_hal_sd.o(i.SD_InitCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = SD_InitCard &rArr; SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardCSD
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Init
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetPowerState
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[367]"></a>SD_PowerON</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, stm32f7xx_hal_sd.o(i.SD_PowerON))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SD_PowerON &rArr; SDMMC_CmdOperCond &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdGoIdleState
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[360]"></a>SD_WideBus_Disable</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f7xx_hal_sd.o(i.SD_WideBus_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SD_WideBus_Disable &rArr; SD_FindSCR &rArr; SDMMC_CmdSendSCR &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[35f]"></a>SD_WideBus_Enable</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f7xx_hal_sd.o(i.SD_WideBus_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdSendSCR &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[37c]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[388]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, stm32f7xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[38a]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, stm32f7xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[38b]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, stm32f7xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[38c]"></a>TIM_OC5_SetConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f7xx_hal_tim.o(i.TIM_OC5_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC5_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[38d]"></a>TIM_OC6_SetConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f7xx_hal_tim.o(i.TIM_OC6_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC6_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[37a]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[37b]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[313]"></a>HCD_HC_IN_IRQHandler</STRONG> (Thumb, 564 bytes, Stack size 40 bytes, stm32f7xx_hal_hcd.o(i.HCD_HC_IN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HCD_HC_IN_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_NotifyURBChange_Callback
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[314]"></a>HCD_HC_OUT_IRQHandler</STRONG> (Thumb, 574 bytes, Stack size 32 bytes, stm32f7xx_hal_hcd.o(i.HCD_HC_OUT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HCD_HC_OUT_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_NotifyURBChange_Callback
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[310]"></a>HCD_Port_IRQHandler</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, stm32f7xx_hal_hcd.o(i.HCD_Port_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HCD_Port_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_PortEnabled_Callback
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_PortDisabled_Callback
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Connect_Callback
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_InitFSLSPClkSel
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[315]"></a>HCD_RXQLVL_IRQHandler</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, stm32f7xx_hal_hcd.o(i.HCD_RXQLVL_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HCD_RXQLVL_IRQHandler &rArr; USB_ReadPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[3e6]"></a>USB_CoreReset</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f7xx_ll_usb.o(i.USB_CoreReset))
<BR><BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
</UL>

<P><STRONG><a name="[d5]"></a>_Color2Index_1616I</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, GUICC_1616I.o(.text._Color2Index_1616I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_1616I.o(.rodata)
</UL>
<P><STRONG><a name="[d6]"></a>_Index2Color_1616I</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, GUICC_1616I.o(.text._Index2Color_1616I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_1616I.o(.rodata)
</UL>
<P><STRONG><a name="[d7]"></a>_GetIndexMask_1616I</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, GUICC_1616I.o(.text._GetIndexMask_1616I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_1616I.o(.rodata)
</UL>
<P><STRONG><a name="[d8]"></a>_Color2IndexBulk_1616I</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, GUICC_1616I.o(.text._Color2IndexBulk_1616I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_1616I.o(.rodata)
</UL>
<P><STRONG><a name="[d9]"></a>_Index2ColorBulk_1616I</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, GUICC_1616I.o(.text._Index2ColorBulk_1616I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_1616I.o(.rodata)
</UL>
<P><STRONG><a name="[da]"></a>_Color2Index_822216</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, GUICC_822216.o(.text._Color2Index_822216))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_822216.o(.rodata)
</UL>
<P><STRONG><a name="[db]"></a>_Index2Color_822216</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, GUICC_822216.o(.text._Index2Color_822216))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_822216.o(.rodata)
</UL>
<P><STRONG><a name="[dc]"></a>_GetIndexMask_822216</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, GUICC_822216.o(.text._GetIndexMask_822216))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_822216.o(.rodata)
</UL>
<P><STRONG><a name="[dd]"></a>_Color2Index_84444</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, GUICC_84444.o(.text._Color2Index_84444))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_84444.o(.rodata)
</UL>
<P><STRONG><a name="[df]"></a>_GetIndexMask_84444</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, GUICC_84444.o(.text._GetIndexMask_84444))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_84444.o(.rodata)
</UL>
<P><STRONG><a name="[de]"></a>_Index2Color_84444</STRONG> (Thumb, 118 bytes, Stack size unknown bytes, GUICC_84444.o(.text._Index2Color_84444))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_84444.o(.rodata)
</UL>
<P><STRONG><a name="[e2]"></a>_GetIndexMask_8666</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, GUICC_8666.o(.text._GetIndexMask_8666))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_8666.o(.rodata)
</UL>
<P><STRONG><a name="[e5]"></a>_GetIndexMask_8666_1</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, GUICC_8666_1.o(.text._GetIndexMask_8666_1))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_8666_1.o(.rodata)
</UL>
<P><STRONG><a name="[e3]"></a>_Color2Index_8666_1</STRONG> (Thumb, 120 bytes, Stack size unknown bytes, GUICC_8666_1.o(.text._Color2Index_8666_1))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_8666_1.o(.rodata)
</UL>
<P><STRONG><a name="[e4]"></a>_Index2Color_8666_1</STRONG> (Thumb, 144 bytes, Stack size unknown bytes, GUICC_8666_1.o(.text._Index2Color_8666_1))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_8666_1.o(.rodata)
</UL>
<P><STRONG><a name="[e6]"></a>_Color2Index_88666I</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, GUICC_88666I.o(.text._Color2Index_88666I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_88666I.o(.rodata)
</UL>
<P><STRONG><a name="[e7]"></a>_Index2Color_88666I</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, GUICC_88666I.o(.text._Index2Color_88666I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_88666I.o(.rodata)
</UL>
<P><STRONG><a name="[e8]"></a>_GetIndexMask_88666I</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, GUICC_88666I.o(.text._GetIndexMask_88666I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_88666I.o(.rodata)
</UL>
<P><STRONG><a name="[e9]"></a>_Color2IndexBulk_88666I</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, GUICC_88666I.o(.text._Color2IndexBulk_88666I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_88666I.o(.rodata)
</UL>
<P><STRONG><a name="[ea]"></a>_Index2ColorBulk_88666I</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, GUICC_88666I.o(.text._Index2ColorBulk_88666I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_88666I.o(.rodata)
</UL>
<P><STRONG><a name="[eb]"></a>_Color2Index_M1555I</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, GUICC_M1555I.o(.text._Color2Index_M1555I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M1555I.o(.rodata)
</UL>
<P><STRONG><a name="[ec]"></a>_Index2Color_M1555I</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, GUICC_M1555I.o(.text._Index2Color_M1555I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M1555I.o(.rodata)
</UL>
<P><STRONG><a name="[ed]"></a>_GetIndexMask_M1555I</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, GUICC_M1555I.o(.text._GetIndexMask_M1555I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M1555I.o(.rodata)
</UL>
<P><STRONG><a name="[ee]"></a>_Color2IndexBulk_M1555I</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, GUICC_M1555I.o(.text._Color2IndexBulk_M1555I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M1555I.o(.rodata)
</UL>
<P><STRONG><a name="[ef]"></a>_Index2ColorBulk_M1555I</STRONG> (Thumb, 108 bytes, Stack size unknown bytes, GUICC_M1555I.o(.text._Index2ColorBulk_M1555I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M1555I.o(.rodata)
</UL>
<P><STRONG><a name="[f0]"></a>_Color2Index_M4444I</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, GUICC_M4444I.o(.text._Color2Index_M4444I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M4444I.o(.rodata)
</UL>
<P><STRONG><a name="[f1]"></a>_Index2Color_M4444I</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, GUICC_M4444I.o(.text._Index2Color_M4444I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M4444I.o(.rodata)
</UL>
<P><STRONG><a name="[f2]"></a>_GetIndexMask_M4444I</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, GUICC_M4444I.o(.text._GetIndexMask_M4444I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M4444I.o(.rodata)
</UL>
<P><STRONG><a name="[f3]"></a>_Color2IndexBulk_M4444I</STRONG> (Thumb, 128 bytes, Stack size unknown bytes, GUICC_M4444I.o(.text._Color2IndexBulk_M4444I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M4444I.o(.rodata)
</UL>
<P><STRONG><a name="[f4]"></a>_Index2ColorBulk_M4444I</STRONG> (Thumb, 108 bytes, Stack size unknown bytes, GUICC_M4444I.o(.text._Index2ColorBulk_M4444I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M4444I.o(.rodata)
</UL>
<P><STRONG><a name="[f5]"></a>_Color2Index_M8888I</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, GUICC_M8888I.o(.text._Color2Index_M8888I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M8888I.o(.rodata)
</UL>
<P><STRONG><a name="[f6]"></a>_GetIndexMask_M8888I</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, GUICC_M8888I.o(.text._GetIndexMask_M8888I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M8888I.o(.rodata)
</UL>
<P><STRONG><a name="[f7]"></a>_Color2IndexBulk_M8888I</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, GUICC_M8888I.o(.text._Color2IndexBulk_M8888I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M8888I.o(.rodata)
</UL>
<P><STRONG><a name="[f8]"></a>_Index2ColorBulk_M8888I</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, GUICC_M8888I.o(.text._Index2ColorBulk_M8888I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M8888I.o(.rodata)
</UL>
<P><STRONG><a name="[f9]"></a>_Color2Index_565</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, GUICC_565.o(.text._Color2Index_565))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_565.o(.rodata)
</UL>
<P><STRONG><a name="[fb]"></a>_GetIndexMask_565</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, GUICC_565.o(.text._GetIndexMask_565))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_565.o(.rodata)
</UL>
<P><STRONG><a name="[fc]"></a>_Color2IndexBulk</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, GUICC_565.o(.text._Color2IndexBulk))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_565.o(.rodata)
</UL>
<P><STRONG><a name="[fd]"></a>_Index2ColorBulk</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, GUICC_565.o(.text._Index2ColorBulk))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_565.o(.rodata)
</UL>
<P><STRONG><a name="[fe]"></a>_Color2Index_888</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, GUICC_888.o(.text._Color2Index_888))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_888.o(.rodata)
</UL>
<P><STRONG><a name="[100]"></a>_GetIndexMask_888</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, GUICC_888.o(.text._GetIndexMask_888))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_888.o(.rodata)
</UL>
<P><STRONG><a name="[101]"></a>_Color2IndexBulk</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, GUICC_888.o(.text._Color2IndexBulk))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_888.o(.rodata)
</UL>
<P><STRONG><a name="[102]"></a>_Index2ColorBulk</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, GUICC_888.o(.text._Index2ColorBulk))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_888.o(.rodata)
</UL>
<P><STRONG><a name="[103]"></a>_Color2Index_8888</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, GUICC_8888.o(.text._Color2Index_8888))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_8888.o(.rodata)
</UL>
<P><STRONG><a name="[105]"></a>_GetIndexMask_8888</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, GUICC_8888.o(.text._GetIndexMask_8888))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_8888.o(.rodata)
</UL>
<P><STRONG><a name="[106]"></a>_Color2IndexBulk</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, GUICC_8888.o(.text._Color2IndexBulk))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_8888.o(.rodata)
</UL>
<P><STRONG><a name="[107]"></a>_Index2ColorBulk</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, GUICC_8888.o(.text._Index2ColorBulk))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_8888.o(.rodata)
</UL>
<P><STRONG><a name="[108]"></a>_Color2Index_M565</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, GUICC_M565.o(.text._Color2Index_M565))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M565.o(.rodata)
</UL>
<P><STRONG><a name="[10a]"></a>_GetIndexMask_M565</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, GUICC_M565.o(.text._GetIndexMask_M565))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M565.o(.rodata)
</UL>
<P><STRONG><a name="[10b]"></a>_Color2IndexBulk</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, GUICC_M565.o(.text._Color2IndexBulk))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M565.o(.rodata)
</UL>
<P><STRONG><a name="[10c]"></a>_Index2ColorBulk</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, GUICC_M565.o(.text._Index2ColorBulk))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M565.o(.rodata)
</UL>
<P><STRONG><a name="[10d]"></a>_Color2Index_M888</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, GUICC_M888.o(.text._Color2Index_M888))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M888.o(.rodata)
</UL>
<P><STRONG><a name="[10e]"></a>_GetIndexMask_M888</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, GUICC_M888.o(.text._GetIndexMask_M888))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M888.o(.rodata)
</UL>
<P><STRONG><a name="[10f]"></a>_Color2IndexBulk</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, GUICC_M888.o(.text._Color2IndexBulk))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M888.o(.rodata)
</UL>
<P><STRONG><a name="[110]"></a>_Index2ColorBulk</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, GUICC_M888.o(.text._Index2ColorBulk))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M888.o(.rodata)
</UL>
<P><STRONG><a name="[111]"></a>_Color2Index_M8888</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, GUICC_M8888.o(.text._Color2Index_M8888))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M8888.o(.rodata)
</UL>
<P><STRONG><a name="[113]"></a>_GetIndexMask_M8888</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, GUICC_M8888.o(.text._GetIndexMask_M8888))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M8888.o(.rodata)
</UL>
<P><STRONG><a name="[114]"></a>_Color2IndexBulk</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, GUICC_M8888.o(.text._Color2IndexBulk))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M8888.o(.rodata)
</UL>
<P><STRONG><a name="[115]"></a>_Index2ColorBulk</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, GUICC_M8888.o(.text._Index2ColorBulk))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M8888.o(.rodata)
</UL>
<P><STRONG><a name="[112]"></a>_Index2Color_M8888</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, GUICC_M8888.o(.text._Index2Color_M8888))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M8888.o(.rodata)
</UL>
<P><STRONG><a name="[1d1]"></a>_AddFreeMemory</STRONG> (Thumb, 860 bytes, Stack size unknown bytes, GUI_Alloc.o(.text._AddFreeMemory))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Realloc
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreePtrArray
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreePtr
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_RequestSize
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetMaxSize
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHoles
</UL>

<P><STRONG><a name="[1d4]"></a>_RemoveHoles</STRONG> (Thumb, 432 bytes, Stack size unknown bytes, GUI_Alloc.o(.text._RemoveHoles))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = _RemoveHoles &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memmove
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>

<P><STRONG><a name="[1ce]"></a>_Alloc</STRONG> (Thumb, 882 bytes, Stack size unknown bytes, GUI_Alloc.o(.text._Alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = _Alloc &rArr; _RemoveHoles &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHoles
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Realloc
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
</UL>

<P><STRONG><a name="[1d3]"></a>_EnlargeBlocks</STRONG> (Thumb, 216 bytes, Stack size unknown bytes, GUI_Alloc.o(.text._EnlargeBlocks))
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_RequestSize
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetMaxSize
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>

<P><STRONG><a name="[207]"></a>_InitContext</STRONG> (Thumb, 128 bytes, Stack size unknown bytes, GUI_Core.o(.text._InitContext))
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDesktopWindow
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[98]"></a>_OnExit</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, GUI_Core.o(.text._OnExit))
<BR>[Address Reference Count : 1]<UL><LI> GUI_Core.o(.text.GUI__Config)
</UL>
<P><STRONG><a name="[96]"></a>_OnExit</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, GUI_PID.o(.text._OnExit))
<BR>[Address Reference Count : 1]<UL><LI> GUI_PID.o(.text.GUI_PID_StoreState)
</UL>
<P><STRONG><a name="[97]"></a>_OnExit</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, GUI__Alpha.o(.text._OnExit))
<BR><BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreeFixedBlock
</UL>
<BR>[Address Reference Count : 2]<UL><LI> GUI__Alpha.o(.text.GUI__DoAlphaBlending)
<LI> GUI__Alpha.o(.text.GUI__AllocAlphaBuffer)
</UL>
<P><STRONG><a name="[119]"></a>_SetBkColor</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, LCD.o(.text._SetBkColor))
<BR>[Address Reference Count : 1]<UL><LI> LCD.o(.rodata)
</UL>
<P><STRONG><a name="[118]"></a>_SetColor</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, LCD.o(.text._SetColor))
<BR>[Address Reference Count : 1]<UL><LI> LCD.o(.rodata)
</UL>
<P><STRONG><a name="[11a]"></a>_SetDrawMode</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, LCD.o(.text._SetDrawMode))
<BR>[Address Reference Count : 1]<UL><LI> LCD.o(.rodata)
</UL>
<P><STRONG><a name="[126]"></a>_GetRect</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._GetRect))
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.rodata)
</UL>
<P><STRONG><a name="[120]"></a>_SetPixelIndex</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._SetPixelIndex))
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.rodata)
</UL>
<P><STRONG><a name="[11f]"></a>_GetPixelIndex</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._GetPixelIndex))
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.rodata)
</UL>
<P><STRONG><a name="[121]"></a>_XorPixel</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._XorPixel))
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.rodata)
</UL>
<P><STRONG><a name="[124]"></a>_GetDevProp</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._GetDevProp))
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.rodata)
</UL>
<P><STRONG><a name="[125]"></a>_GetDevData</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._GetDevData))
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.rodata)
</UL>
<P><STRONG><a name="[a8]"></a>_ReadRect</STRONG> (Thumb, 200 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._ReadRect))
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[123]"></a>_GetDevFunc</STRONG> (Thumb, 232 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._GetDevFunc))
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.rodata)
</UL>
<P><STRONG><a name="[a3]"></a>_SetVRAMAddr</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._SetVRAMAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _SetVRAMAddr &rArr; LCD_X_DisplayDriver &rArr; HAL_LTDC_SetWindowPosition &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[a4]"></a>_SetVis</STRONG> (Thumb, 62 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._SetVis))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _SetVis &rArr; LCD_X_DisplayDriver &rArr; HAL_LTDC_SetWindowPosition &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[a5]"></a>_GetPos</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._GetPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = _GetPos &rArr; GUI__memset &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[a6]"></a>_SetPos</STRONG> (Thumb, 376 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._SetPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _SetPos &rArr; LCD_X_DisplayDriver &rArr; HAL_LTDC_SetWindowPosition &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSizeDisplay
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSizeDisplay
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[a7]"></a>_SetAlpha</STRONG> (Thumb, 62 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._SetAlpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _SetAlpha &rArr; LCD_X_DisplayDriver &rArr; HAL_LTDC_SetWindowPosition &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[a9]"></a>_SetVRAM_BufferPTR</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._SetVRAM_BufferPTR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = _SetVRAM_BufferPTR &rArr; GUI__memset &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[aa]"></a>_ShowBuffer</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._ShowBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _ShowBuffer &rArr; LCD_X_DisplayDriver &rArr; HAL_LTDC_SetWindowPosition &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[ab]"></a>_CopyBuffer</STRONG> (Thumb, 132 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._CopyBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = _CopyBuffer &rArr; GUI__memset &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[ac]"></a>_SetDevFunc</STRONG> (Thumb, 110 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._SetDevFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = _SetDevFunc &rArr; GUI__memset &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[ad]"></a>_SetChroma</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._SetChroma))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _SetChroma &rArr; LCD_X_DisplayDriver &rArr; HAL_LTDC_SetWindowPosition &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[ae]"></a>_SetChromaMode</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._SetChromaMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _SetChromaMode &rArr; LCD_X_DisplayDriver &rArr; HAL_LTDC_SetWindowPosition &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[af]"></a>_SetAlphaMode</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._SetAlphaMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _SetAlphaMode &rArr; LCD_X_DisplayDriver &rArr; HAL_LTDC_SetWindowPosition &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[b0]"></a>_Off</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _Off &rArr; LCD_X_DisplayDriver &rArr; HAL_LTDC_SetWindowPosition &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[b1]"></a>_On</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._On))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _On &rArr; LCD_X_DisplayDriver &rArr; HAL_LTDC_SetWindowPosition &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[b2]"></a>_Init</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _Init &rArr; LCD_X_DisplayDriver &rArr; HAL_LTDC_SetWindowPosition &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[b3]"></a>_SetSize</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._SetSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _SetSize &rArr; LCD_X_DisplayDriver &rArr; HAL_LTDC_SetWindowPosition &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetSwapXYEx
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[b4]"></a>_SetVSize</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._SetVSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = _SetVSize &rArr; GUI__memset &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetSwapXYEx
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[122]"></a>_SetOrg</STRONG> (Thumb, 206 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._SetOrg))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _SetOrg &rArr; LCD_X_DisplayDriver &rArr; HAL_LTDC_SetWindowPosition &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetSwapXYEx
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetMirrorYEx
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetMirrorXEx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.rodata)
</UL>
<P><STRONG><a name="[11e]"></a>_FillRect</STRONG> (Thumb, 636 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._FillRect))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawHLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.rodata)
</UL>
<P><STRONG><a name="[11c]"></a>_DrawHLine</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._DrawHLine))
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.rodata)
</UL>
<P><STRONG><a name="[11d]"></a>_DrawVLine</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._DrawVLine))
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.rodata)
</UL>
<P><STRONG><a name="[11b]"></a>_DrawBitmap</STRONG> (Thumb, 1828 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._DrawBitmap))
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.rodata)
</UL>
<P><STRONG><a name="[a0]"></a>_OnExit</STRONG> (Thumb, 160 bytes, Stack size unknown bytes, WM.o(.text._OnExit))
<BR>[Address Reference Count : 1]<UL><LI> WM.o(.text.WM_Init)
</UL>
<P><STRONG><a name="[2c6]"></a>_Findy1</STRONG> (Thumb, 206 bytes, Stack size unknown bytes, WM.o(.text._Findy1))
<BR><BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1.constprop.11
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
</UL>

<P><STRONG><a name="[2c5]"></a>_Findx0</STRONG> (Thumb, 164 bytes, Stack size unknown bytes, WM.o(.text._Findx0))
<BR><BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0.constprop.10
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
</UL>

<P><STRONG><a name="[2be]"></a>_Findx1</STRONG> (Thumb, 142 bytes, Stack size unknown bytes, WM.o(.text._Findx1))
<BR><BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
</UL>

<P><STRONG><a name="[2c1]"></a>_Paint1Trans</STRONG> (Thumb, 192 bytes, Stack size unknown bytes, WM.o(.text._Paint1Trans))
<BR><BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
</UL>

<P><STRONG><a name="[2c0]"></a>_PaintTransChildren</STRONG> (Thumb, 214 bytes, Stack size unknown bytes, WM.o(.text._PaintTransChildren))
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1Trans
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
</UL>

<P><STRONG><a name="[2bd]"></a>_Findx0.constprop.10</STRONG> (Thumb, 140 bytes, Stack size unknown bytes, WM.o(.text._Findx0.constprop.10))
<BR><BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
</UL>

<P><STRONG><a name="[2bf]"></a>_Findy1.constprop.11</STRONG> (Thumb, 168 bytes, Stack size unknown bytes, WM.o(.text._Findy1.constprop.11))
<BR><BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
</UL>

<P><STRONG><a name="[296]"></a>WM__PaintWinAndOverlays</STRONG> (Thumb, 160 bytes, Stack size unknown bytes, WM.o(.text.WM__PaintWinAndOverlays))
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1Trans
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbPaintMemDev
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
</UL>

<P><STRONG><a name="[9e]"></a>_cbPaintMemDev</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, WM.o(.text._cbPaintMemDev))
<BR><BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> WM.o(.text.WM_Exec)
</UL>
<P><STRONG><a name="[2a7]"></a>_Invalidate1Abs</STRONG> (Thumb, 228 bytes, Stack size unknown bytes, WM.o(.text._Invalidate1Abs))
<BR><BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SignalEvent
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MergeRect
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateParent
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect.part.2
</UL>

<P><STRONG><a name="[28e]"></a>WM_InvalidateRect.part.2</STRONG> (Thumb, 212 bytes, Stack size unknown bytes, WM.o(.text.WM_InvalidateRect.part.2))
<BR><BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBackWin
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
</UL>

<P><STRONG><a name="[9f]"></a>_cbBackWin</STRONG> (Thumb, 176 bytes, Stack size unknown bytes, WM.o(.text._cbBackWin))
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_StoreKey
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectEx
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect.part.2
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> WM.o(.text.WM_Init)
</UL>
<P><STRONG><a name="[291]"></a>WM_DeleteWindow.part.3</STRONG> (Thumb, 560 bytes, Stack size unknown bytes, WM.o(.text.WM_DeleteWindow.part.3))
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow.part.3
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Exec1Input
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow.part.3
</UL>

<P><STRONG><a name="[294]"></a>_Exec1Input</STRONG> (Thumb, 140 bytes, Stack size unknown bytes, WM.o(.text._Exec1Input))
<BR><BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PollKeyMsg
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow.part.3
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
</UL>

<P><STRONG><a name="[2b1]"></a>WM_ResizeWindow.part.11</STRONG> (Thumb, 246 bytes, Stack size unknown bytes, WM_Lib.o(.text.WM_ResizeWindow.part.11))
<BR><BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__UpdateChildPositions
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMsgNoData
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MergeRect
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
</UL>

<P><STRONG><a name="[2a9]"></a>WM_InvalidateWindowAndDescs.part.14</STRONG> (Thumb, 172 bytes, Stack size unknown bytes, WM_Lib.o(.text.WM_InvalidateWindowAndDescs.part.14))
<BR><BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescs.part.14
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ShowWindow
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescs.part.14
</UL>

<P><STRONG><a name="[2c9]"></a>_GetDialogItem.part.5</STRONG> (Thumb, 504 bytes, Stack size unknown bytes, WM_Lib.o(.text._GetDialogItem.part.5))
<BR><BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDialogItem.part.5
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDialogItem
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDialogItem.part.5
</UL>

<P><STRONG><a name="[2c8]"></a>_GetDialogItem</STRONG> (Thumb, 78 bytes, Stack size unknown bytes, WM_Lib.o(.text._GetDialogItem))
<BR><BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDialogItem.part.5
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GetDialogItem
</UL>

<P><STRONG><a name="[29a]"></a>__GetDialogItem</STRONG> (Thumb, 176 bytes, Stack size unknown bytes, WM_Lib.o(.text.__GetDialogItem))
<BR><BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDialogItem
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
</UL>

<P><STRONG><a name="[e]"></a>_OnTouchDefault</STRONG> (Thumb, 188 bytes, Stack size unknown bytes, BUTTON.o(.text._OnTouchDefault))
<BR><BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_OrState
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_AndState
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_StoreKey
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> BUTTON.o(.data)
</UL>
<P><STRONG><a name="[196]"></a>_Paint</STRONG> (Thumb, 740 bytes, Stack size unknown bytes, EDIT.o(.text._Paint))
<BR><BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetCursorCharacter
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_RestartTimer
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__EFFECT_DrawDown
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__FillStringInRect
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetCursorPosX
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetNumChars
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CalcTextRect
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__GetInsideRect
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsEnabled
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__InvertRectColors
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
</UL>

<P><STRONG><a name="[1a8]"></a>EDIT_SetText.part.5</STRONG> (Thumb, 416 bytes, Stack size unknown bytes, EDIT.o(.text.EDIT_SetText.part.5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetNumChars
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__NumChars2NumBytes
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Realloc
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreePtr
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>

<P><STRONG><a name="[94]"></a>FRAMEWIN__cbClient</STRONG> (Thumb, 252 bytes, Stack size unknown bytes, FRAMEWIN.o(.text.FRAMEWIN__cbClient))
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnNextChild
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnPrevChild
</UL>
<BR>[Address Reference Count : 1]<UL><LI> FRAMEWIN.o(.text.FRAMEWIN_CreateIndirect)
</UL>
<P><STRONG><a name="[12b]"></a>_Color2Index_16</STRONG> (Thumb, 102 bytes, Stack size unknown bytes, GUICC_16.o(.text._Color2Index_16))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_16.o(.rodata)
</UL>
<P><STRONG><a name="[12c]"></a>_Index2Color_16</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, GUICC_16.o(.text._Index2Color_16))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_16.o(.rodata)
</UL>
<P><STRONG><a name="[12d]"></a>_GetIndexMask_16</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, GUICC_16.o(.text._GetIndexMask_16))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_16.o(.rodata)
</UL>
<P><STRONG><a name="[12]"></a>_Log2VisBuffered</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, GUI_CharLine.o(.text._Log2VisBuffered))
<BR>[Address Reference Count : 1]<UL><LI> GUI_CharLine.o(.data)
</UL>
<P><STRONG><a name="[25a]"></a>_DispLine</STRONG> (Thumb, 156 bytes, Stack size unknown bytes, GUI_CharLine.o(.text._DispLine))
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ManageCache
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
</UL>

<P><STRONG><a name="[1eb]"></a>GUI_DispString.part.0</STRONG> (Thumb, 300 bytes, Stack size unknown bytes, GUI_DispString.o(.text.GUI_DispString.part.0))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__NumChars2NumBytes
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineNumChars
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetYAdjust
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
</UL>

<P><STRONG><a name="[1f6]"></a>GUI_DispStringInRectWrap.part.1</STRONG> (Thumb, 400 bytes, Stack size unknown bytes, GUI_DispString.o(.text.GUI_DispStringInRectWrap.part.1))
<BR><BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__WrapGetNumCharsDisp
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__WrapGetNumBytesToNextLine
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
</UL>

<P><STRONG><a name="[12e]"></a>_GetCharCode</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, GUI_UC_EncodeNone.o(.text._GetCharCode))
<BR>[Address Reference Count : 1]<UL><LI> GUI_UC_EncodeNone.o(.rodata)
</UL>
<P><STRONG><a name="[12f]"></a>_GetCharSize</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, GUI_UC_EncodeNone.o(.text._GetCharSize))
<BR>[Address Reference Count : 1]<UL><LI> GUI_UC_EncodeNone.o(.rodata)
</UL>
<P><STRONG><a name="[130]"></a>_CalcSizeOfChar</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, GUI_UC_EncodeNone.o(.text._CalcSizeOfChar))
<BR>[Address Reference Count : 1]<UL><LI> GUI_UC_EncodeNone.o(.rodata)
</UL>
<P><STRONG><a name="[131]"></a>_Encode</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, GUI_UC_EncodeNone.o(.text._Encode))
<BR>[Address Reference Count : 1]<UL><LI> GUI_UC_EncodeNone.o(.rodata)
</UL>
<P><STRONG><a name="[13]"></a>_GetCursorPosX</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, GUI__GetCursorPos.o(.text._GetCursorPosX))
<BR><BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI__GetCursorPos.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>_GetCursorCharacter</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, GUI__GetCursorPos.o(.text._GetCursorCharacter))
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_GetCharCode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI__GetCursorPos.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>_GetCursorPosChar</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, GUI__GetCursorPos.o(.text._GetCursorPosChar))
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_GetCharSize
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_GetCharCode
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__NumBytes2NumChars
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI__GetCursorPos.o(.data)
</UL>
<P><STRONG><a name="[9b]"></a>_OnExit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, LCD_Color.o(.text._OnExit))
<BR><BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreeFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> LCD_Color.o(.text.LCD_InitColors)
</UL>
<P><STRONG><a name="[242]"></a>LCD_ReadRectEx</STRONG> (Thumb, 544 bytes, Stack size unknown bytes, LCD_ReadRect.o(.text.LCD_ReadRectEx))
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBitsPerPixelEx
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ReadRectEx
</UL>

<P><STRONG><a name="[212]"></a>GUI_MEMDEV_CopyToLCDAt.part.0</STRONG> (Thumb, 252 bytes, Stack size unknown bytes, GUIDEV.o(.text.GUI_MEMDEV_CopyToLCDAt.part.0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_CopyToLCDAt.part.0 &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _RemoveHoles &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Deactivate
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Link
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDrawMode
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Activate
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCD
</UL>

<P><STRONG><a name="[140]"></a>_GetDevData</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, GUIDEV_16.o(.text._GetDevData))
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_16.o(.rodata)
</UL>
<P><STRONG><a name="[13e]"></a>_GetDevFunc</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, GUIDEV_16.o(.text._GetDevFunc))
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_16.o(.rodata)
</UL>
<P><STRONG><a name="[13d]"></a>_SetOrg</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, GUIDEV_16.o(.text._SetOrg))
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_16.o(.rodata)
</UL>
<P><STRONG><a name="[141]"></a>_GetRect</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, GUIDEV_16.o(.text._GetRect))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_16.o(.rodata)
</UL>
<P><STRONG><a name="[136]"></a>_DrawBitmap</STRONG> (Thumb, 2616 bytes, Stack size unknown bytes, GUIDEV_16.o(.text._DrawBitmap))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_AddRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_16.o(.rodata)
</UL>
<P><STRONG><a name="[13f]"></a>_GetDevProp</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, GUIDEV_16.o(.text._GetDevProp))
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_16.o(.rodata)
</UL>
<P><STRONG><a name="[13a]"></a>_GetPixelIndex</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, GUIDEV_16.o(.text._GetPixelIndex))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_16.o(.rodata)
</UL>
<P><STRONG><a name="[13b]"></a>_SetPixelIndex</STRONG> (Thumb, 120 bytes, Stack size unknown bytes, GUIDEV_16.o(.text._SetPixelIndex))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_16.o(.rodata)
</UL>
<P><STRONG><a name="[13c]"></a>_XorPixel</STRONG> (Thumb, 132 bytes, Stack size unknown bytes, GUIDEV_16.o(.text._XorPixel))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_16.o(.rodata)
</UL>
<P><STRONG><a name="[139]"></a>_FillRect</STRONG> (Thumb, 372 bytes, Stack size unknown bytes, GUIDEV_16.o(.text._FillRect))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_AddRect
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset16
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawHLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_16.o(.rodata)
</UL>
<P><STRONG><a name="[137]"></a>_DrawHLine</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, GUIDEV_16.o(.text._DrawHLine))
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_16.o(.rodata)
</UL>
<P><STRONG><a name="[138]"></a>_DrawVLine</STRONG> (Thumb, 232 bytes, Stack size unknown bytes, GUIDEV_16.o(.text._DrawVLine))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_16.o(.rodata)
</UL>
<P><STRONG><a name="[9d]"></a>_cbInvalidateOne</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, WM_BringToTop.o(.text._cbInvalidateOne))
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> WM_BringToTop.o(.text.WM_BringToTop)
</UL>
<P><STRONG><a name="[2ae]"></a>_MoveDescendents</STRONG> (Thumb, 598 bytes, Stack size unknown bytes, WM_Move.o(.text._MoveDescendents))
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveWindow
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
</UL>

<P><STRONG><a name="[19]"></a>_Create</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, BUTTON_Skin.o(.text._Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = _Create &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> BUTTON_Skin.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>_Paint</STRONG> (Thumb, 134 bytes, Stack size unknown bytes, BUTTON_Skin.o(.text._Paint))
<BR><BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeX
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeY
</UL>
<BR>[Address Reference Count : 1]<UL><LI> BUTTON_Skin.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>_GetBorderSize</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, FRAMEWIN_Skin.o(.text._GetBorderSize))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> FRAMEWIN_Skin.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>_Create</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, FRAMEWIN_Skin.o(.text._Create))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> FRAMEWIN_Skin.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>_Paint</STRONG> (Thumb, 402 bytes, Stack size unknown bytes, FRAMEWIN_Skin.o(.text._Paint))
<BR><BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeX
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeY
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__GetTitleLimits
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__CalcTitleHeight
</UL>
<BR>[Address Reference Count : 1]<UL><LI> FRAMEWIN_Skin.o(.data)
</UL>
<P><STRONG><a name="[144]"></a>_GetIndexMask_0</STRONG> (Thumb, 74 bytes, Stack size unknown bytes, GUICC_0.o(.text._GetIndexMask_0))
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUICC_0.o(.rodata)
</UL>
<P><STRONG><a name="[143]"></a>_Index2Color_0</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, GUICC_0.o(.text._Index2Color_0))
<BR><BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPalette
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUICC_0.o(.rodata)
</UL>
<P><STRONG><a name="[142]"></a>_Color2Index_0</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, GUICC_0.o(.text._Color2Index_0))
<BR><BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPalette
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColors
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CalcColorDist
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUICC_0.o(.rodata)
</UL>
<P><STRONG><a name="[24f]"></a>_Link</STRONG> (Thumb, 156 bytes, Stack size unknown bytes, GUI_Timer.o(.text._Link))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Restart
</UL>

<P><STRONG><a name="[1d]"></a>_GetWordWrap</STRONG> (Thumb, 240 bytes, Stack size unknown bytes, GUI__Wrap.o(.text._GetWordWrap))
<BR><BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI__Wrap.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>_GetCharWrap</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, GUI__Wrap.o(.text._GetCharWrap))
<BR><BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI__Wrap.o(.data)
</UL>
<P><STRONG><a name="[14f]"></a>_GetDevData</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, GUIDEV_32.o(.text._GetDevData))
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_32.o(.rodata)
</UL>
<P><STRONG><a name="[14d]"></a>_GetDevFunc</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, GUIDEV_32.o(.text._GetDevFunc))
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_32.o(.rodata)
</UL>
<P><STRONG><a name="[14e]"></a>_GetDevProp</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, GUIDEV_32.o(.text._GetDevProp))
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_32.o(.rodata)
</UL>
<P><STRONG><a name="[14c]"></a>_SetOrg</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, GUIDEV_32.o(.text._SetOrg))
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_32.o(.rodata)
</UL>
<P><STRONG><a name="[150]"></a>_GetRect</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, GUIDEV_32.o(.text._GetRect))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_32.o(.rodata)
</UL>
<P><STRONG><a name="[145]"></a>_DrawBitmap</STRONG> (Thumb, 2496 bytes, Stack size unknown bytes, GUIDEV_32.o(.text._DrawBitmap))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_AddRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_32.o(.rodata)
</UL>
<P><STRONG><a name="[149]"></a>_GetPixelIndex</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, GUIDEV_32.o(.text._GetPixelIndex))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_32.o(.rodata)
</UL>
<P><STRONG><a name="[14a]"></a>_SetPixelIndex</STRONG> (Thumb, 120 bytes, Stack size unknown bytes, GUIDEV_32.o(.text._SetPixelIndex))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_32.o(.rodata)
</UL>
<P><STRONG><a name="[14b]"></a>_XorPixel</STRONG> (Thumb, 132 bytes, Stack size unknown bytes, GUIDEV_32.o(.text._XorPixel))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_32.o(.rodata)
</UL>
<P><STRONG><a name="[148]"></a>_FillRect</STRONG> (Thumb, 236 bytes, Stack size unknown bytes, GUIDEV_32.o(.text._FillRect))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_AddRect
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawHLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_32.o(.rodata)
</UL>
<P><STRONG><a name="[146]"></a>_DrawHLine</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, GUIDEV_32.o(.text._DrawHLine))
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_32.o(.rodata)
</UL>
<P><STRONG><a name="[147]"></a>_DrawVLine</STRONG> (Thumb, 228 bytes, Stack size unknown bytes, GUIDEV_32.o(.text._DrawVLine))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_32.o(.rodata)
</UL>
<P><STRONG><a name="[151]"></a>GUI_USAGE_BM_AddPixel</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, GUIDEV_UsageBM.o(.text.GUI_USAGE_BM_AddPixel))
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_UsageBM.o(.rodata)
</UL>
<P><STRONG><a name="[155]"></a>GUI_USAGE_BM_GetNextDirty</STRONG> (Thumb, 192 bytes, Stack size unknown bytes, GUIDEV_UsageBM.o(.text.GUI_USAGE_BM_GetNextDirty))
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_UsageBM.o(.rodata)
</UL>
<P><STRONG><a name="[154]"></a>_GUI_USAGE_BM_Delete</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, GUIDEV_UsageBM.o(.text._GUI_USAGE_BM_Delete))
<BR><BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_UsageBM.o(.rodata)
</UL>
<P><STRONG><a name="[153]"></a>GUI_USAGE_BM_Clear</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, GUIDEV_UsageBM.o(.text.GUI_USAGE_BM_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GUI_USAGE_BM_Clear &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_UsageBM.o(.rodata)
</UL>
<P><STRONG><a name="[152]"></a>GUI_USAGE_BM_AddHLine</STRONG> (Thumb, 114 bytes, Stack size unknown bytes, GUIDEV_UsageBM.o(.text.GUI_USAGE_BM_AddHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GUI_USAGE_BM_AddHLine &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_UsageBM.o(.rodata)
</UL>
<P><STRONG><a name="[2b5]"></a>_Screen2hWin</STRONG> (Thumb, 932 bytes, Stack size unknown bytes, WM_Screen2Win.o(.text._Screen2hWin))
<BR><BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWin
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWin
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Screen2hWin
</UL>

<P><STRONG><a name="[159]"></a>_DrawDownRect</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, WIDGET_Effect_Simple.o(.text._DrawDownRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = _DrawDownRect &rArr; GUI_RestoreContext &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RestoreContext
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SaveContext_W
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> WIDGET_Effect_Simple.o(.rodata)
</UL>
<P><STRONG><a name="[156]"></a>_DrawUp</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, WIDGET_Effect_Simple.o(.text._DrawUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = _DrawUp &rArr; GUI_RestoreContext &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RestoreContext
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SaveContext_W
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> WIDGET_Effect_Simple.o(.rodata)
</UL>
<P><STRONG><a name="[157]"></a>_DrawUpRect</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, WIDGET_Effect_Simple.o(.text._DrawUpRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = _DrawUpRect &rArr; GUI_RestoreContext &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RestoreContext
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SaveContext_W
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> WIDGET_Effect_Simple.o(.rodata)
</UL>
<P><STRONG><a name="[158]"></a>_DrawDown</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, WIDGET_Effect_Simple.o(.text._DrawDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = _DrawDown &rArr; GUI_RestoreContext &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RestoreContext
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SaveContext_W
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> WIDGET_Effect_Simple.o(.rodata)
</UL>
<P><STRONG><a name="[244]"></a>_CreateBuffer.isra.4</STRONG> (Thumb, 180 bytes, Stack size unknown bytes, GUI_SPRITE.o(.text._CreateBuffer.isra.4))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = _CreateBuffer.isra.4 &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _RemoveHoles &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetMaxSize
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SPRITE_SetPosition
</UL>

<P><STRONG><a name="[246]"></a>_SetBkIndexBuffered</STRONG> (Thumb, 208 bytes, Stack size unknown bytes, GUI_SPRITE.o(.text._SetBkIndexBuffered))
<BR><BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CompactPixelIndices
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SPRITE_SetPosition
</UL>

<P><STRONG><a name="[247]"></a>_ReleaseBuffer.isra.7</STRONG> (Thumb, 140 bytes, Stack size unknown bytes, GUI_SPRITE.o(.text._ReleaseBuffer.isra.7))
<BR><BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CompactPixelIndices
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SPRITE_SetPosition
</UL>

<P><STRONG><a name="[236]"></a>_WriteToActiveAlpha</STRONG> (Thumb, 408 bytes, Stack size unknown bytes, GUIDEV_WriteToActiveAlpha.o(.text._WriteToActiveAlpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = _WriteToActiveAlpha &rArr; GUI__AllocAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _RemoveHoles &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CompactPixelIndicesEx
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__AllocAlphaBuffer
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DoAlphaBlending
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAlpha
</UL>

<P><STRONG><a name="[403]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3ef]"></a>_printf_core</STRONG> (Thumb, 1704 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[405]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[404]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[cb]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[16c]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[172]"></a>_fp_value</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
